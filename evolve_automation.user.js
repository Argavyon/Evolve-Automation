// ==UserScript==
// @name         Evolve
// @namespace    http://tampermonkey.net/
// @version      3.3.1.128
// @description  try to take over the world!
// @downloadURL  https://gist.github.com/Vollch/b1a5eec305558a48b7f4575d317d7dd1/raw/evolve_automation.user.js
// @updateURL    https://gist.github.com/Vollch/b1a5eec305558a48b7f4575d317d7dd1/raw/evolve_automation.meta.js
// @author       Fafnir
// @author       TMVictor
// @author       Vollch
// @author       schoeggu
// @author       davezatch
// @author       Kewne
// @author       Argavyon
// @match        https://pmotschmann.github.io/Evolve/
// @grant        none
// @require      https://code.jquery.com/jquery-3.7.1.min.js
// @require      https://code.jquery.com/ui/1.12.1/jquery-ui.min.js
// ==/UserScript==

(()=>{function __webpack_require__(e){var t=__webpack_module_cache__[e];if(t!==undefined)return t.exports;var i=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](i,i.exports,__webpack_require__),i.exports}var __webpack_modules__={563:(e,t,i)=>{var a=i(935),r=i.n(a),n=i(659),o=i.n(n);const l=i.p+"evolve_automation.css";var u={};u.insert=o().bind(null,"head"),r()(l,u)},935:(e,t,i)=>{e.exports=(e,t)=>{if("undefined"==typeof document)return()=>{};if((t=t||{}).attributes="object"==typeof t.attributes?t.attributes:{},"undefined"==typeof t.attributes.nonce){var a=i.nc;a&&(t.attributes.nonce=a)}var r=document.createElement("link");return r.rel="stylesheet",r.href=e,Object.keys(t.attributes).forEach((e=>{r.setAttribute(e,t.attributes[e])})),t.insert(r),e=>{"string"==typeof e?r.href=e:r.parentNode.removeChild(r)}}},659:e=>{var t={};e.exports=function insertBySelector(e,i){var a=function getTarget(e){if("undefined"==typeof t[e]){var i=document.querySelector(e);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(a){i=null}t[e]=i}return t[e]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(i)}}},__webpack_module_cache__={};__webpack_require__.n=e=>{var t=e&&e.__esModule?()=>e["default"]:()=>e;return __webpack_require__.d(t,{a:t}),t},__webpack_require__.d=(e,t)=>{for(var i in t)__webpack_require__.o(t,i)&&!__webpack_require__.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},__webpack_require__.o=(e,t)=>({}.hasOwnProperty.call(e,t)),__webpack_require__.p="https://cdn.jsdelivr.net/gh/Argavyon/Evolve-Automation/",__webpack_require__.nc=undefined;var _css_evolve_automation_css__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(563);(function($){function updateCraftCost(){if(state.lastWasteful!==game.global.race.wasteful||state.lastHighPop!==game.global.race.high_pop||state.lastFlier!==game.global.race.flier){craftablesList=[],foundryList=[];for(let[e,t]of Object.entries(game.craftCost))if(resources[e]){resources[e].cost={};for(let i=0;i<t.length;i++)resources[e].cost[t[i].r]=t[i].a;craftablesList.push(resources[e]),"Scarletite"!==e&&"Quantium"!==e&&foundryList.push(resources[e])}state.lastWasteful=game.global.race.wasteful,state.lastHighPop=game.global.race.high_pop,state.lastFlier=game.global.race.flier}}function initialiseState(){updateCraftCost(),updateTabs(!1),Object.defineProperty(resources.Crates,"cost",{get:()=>isLumberRace()?{Plywood:10}:{Stone:200}}),resources.Containers.cost.Steel=125,JobManager.craftingJobs=Object.values(crafter),buildings.RedTerraformer.gameMax=100,buildings.RedAtmoTerraformer.gameMax=1,buildings.RedTerraform.gameMax=1,buildings.GasSpaceDock.gameMax=1,buildings.DwarfWorldController.gameMax=1,buildings.GasSpaceDockShipSegment.gameMax=100,buildings.ProximaDyson.gameMax=100,buildings.BlackholeStellarEngine.gameMax=100,buildings.DwarfWorldCollider.gameMax=1859,buildings.DwarfShipyard.gameMax=1,buildings.DwarfMassRelay.gameMax=100,buildings.DwarfMassRelayComplete.gameMax=1,buildings.TitanAI.gameMax=100,buildings.TitanAIComplete.gameMax=1,buildings.TritonFOB.gameMax=1,buildings.SunJumpGate.gameMax=100,buildings.TauJumpGate.gameMax=100,buildings.TauAlienOutpost.gameMax=1,buildings.TauStarRingworld.gameMax=1e3,buildings.TauStarMatrix.gameMax=1,buildings.TauGas2AlienStation.gameMax=100,buildings.TauGas2AlienSpaceStation.gameMax=1,buildings.TauGas2MatrioshkaBrain.gameMax=1e3,buildings.TauGas2IgnitionDevice.gameMax=10,buildings.ProximaDysonSphere.gameMax=100,buildings.ProximaOrichalcumSphere.gameMax=100,buildings.BlackholeStargate.gameMax=200,buildings.BlackholeStargateComplete.gameMax=1,buildings.SiriusSpaceElevator.gameMax=100,buildings.SiriusGravityDome.gameMax=100,buildings.SiriusAscensionMachine.gameMax=100,buildings.SiriusAscensionTrigger.gameMax=1,buildings.PitSoulForge.gameMax=1,buildings.PitSoulCapacitor.gameMax=40,buildings.PitAbsorptionChamber.gameMax=100,buildings.GateEastTower.gameMax=1,buildings.GateWestTower.gameMax=1,buildings.RuinsVault.gameMax=2,buildings.SpireBridge.gameMax=10,buildings.GorddonEmbassy.gameMax=1,buildings.Alien1Consulate.gameMax=1,projects.LaunchFacility.gameMax=1,projects.ManaSyphon.gameMax=80,buildings.CoalPower.addResourceConsumption((()=>"magic"===game.global.race.universe?resources.Mana:resources.Coal),(()=>game.global.race.environmentalist?0:"magic"===game.global.race.universe?.05:.65)),buildings.OilPower.addResourceConsumption(resources.Oil,(()=>game.global.race.environmentalist?0:.65)),buildings.FissionPower.addResourceConsumption(resources.Uranium,.1),buildings.TouristCenter.addResourceConsumption(resources.Food,50),buildings.SpaceNavBeacon.addSupport(resources.Moon_Support),buildings.SpaceNavBeacon.addResourceConsumption(resources.Red_Support,(()=>haveTech("luna",3)?-1:0)),buildings.MoonBase.addSupport(resources.Moon_Support),buildings.MoonIridiumMine.addSupport(resources.Moon_Support),buildings.MoonHeliumMine.addSupport(resources.Moon_Support),buildings.MoonObservatory.addSupport(resources.Moon_Support),buildings.RedSpaceport.addSupport(resources.Red_Support),buildings.RedTower.addSupport(resources.Red_Support),buildings.RedLivingQuarters.addSupport(resources.Red_Support),buildings.RedVrCenter.addSupport(resources.Red_Support),buildings.RedMine.addSupport(resources.Red_Support),buildings.RedFabrication.addSupport(resources.Red_Support),buildings.RedBiodome.addSupport(resources.Red_Support),buildings.RedExoticLab.addSupport(resources.Red_Support),buildings.SunSwarmControl.addSupport(resources.Sun_Support),buildings.SunSwarmSatellite.addSupport(resources.Sun_Support),buildings.BeltSpaceStation.addSupport(resources.Belt_Support),buildings.BeltEleriumShip.addSupport(resources.Belt_Support),buildings.BeltIridiumShip.addSupport(resources.Belt_Support),buildings.BeltIronShip.addSupport(resources.Belt_Support),buildings.AlphaStarport.addSupport(resources.Alpha_Support),buildings.AlphaHabitat.addSupport(resources.Alpha_Support),buildings.AlphaMiningDroid.addSupport(resources.Alpha_Support),buildings.AlphaProcessing.addSupport(resources.Alpha_Support),buildings.AlphaFusion.addSupport(resources.Alpha_Support),buildings.AlphaLaboratory.addSupport(resources.Alpha_Support),buildings.AlphaExchange.addSupport(resources.Alpha_Support),buildings.AlphaGraphenePlant.addSupport(resources.Alpha_Support),buildings.AlphaExoticZoo.addResourceConsumption(resources.Alpha_Support,1),buildings.ProximaTransferStation.addSupport(resources.Alpha_Support),buildings.NebulaNexus.addSupport(resources.Nebula_Support),buildings.NebulaHarvester.addSupport(resources.Nebula_Support),buildings.NebulaEleriumProspector.addSupport(resources.Nebula_Support),buildings.GatewayStarbase.addSupport(resources.Gateway_Support),buildings.GatewayShipDock.addSupport(resources.Gateway_Support),buildings.BologniumShip.addSupport(resources.Gateway_Support),buildings.ScoutShip.addSupport(resources.Gateway_Support),buildings.CorvetteShip.addSupport(resources.Gateway_Support),buildings.FrigateShip.addSupport(resources.Gateway_Support),buildings.CruiserShip.addSupport(resources.Gateway_Support),buildings.Dreadnought.addSupport(resources.Gateway_Support),buildings.StargateStation.addSupport(resources.Gateway_Support),buildings.StargateTelemetryBeacon.addSupport(resources.Gateway_Support),buildings.Alien2Foothold.addSupport(resources.Alien_Support),buildings.Alien2ArmedMiner.addSupport(resources.Alien_Support),buildings.Alien2OreProcessor.addSupport(resources.Alien_Support),buildings.Alien2Scavenger.addSupport(resources.Alien_Support),buildings.LakeHarbour.addSupport(resources.Lake_Support),buildings.LakeBireme.addSupport(resources.Lake_Support),buildings.LakeTransport.addSupport(resources.Lake_Support),buildings.SpirePurifier.addSupport(resources.Spire_Support),buildings.SpirePort.addSupport(resources.Spire_Support),buildings.SpireBaseCamp.addSupport(resources.Spire_Support),buildings.SpireMechBay.addSupport(resources.Spire_Support),buildings.TitanElectrolysis.addSupport(resources.Titan_Support),buildings.TitanQuarters.addSupport(resources.Titan_Support),buildings.TitanMine.addSupport(resources.Titan_Support),buildings.TitanGraphene.addSupport(resources.Titan_Support),buildings.TitanDecoder.addResourceConsumption(resources.Titan_Support,1),buildings.TitanSpaceport.addSupport(resources.Enceladus_Support),buildings.EnceladusWaterFreighter.addSupport(resources.Enceladus_Support),buildings.EnceladusZeroGLab.addSupport(resources.Enceladus_Support),buildings.EnceladusBase.addSupport(resources.Enceladus_Support),buildings.TitanElectrolysis.addResourceConsumption(resources.Electrolysis_Support,-1),buildings.TitanHydrogen.addResourceConsumption(resources.Electrolysis_Support,1),buildings.ErisDrone.addSupport(resources.Eris_Support),buildings.ErisTrooper.addSupport(resources.Eris_Support),buildings.ErisTank.addSupport(resources.Eris_Support),buildings.TauOrbitalStation.addSupport(resources.Tau_Support),buildings.TauFarm.addSupport(resources.Tau_Support),buildings.TauColony.addSupport(resources.Tau_Support),buildings.TauFactory.addSupport(resources.Tau_Support),buildings.TauDiseaseLab.addSupport(resources.Tau_Support),buildings.TauMiningPit.addSupport(resources.Tau_Support),buildings.TauRedOrbitalPlatform.addSupport(resources.Tau_Red_Support),buildings.TauRedOverseer.addSupport(resources.Tau_Red_Support),buildings.TauRedWomlingVillage.addSupport(resources.Tau_Red_Support),buildings.TauRedWomlingFarm.addSupport(resources.Tau_Red_Support),buildings.TauRedWomlingMine.addSupport(resources.Tau_Red_Support),buildings.TauRedWomlingFun.addSupport(resources.Tau_Red_Support),buildings.TauRedWomlingLab.addSupport(resources.Tau_Red_Support),buildings.TauRedWomlingVillage.addResourceConsumption(resources.Womlings_Support,(()=>haveTech("womling_pop",2)?-6:-5)),buildings.TauRedWomlingFarm.addResourceConsumption(resources.Womlings_Support,(()=>buildings.TauRedWomlingFarm.autoStateSmart?2:0)),buildings.TauRedWomlingLab.addResourceConsumption(resources.Womlings_Support,(()=>buildings.TauRedWomlingLab.autoStateSmart?1:0)),buildings.TauRedWomlingMine.addResourceConsumption(resources.Womlings_Support,(()=>buildings.TauRedWomlingMine.autoStateSmart?6:0)),buildings.TauBeltPatrolShip.addSupport(resources.Tau_Belt_Support),buildings.TauBeltMiningShip.addSupport(resources.Tau_Belt_Support),buildings.TauBeltWhalingShip.addSupport(resources.Tau_Belt_Support),buildings.MoonBase.addResourceConsumption(resources.Oil,2),buildings.RedSpaceport.addResourceConsumption(resources.Helium_3,1.25),buildings.RedSpaceport.addResourceConsumption(resources.Food,(()=>game.global.race.cataclysm||game.global.race.orbit_decayed?2:25)),buildings.RedFactory.addResourceConsumption(resources.Helium_3,1),buildings.RedSpaceBarracks.addResourceConsumption(resources.Oil,2),buildings.RedSpaceBarracks.addResourceConsumption(resources.Food,(()=>game.global.race.cataclysm||game.global.race.orbit_decayed?0:10)),buildings.HellGeothermal.addResourceConsumption(resources.Helium_3,.5),buildings.GasMoonOutpost.addResourceConsumption(resources.Oil,2),buildings.BeltSpaceStation.addResourceConsumption(resources.Food,(()=>game.global.race.fasting?0:game.global.race.cataclysm||game.global.race.orbit_decayed?1:10)),buildings.BeltSpaceStation.addResourceConsumption(resources.Helium_3,2.5),buildings.DwarfEleriumReactor.addResourceConsumption(resources.Elerium,.05),buildings.AlphaStarport.addResourceConsumption(resources.Food,100),buildings.AlphaStarport.addResourceConsumption(resources.Helium_3,5),buildings.AlphaFusion.addResourceConsumption(resources.Deuterium,1.25),buildings.AlphaExoticZoo.addResourceConsumption(resources.Food,12e3),buildings.AlphaMegaFactory.addResourceConsumption(resources.Deuterium,5),buildings.ProximaTransferStation.addResourceConsumption(resources.Uranium,.28),buildings.ProximaCruiser.addResourceConsumption(resources.Helium_3,6),buildings.NeutronMiner.addResourceConsumption(resources.Helium_3,3),buildings.GatewayStarbase.addResourceConsumption(resources.Helium_3,25),buildings.GatewayStarbase.addResourceConsumption(resources.Food,250),buildings.BologniumShip.addResourceConsumption(resources.Helium_3,5),buildings.ScoutShip.addResourceConsumption(resources.Helium_3,6),buildings.CorvetteShip.addResourceConsumption(resources.Helium_3,10),buildings.FrigateShip.addResourceConsumption(resources.Helium_3,25),buildings.CruiserShip.addResourceConsumption(resources.Deuterium,25),buildings.Dreadnought.addResourceConsumption(resources.Deuterium,80),buildings.GorddonEmbassy.addResourceConsumption(resources.Food,(()=>game.global.race.fasting?0:7500)),buildings.GorddonFreighter.addResourceConsumption(resources.Helium_3,12),buildings.Alien1VitreloyPlant.addResourceConsumption(resources.Bolognium,2.5),buildings.Alien1VitreloyPlant.addResourceConsumption(resources.Stanene,100),buildings.Alien1VitreloyPlant.addResourceConsumption(resources.Money,5e4),buildings.Alien1SuperFreighter.addResourceConsumption(resources.Helium_3,25),buildings.Alien2Foothold.addResourceConsumption(resources.Elerium,2.5),buildings.Alien2ArmedMiner.addResourceConsumption(resources.Helium_3,10),buildings.Alien2Scavenger.addResourceConsumption(resources.Helium_3,12),buildings.ChthonianMineLayer.addResourceConsumption(resources.Helium_3,8),buildings.ChthonianRaider.addResourceConsumption(resources.Helium_3,18),buildings.RuinsInfernoPower.addResourceConsumption(resources.Infernite,5),buildings.RuinsInfernoPower.addResourceConsumption(resources.Coal,100),buildings.RuinsInfernoPower.addResourceConsumption(resources.Oil,80),buildings.TitanElectrolysis.addResourceConsumption(resources.Water,35),buildings.TitanQuarters.addResourceConsumption(resources.Water,12),buildings.TitanQuarters.addResourceConsumption(resources.Food,500),buildings.TitanDecoder.addResourceConsumption(resources.Cipher,.06),buildings.TitanAIComplete.addResourceConsumption(resources.Water,1e3),buildings.EnceladusWaterFreighter.addResourceConsumption(resources.Helium_3,5),buildings.TritonFOB.addResourceConsumption(resources.Helium_3,125),buildings.TritonLander.addResourceConsumption(resources.Oil,50),buildings.KuiperOrichalcum.addResourceConsumption(resources.Oil,200),buildings.KuiperUranium.addResourceConsumption(resources.Oil,60),buildings.KuiperNeutronium.addResourceConsumption(resources.Oil,60),buildings.KuiperElerium.addResourceConsumption(resources.Oil,125),buildings.ErisDrone.addResourceConsumption(resources.Uranium,5),buildings.TauOrbitalStation.addResourceConsumption(resources.Helium_3,(()=>haveTech("isolation")?game.global.race.lone_survivor?5:25:400)),buildings.TauColony.addResourceConsumption(resources.Food,(()=>haveTech("isolation")?game.global.race.lone_survivor?-2:75:1e3)),buildings.TauFusionGenerator.addResourceConsumption(resources.Helium_3,(()=>haveTech("isolation")?game.global.race.lone_survivor?-15:75:500)),buildings.TauCulturalCenter.addResourceConsumption(resources.Food,(()=>game.global.race.lone_survivor?25:500)),buildings.TauRedOrbitalPlatform.addResourceConsumption(resources.Oil,(()=>game.global.race.lone_survivor?0:haveTech("isolation")?32:125)),buildings.TauRedOrbitalPlatform.addResourceConsumption(resources.Helium_3,(()=>game.global.race.lone_survivor?haveTech("isolation")?8:125:0)),buildings.TauBeltPatrolShip.addResourceConsumption(resources.Helium_3,(()=>haveTech("isolation")?15:250)),buildings.TauBeltMiningShip.addResourceConsumption(resources.Helium_3,(()=>haveTech("isolation")?12:75)),buildings.TauBeltWhalingShip.addResourceConsumption(resources.Helium_3,(()=>haveTech("isolation")?14:90)),buildings.TauGas2AlienSpaceStation.addResourceConsumption(resources.Elerium,(()=>game.global.race.lone_survivor?1:10)),buildings=Object.fromEntries(Object.entries(buildings).filter((([e,t])=>!!t.definition||console.log(`${t.name} action not found.`)))),Object.values(buildings).forEach((e=>{if(e.powered>0){let t=(e._location||e._tab)+":"+e.id;-1===game.global.power.indexOf(t)&&(e.overridePowered=0)}})),buildings.Windmill.overridePowered=-1,buildings.SunSwarmSatellite.overridePowered=-.35,buildings.ProximaDyson.overridePowered=-1.25,buildings.ProximaDysonSphere.overridePowered=-5,buildings.ProximaOrichalcumSphere.overridePowered=-8}function initialiseRaces(){for(let r in game.actions.evolution)evolutions[r]=new EvolutionAction(r);let e=evolutions,t=[e.bilateral_symmetry,e.multicellular,e.phagocytosis,e.sexual_reproduction],i=[e.mammals,...t],a={eldritch:[e.sentience,e.eldritch,...t],aquatic:[e.sentience,e.aquatic,...t],insectoid:[e.sentience,e.athropods,...t],humanoid:[e.sentience,e.humanoid,...i],giant:[e.sentience,e.gigantism,...i],small:[e.sentience,e.dwarfism,...i],carnivore:[e.sentience,e.carnivore,e.animalism,...i],herbivore:[e.sentience,e.herbivore,e.animalism,...i],demonic:[e.sentience,e.demonic,...i],angelic:[e.sentience,e.celestial,...i],fey:[e.sentience,e.fey,...i],heat:[e.sentience,e.heat,...i],polar:[e.sentience,e.polar,...i],sand:[e.sentience,e.sand,...i],avian:[e.sentience,e.endothermic,e.eggshell,...t],reptilian:[e.sentience,e.ectothermic,e.eggshell,...t],plant:[e.sentience,e.bryophyte,e.poikilohydric,e.multicellular,e.chloroplasts,e.sexual_reproduction],fungi:[e.sentience,e.bryophyte,e.spores,e.multicellular,e.chitin,e.sexual_reproduction],synthetic:[e.sentience,e.exterminate,e.sexual_reproduction]};for(let r in game.races){if("protoplasm"===r)continue;races[r]=new Race(r);let t="junker"===r||"sludge"===r?a.fungi:a[races[r].genus];races[r].evolutionTree=[e.bunker,e[r],...t??[]],imitations[r]=new EvolutionAction(`s-${r}`)}}function initBuildingState(){let e=[];e.push(buildings.Windmill),e.push(buildings.Mill),e.push(buildings.CoalPower),e.push(buildings.OilPower),e.push(buildings.FissionPower),e.push(buildings.TauFusionGenerator),e.push(buildings.TauGas2AlienSpaceStation),e.push(buildings.RuinsHellForge),e.push(buildings.RuinsInfernoPower),e.push(buildings.TitanElectrolysis),e.push(buildings.TitanHydrogen),e.push(buildings.TitanQuarters),e.push(buildings.DwarfMassRelayComplete),e.push(buildings.RuinsArcology),e.push(buildings.Apartment),e.push(buildings.Barracks),e.push(buildings.TouristCenter),e.push(buildings.University),e.push(buildings.Smelter),e.push(buildings.Temple),e.push(buildings.OilWell),e.push(buildings.StorageYard),e.push(buildings.Warehouse),e.push(buildings.Bank),e.push(buildings.Hospital),e.push(buildings.BootCamp),e.push(buildings.House),e.push(buildings.Cottage),e.push(buildings.Farm),e.push(buildings.Silo),e.push(buildings.Shed),e.push(buildings.LumberYard),e.push(buildings.Foundry),e.push(buildings.OilDepot),e.push(buildings.Trade),e.push(buildings.Amphitheatre),e.push(buildings.Library),e.push(buildings.Wharf),e.push(buildings.NaniteFactory),e.push(buildings.RedNaniteFactory),e.push(buildings.TauNaniteFactory),e.push(buildings.Transmitter),e.push(buildings.Assembly),e.push(buildings.RedAssembly),e.push(buildings.TauAssembly),e.push(buildings.TauCloning),e.push(buildings.Lodge),e.push(buildings.Smokehouse),e.push(buildings.SoulWell),e.push(buildings.SlavePen),e.push(buildings.SlaveMarket),e.push(buildings.CaptiveHousing),e.push(buildings.RedCaptiveHousing),e.push(buildings.TauCaptiveHousing),e.push(buildings.Graveyard),e.push(buildings.Shrine),e.push(buildings.CompostHeap),e.push(buildings.ConcealWard),e.push(buildings.Pylon),e.push(buildings.RedPylon),e.push(buildings.TauPylon),e.push(buildings.ForgeHorseshoe),e.push(buildings.RedForgeHorseshoe),e.push(buildings.TauForgeHorseshoe),e.push(buildings.SacrificialAltar),e.push(buildings.MeditationChamber),e.push(buildings.Banquet),e.push(buildings.DwarfMission),e.push(buildings.DwarfEleriumReactor),e.push(buildings.DwarfWorldCollider),e.push(buildings.HellMission),e.push(buildings.HellGeothermal),e.push(buildings.HellSwarmPlant),e.push(buildings.ProximaTransferStation),e.push(buildings.ProximaMission),e.push(buildings.ProximaCargoYard),e.push(buildings.ProximaCruiser),e.push(buildings.ProximaDyson),e.push(buildings.ProximaDysonSphere),e.push(buildings.ProximaOrichalcumSphere),e.push(buildings.AlphaMission),e.push(buildings.AlphaStarport),e.push(buildings.AlphaFusion),e.push(buildings.AlphaHabitat),e.push(buildings.AlphaLuxuryCondo),e.push(buildings.AlphaMiningDroid),e.push(buildings.AlphaProcessing),e.push(buildings.AlphaLaboratory),e.push(buildings.AlphaExoticZoo),e.push(buildings.AlphaExchange),e.push(buildings.AlphaGraphenePlant),e.push(buildings.AlphaWarehouse),e.push(buildings.SpaceTestLaunch),e.push(buildings.SpaceSatellite),e.push(buildings.SpaceGps),e.push(buildings.SpacePropellantDepot),e.push(buildings.SpaceNavBeacon),e.push(buildings.RedMission),e.push(buildings.RedTower),e.push(buildings.RedSpaceport),e.push(buildings.RedLivingQuarters),e.push(buildings.RedBiodome),e.push(buildings.RedSpaceBarracks),e.push(buildings.RedExoticLab),e.push(buildings.RedFabrication),e.push(buildings.RedMine),e.push(buildings.RedVrCenter),e.push(buildings.RedZiggurat),e.push(buildings.RedGarage),e.push(buildings.RedUniversity),e.push(buildings.RedTerraformer),e.push(buildings.MoonMission),e.push(buildings.MoonBase),e.push(buildings.MoonObservatory),e.push(buildings.MoonHeliumMine),e.push(buildings.MoonIridiumMine),e.push(buildings.SunMission),e.push(buildings.SunSwarmControl),e.push(buildings.SunSwarmSatellite),e.push(buildings.SunJumpGate),e.push(buildings.GasMission),e.push(buildings.GasStorage),e.push(buildings.GasSpaceDock),e.push(buildings.GasSpaceDockProbe),e.push(buildings.GasSpaceDockGECK),e.push(buildings.GasSpaceDockShipSegment),e.push(buildings.GasMoonMission),e.push(buildings.GasMoonDrone),e.push(buildings.Blackhole),e.push(buildings.BlackholeStellarEngine),e.push(buildings.BlackholeJumpShip),e.push(buildings.BlackholeWormholeMission),e.push(buildings.BlackholeStargate),e.push(buildings.SiriusMission),e.push(buildings.SiriusAnalysis),e.push(buildings.SiriusSpaceElevator),e.push(buildings.SiriusGravityDome),e.push(buildings.SiriusThermalCollector),e.push(buildings.SiriusAscensionMachine),e.push(buildings.BlackholeStargateComplete),e.push(buildings.GatewayMission),e.push(buildings.GatewayStarbase),e.push(buildings.GatewayShipDock),e.push(buildings.StargateStation),e.push(buildings.StargateTelemetryBeacon),e.push(buildings.Dreadnought),e.push(buildings.CruiserShip),e.push(buildings.FrigateShip),e.push(buildings.BologniumShip),e.push(buildings.CorvetteShip),e.push(buildings.ScoutShip),e.push(buildings.GorddonMission),e.push(buildings.GorddonEmbassy),e.push(buildings.GorddonDormitory),e.push(buildings.GorddonSymposium),e.push(buildings.GorddonFreighter),e.push(buildings.NeutronCitadel),e.push(buildings.SiriusAscensionTrigger),e.push(buildings.RedAtmoTerraformer),e.push(buildings.BlackholeMassEjector),e.push(buildings.PitSoulForge),e.push(buildings.Alien1Consulate),e.push(buildings.Alien1Resort),e.push(buildings.Alien1VitreloyPlant),e.push(buildings.Alien1SuperFreighter),e.push(buildings.Alien2Foothold),e.push(buildings.Alien2Scavenger),e.push(buildings.Alien2ArmedMiner),e.push(buildings.Alien2OreProcessor),e.push(buildings.ChthonianMineLayer),e.push(buildings.ChthonianExcavator),e.push(buildings.ChthonianRaider),e.push(buildings.Wardenclyffe),e.push(buildings.BioLab),e.push(buildings.DwarfWorldController),e.push(buildings.BlackholeFarReach),e.push(buildings.NebulaMission),e.push(buildings.NebulaNexus),e.push(buildings.NebulaHarvester),e.push(buildings.NebulaEleriumProspector),e.push(buildings.BeltMission),e.push(buildings.BeltSpaceStation),e.push(buildings.BeltEleriumShip),e.push(buildings.BeltIridiumShip),e.push(buildings.BeltIronShip),e.push(buildings.CementPlant),e.push(buildings.Factory),e.push(buildings.GasMoonOutpost),e.push(buildings.StargateDefensePlatform),e.push(buildings.RedFactory),e.push(buildings.AlphaMegaFactory),e.push(buildings.PortalTurret),e.push(buildings.BadlandsSensorDrone),e.push(buildings.PortalWarDroid),e.push(buildings.BadlandsPredatorDrone),e.push(buildings.BadlandsAttractor),e.push(buildings.PortalCarport),e.push(buildings.PitGunEmplacement),e.push(buildings.PitSoulAttractor),e.push(buildings.PitSoulCapacitor),e.push(buildings.PitAbsorptionChamber),e.push(buildings.PortalRepairDroid),e.push(buildings.PitMission),e.push(buildings.PitAssaultForge),e.push(buildings.RuinsAncientPillars),e.push(buildings.RuinsMission),e.push(buildings.RuinsGuardPost),e.push(buildings.RuinsVault),e.push(buildings.RuinsArchaeology),e.push(buildings.GateMission),e.push(buildings.GateEastTower),e.push(buildings.GateWestTower),e.push(buildings.GateTurret),e.push(buildings.GateInferniteMine),e.push(buildings.SpireMission),e.push(buildings.SpirePurifier),e.push(buildings.SpireMechBay),e.push(buildings.SpireBaseCamp),e.push(buildings.SpirePort),e.push(buildings.SpireBridge),e.push(buildings.SpireSphinx),e.push(buildings.SpireBribeSphinx),e.push(buildings.SpireSurveyTower),e.push(buildings.SpireWaygate),e.push(buildings.LakeMission),e.push(buildings.LakeCoolingTower),e.push(buildings.LakeHarbour),e.push(buildings.LakeBireme),e.push(buildings.LakeTransport),e.push(buildings.HellSmelter),e.push(buildings.DwarfShipyard),e.push(buildings.DwarfMassRelay),e.push(buildings.TitanMission),e.push(buildings.TitanSpaceport),e.push(buildings.TitanAIColonist),e.push(buildings.TitanMine),e.push(buildings.TitanSAM),e.push(buildings.TitanGraphene),e.push(buildings.TitanStorehouse),e.push(buildings.TitanBank),e.push(buildings.TitanAI),e.push(buildings.TitanAIComplete),e.push(buildings.TitanDecoder),e.push(buildings.EnceladusMission),e.push(buildings.EnceladusZeroGLab),e.push(buildings.EnceladusWaterFreighter),e.push(buildings.EnceladusBase),e.push(buildings.EnceladusMunitions),e.push(buildings.TritonMission),e.push(buildings.TritonFOB),e.push(buildings.TritonLander),e.push(buildings.KuiperMission),e.push(buildings.KuiperOrichalcum),e.push(buildings.KuiperUranium),e.push(buildings.KuiperNeutronium),e.push(buildings.KuiperElerium),e.push(buildings.ErisMission),e.push(buildings.ErisDrone),e.push(buildings.ErisTank),e.push(buildings.ErisTrooper),e.push(buildings.TauStarRingworld),e.push(buildings.TauStarMatrix),e.push(buildings.TauStarEden),e.push(buildings.TauMission),e.push(buildings.TauDismantle),e.push(buildings.TauOrbitalStation),e.push(buildings.TauFarm),e.push(buildings.TauColony),e.push(buildings.TauHousing),e.push(buildings.TauExcavate),e.push(buildings.TauAlienOutpost),e.push(buildings.TauJumpGate),e.push(buildings.TauRepository),e.push(buildings.TauFactory),e.push(buildings.TauDiseaseLab),e.push(buildings.TauCasino),e.push(buildings.TauCulturalCenter),e.push(buildings.TauMiningPit),e.push(buildings.TauRedMission),e.push(buildings.TauRedOrbitalPlatform),e.push(buildings.TauRedContact),e.push(buildings.TauRedIntroduce),e.push(buildings.TauRedSubjugate),e.push(buildings.TauRedWomlingVillage),e.push(buildings.TauRedWomlingFarm),e.push(buildings.TauRedWomlingLab),e.push(buildings.TauRedWomlingMine),e.push(buildings.TauRedWomlingFun),e.push(buildings.TauRedOverseer),e.push(buildings.TauGasContest),e.push(buildings.TauGasName1),e.push(buildings.TauGasName2),e.push(buildings.TauGasName3),e.push(buildings.TauGasName4),e.push(buildings.TauGasName5),e.push(buildings.TauGasName6),e.push(buildings.TauGasName7),e.push(buildings.TauGasName8),e.push(buildings.TauGasRefuelingStation),e.push(buildings.TauGasOreRefinery),e.push(buildings.TauGasWhalingStation),e.push(buildings.TauGasWomlingStation),e.push(buildings.TauBeltMission),e.push(buildings.TauBeltPatrolShip),e.push(buildings.TauBeltMiningShip),e.push(buildings.TauBeltWhalingShip),e.push(buildings.TauGas2Contest),e.push(buildings.TauGas2Name1),e.push(buildings.TauGas2Name2),e.push(buildings.TauGas2Name3),e.push(buildings.TauGas2Name4),e.push(buildings.TauGas2Name5),e.push(buildings.TauGas2Name6),e.push(buildings.TauGas2Name7),e.push(buildings.TauGas2Name8),e.push(buildings.TauGas2AlienSurvey),e.push(buildings.TauGas2AlienStation),e.push(buildings.TauGas2MatrioshkaBrain),e.push(buildings.TauGas2IgnitionDevice),e.push(buildings.TauGas2IgniteGasGiant),e.push(buildings.StargateDepot),e.push(buildings.DwarfEleriumContainer),e.push(buildings.GasMoonOilExtractor),e.push(buildings.NeutronMission),e.push(buildings.NeutronStellarForge),e.push(buildings.NeutronMiner),e.push(buildings.MassDriver),e.push(buildings.MetalRefinery),e.push(buildings.Casino),e.push(buildings.HellSpaceCasino),e.push(buildings.RockQuarry),e.push(buildings.Sawmill),e.push(buildings.GasMining),e.push(buildings.Mine),e.push(buildings.CoalMine),BuildingManager.priorityList=e.filter((e=>e)),BuildingManager.statePriorityList=e.filter((e=>e&&e.isSwitchable()))}function resetWarSettings(e){applySettings({autoFight:!1,foreignAttackLivingSoldiersPercent:90,foreignAttackHealthySoldiersPercent:90,foreignHireMercMoneyStoragePercent:90,foreignHireMercCostLowerThanIncome:1,foreignHireMercDeadSoldiers:1,foreignMinAdvantage:40,foreignMaxAdvantage:80,foreignMaxSiegeBattalion:10,foreignProtect:"auto",foreignPacifist:!1,foreignUnification:!0,foreignForceSabotage:!0,foreignOccupyLast:!0,foreignTrainSpy:!0,foreignSpyMax:2,foreignPowerRequired:75,foreignPolicyInferior:"Annex",foreignPolicySuperior:"Sabotage",foreignPolicyRival:"Influence"},e)}function resetHellSettings(e){applySettings({autoHell:!1,hellHomeGarrison:10,hellMinSoldiers:20,hellMinSoldiersPercent:90,hellAssaultReserve:!0,hellTargetFortressDamage:100,hellLowWallsMulti:3,hellHandlePatrolSize:!0,hellPatrolMinRating:30,hellPatrolThreatPercent:8,hellPatrolDroneMod:5,hellPatrolDroidMod:5,hellPatrolBootcampMod:0,hellBolsterPatrolPercentTop:50,hellBolsterPatrolPercentBottom:20,hellBolsterPatrolRating:300,hellAttractorTopThreat:9e3,hellAttractorBottomThreat:6e3},e)}function resetGeneralSettings(e){applySettings({masterScriptToggle:!0,showSettings:!0,autoPrestige:!1,tickRate:4,tickSchedule:!1,researchRequest:!0,researchRequestSpace:!1,missionRequest:!0,useDemanded:!0,prioritizeTriggers:"savereq",prioritizeQueue:"savereq",prioritizeUnify:"savereq",prioritizeOuterFleet:"ignore",buildingAlwaysClick:!1,buildingClickPerTick:50,activeTargetsUI:!1,displayPrestigeTypeInTopBar:!1,displayTotalDaysTypeInTopBar:!1,scriptSettingsExportFilename:"evolve-script-settings.json",performanceHackAvoidDrawTech:!1},e)}function resetPrestigeSettings(e){applySettings({prestigeType:"none",prestigeMADIgnoreArpa:!0,prestigeMADWait:!0,prestigeMADPopulation:1,prestigeWaitAT:!1,prestigeGECK:0,prestigeBioseedConstruct:!0,prestigeBioseedProbes:3,prestigeWhiteholeSaveGems:!0,prestigeWhiteholeMinMass:8,prestigeAscensionPillar:!0,prestigeDemonicFloor:100,prestigeDemonicPotential:.6,prestigeDemonicBomb:!1,prestigeVaxStrat:"none"},e)}function resetGovernmentSettings(e){applySettings({autoTax:!1,autoGovernment:!1,generalRequestedTaxRate:-1,generalMinimumTaxRate:20,generalMinimumMorale:105,generalMaximumMorale:500,govInterim:GovernmentManager.Types.democracy.id,govFinal:GovernmentManager.Types.technocracy.id,govSpace:GovernmentManager.Types.corpocracy.id,govGovernor:"none"},e)}function resetEvolutionSettings(e){let t={autoEvolution:!1,userUniverseTargetName:"none",userPlanetTargetName:"none",userEvolutionTarget:"auto",evolutionQueue:[],evolutionQueueEnabled:!1,evolutionQueueRepeat:!1,evolutionAutoUnbound:!0,evolutionBackup:!1};challenges.forEach((e=>t["challenge_"+e[0].id]=!1)),applySettings(t,e)}function resetResearchSettings(e){applySettings({autoResearch:!1,userResearchTheology_1:"auto",userResearchTheology_2:"auto",researchIgnore:["tech-purify"]},e)}function resetMarketSettings(e){MarketManager.priorityList=Object.values(resources).filter((e=>e.is.tradable)).reverse();let t={autoMarket:!1,autoGalaxyMarket:!1,tradeRouteMinimumMoneyPerSecond:500,tradeRouteMinimumMoneyPercentage:50,tradeRouteSellExcess:!0,minimumMoney:0,minimumMoneyPercentage:0,marketMinIngredients:0};for(let i=0;i<MarketManager.priorityList.length;i++){let e=MarketManager.priorityList[i].id;t["res_buy_p_"+e]=i,t["buy"+e]=!1,t["res_buy_r_"+e]=.5,t["sell"+e]=!1,t["res_sell_r_"+e]=.9,t["res_trade_buy_"+e]=!0,t["res_trade_sell_"+e]=!0,t["res_trade_w_"+e]=1,t["res_trade_p_"+e]=1}const setTradePriority=(e,i)=>i.forEach((i=>t["res_trade_p_"+i]=e));setTradePriority(1,["Food"]),setTradePriority(2,["Helium_3","Uranium","Oil","Coal"]),setTradePriority(3,["Stone","Chrysotile","Lumber"]),setTradePriority(4,["Aluminium","Iron","Copper"]),setTradePriority(5,["Furs"]),setTradePriority(6,["Cement"]),setTradePriority(7,["Steel"]),setTradePriority(8,["Titanium"]),setTradePriority(9,["Polymer","Alloy"]),setTradePriority(10,["Iridium"]),setTradePriority(-1,["Crystal"]);for(let i=0;i<poly.galaxyOffers.length;i++){let e=resources[poly.galaxyOffers[i].buy.res].id;t["res_galaxy_w_"+e]=1,t["res_galaxy_p_"+e]=i+1}applySettings(t,e),MarketManager.sortByPriority()}function resetStorageSettings(e){StorageManager.priorityList=Object.values(resources).filter((e=>e.hasStorage())).reverse();let t={autoStorage:!1,storageLimitPreMad:!0,storageSafeReassign:!0,storageAssignExtra:!0,storageAssignPart:!1};for(let i=0;i<StorageManager.priorityList.length;i++){let e=StorageManager.priorityList[i].id;t["res_storage"+e]=!0,t["res_storage_p_"+e]=i,t["res_storage_o_"+e]=!1,t["res_min_store"+e]=1,t["res_max_store"+e]=-1}t["res_storage_o_"+resources.Orichalcum.id]=!0,t["res_storage_o_"+resources.Vitreloy.id]=!0,t["res_storage_o_"+resources.Bolognium.id]=!0,applySettings(t,e),StorageManager.sortByPriority()}function resetMinorTraitSettings(e){MinorTraitManager.priorityList=Object.entries(game.traits).filter((([e,t])=>"minor"===t.type||"mastery"===e||"fortify"===e)).map((([e,t])=>new MinorTrait(e)));let t={autoMinorTrait:!1,shifterGenus:"ignore",imitateRace:"ignore",buildingShrineType:"know",slaveIncome:25e3,jobScalePop:!0,psychicPower:"auto",psychicBoostRes:"auto",autoGenetics:!1,geneticsSequence:"none",geneticsBoost:"none",geneticsAssemble:"auto"};for(let i=0;i<MinorTraitManager.priorityList.length;i++){let e=MinorTraitManager.priorityList[i].traitName;t["mTrait_"+e]=!0,t["mTrait_p_"+e]=i,t["mTrait_w_"+e]=1}applySettings(t,e),MinorTraitManager.sortByPriority()}function resetMutableTraitSettings(e){let t=["xenophobic","rigid","soul_eater"];MutableTraitManager.priorityList=Object.entries(game.traits).filter((([e,i])=>("major"===i.type||"genus"===i.type)&&!t.includes(e))).map((([e,t])=>"major"===t.type?new MajorTrait(e):new GenusTrait(e))).sort(((e,t)=>Object.keys(poly.genus_traits).indexOf(e.genus)-Object.keys(poly.genus_traits).indexOf(t.genus)||e.type<t.type));let i={autoMutateTraits:!1,doNotGoBelowPlasmidSoftcap:!0,minimumPlasmidsToPreserve:0};for(let a=0;a<MutableTraitManager.priorityList.length;a++){let e=MutableTraitManager.priorityList[a],t=e.traitName;i["mutableTrait_p_"+t]=a,i["mutableTrait_purge_"+t]=!1,e.isGainable()&&(i["mutableTrait_gain_"+t]=!1),poly.neg_roll_traits.includes(t)&&(i["mutableTrait_reset_"+t]=!1)}applySettings(i,e),MutableTraitManager.sortByPriority()}function resetJobSettings(e){JobManager.priorityList=Object.values(jobs);let t={autoJobs:!1,autoCraftsmen:!1,jobSetDefault:!0,jobManageServants:!0,jobLumberWeighting:50,jobQuarryWeighting:50,jobCrystalWeighting:50,jobScavengerWeighting:5,jobRaiderWeighting:20,jobDisableMiners:!0};for(let i=0;i<JobManager.priorityList.length;i++){let e=JobManager.priorityList[i],a=e._originalId;t["job_"+a]=!0,t["job_p_"+a]=i,e.is.smart&&(t["job_s_"+a]=!0)}const setBreakpoints=(e,i,a,r)=>{t["job_b1_"+e._originalId]=i,t["job_b2_"+e._originalId]=a,t["job_b3_"+e._originalId]=r};setBreakpoints(jobs.Colonist,-1,-1,-1),setBreakpoints(jobs.Teamster,10,-1,-1),setBreakpoints(jobs.Meditator,-1,-1,-1),setBreakpoints(jobs.Hunter,-1,-1,-1),setBreakpoints(jobs.Farmer,-1,-1,-1),setBreakpoints(jobs.Lumberjack,4,10,0),setBreakpoints(jobs.QuarryWorker,4,10,0),setBreakpoints(jobs.CrystalMiner,2,5,0),setBreakpoints(jobs.Scavenger,0,0,0),setBreakpoints(jobs.TitanColonist,-1,-1,-1),setBreakpoints(jobs.PitMiner,1,12,-1),setBreakpoints(jobs.Miner,3,5,-1),setBreakpoints(jobs.CoalMiner,2,4,-1),setBreakpoints(jobs.CementWorker,4,8,-1),setBreakpoints(jobs.Professor,6,10,-1),setBreakpoints(jobs.Scientist,3,6,-1),setBreakpoints(jobs.Entertainer,2,5,-1),setBreakpoints(jobs.HellSurveyor,1,1,-1),setBreakpoints(jobs.SpaceMiner,1,3,-1),setBreakpoints(jobs.Torturer,1,1,-1),setBreakpoints(jobs.Archaeologist,1,1,-1),setBreakpoints(jobs.Banker,3,5,-1),setBreakpoints(jobs.Priest,0,0,-1),setBreakpoints(jobs.Unemployed,0,0,0),applySettings(t,e),JobManager.sortByPriority()}function resetWeightingSettings(e){applySettings({buildingBuildIfStorageFull:!1,buildingWeightingNew:3,buildingWeightingUselessPowerPlant:.01,buildingWeightingNeedfulPowerPlant:3,buildingWeightingUnderpowered:.8,buildingWeightingUselessKnowledge:.01,buildingWeightingNeedfulKnowledge:5,buildingWeightingMissingFuel:10,buildingWeightingNonOperatingCity:.2,buildingWeightingNonOperating:0,buildingWeightingMissingSupply:0,buildingWeightingMissingSupport:0,buildingWeightingUselessSupport:.01,buildingWeightingMADUseless:0,buildingWeightingUnusedEjectors:.1,buildingWeightingCrateUseless:.01,buildingWeightingHorseshoeUseless:.1,buildingWeightingZenUseless:.01,buildingWeightingGateTurret:.01,buildingWeightingNeedStorage:1,buildingWeightingUselessHousing:1,buildingWeightingTemporal:.2,buildingWeightingSolar:.2,buildingWeightingOverlord:0},e)}function resetBuildingSettings(e){initBuildingState();let t={autoBuild:!1,autoPower:!1,buildingsIgnoreZeroRate:!1,buildingsLimitPowered:!0,buildingTowerSuppression:100,buildingConsumptionCheck:"perResource",buildingsTransportGem:!1,buildingsBestFreighter:!1,buildingsUseMultiClick:!1,buildingEnabledAll:!0,buildingStateAll:!0};for(let i=0;i<BuildingManager.priorityList.length;i++){let e=BuildingManager.priorityList[i],a=e._vueBinding;t["bat"+a]=!0,t["bld_p_"+a]=i,t["bld_m_"+a]=-1,t["bld_w_"+a]=100,e.isSwitchable()&&(t["bld_s_"+a]=!0),e.is.smart&&(t["bld_s2_"+a]=!0)}t["bld_s2_space-iridium_mine"]=!1,t["bld_s2_space-helium_mine"]=!1,["RedVrCenter","NeutronCitadel","PortalWarDroid","BadlandsPredatorDrone","PortalRepairDroid","SpireWaygate","TauRedContact","TauRedIntroduce","TauRedSubjugate","TauGasName1","TauGasName2","TauGasName3","TauGasName4","TauGasName5","TauGasName6","TauGasName7","TauGasName8","TauGas2Name1","TauGas2Name2","TauGas2Name3","TauGas2Name4","TauGas2Name5","TauGas2Name6","TauGas2Name7","TauGas2Name8"].forEach((e=>t["bat"+buildings[e]._vueBinding]=!1)),t["bld_m_"+buildings.ForgeHorseshoe._vueBinding]=20,t["bld_m_"+buildings.RedForgeHorseshoe._vueBinding]=20,t["bld_m_"+buildings.TauForgeHorseshoe._vueBinding]=20,t["bld_m_"+buildings.BeltEleriumShip._vueBinding]=15,t["bld_m_"+buildings.BeltIridiumShip._vueBinding]=15,applySettings(t,e),BuildingManager.sortByPriority()}function resetProjectSettings(e){ProjectManager.priorityList=Object.values(projects);let t={autoARPA:!1,arpaScaleWeighting:!0,arpaStep:5},i=0;const setProject=(e,a,r,n)=>{let o=projects[e].id;t["arpa_"+o]=a,t["arpa_p_"+o]=i++,t["arpa_m_"+o]=r,t["arpa_w_"+o]=n};setProject("LaunchFacility",!0,-1,100),setProject("SuperCollider",!0,-1,5),setProject("StockExchange",!0,-1,.5),setProject("Monument",!0,-1,1),setProject("Railway",!0,-1,.1),setProject("Nexus",!0,-1,1),setProject("RoidEject",!0,-1,1),setProject("ManaSyphon",!1,79,1),setProject("Depot",!0,-1,1),applySettings(t,e),ProjectManager.sortByPriority()}function resetMagicSettings(e){AlchemyManager.priorityList=Object.values(resources).filter((e=>AlchemyManager.transmuteTier(e)>0));let t={autoAlchemy:!1,autoPylon:!1,magicAlchemyManaUse:.5,productionRitualManaUse:.5,productionRitualSafe:!0};for(let i=0;i<AlchemyManager.priorityList.length;i++){let e=AlchemyManager.priorityList[i].id;t["res_alchemy_"+e]=!0,t["res_alchemy_w_"+e]=0}for(let i of Object.values(RitualManager.Productions))t["spell_w_"+i.id]=100;t.spell_w_hunting=10,t.spell_w_farmer=1,applySettings(t,e)}function resetProductionSettings(e){let t={autoQuarry:!1,autoMine:!1,autoExtractor:!1,autoGraphenePlant:!1,autoSmelter:!1,autoCraft:!1,autoFactory:!1,autoMiningDroid:!1,autoReplicator:!1,productionChrysotileWeight:2,productionAdamantiteWeight:1,productionExtWeight_common:1,productionExtWeight_uncommon:1,productionExtWeight_rare:1,productionFoundryWeighting:"demanded",productionCraftsmen:"nocraft",productionSmelting:"required",productionSmeltingIridium:.5,productionFactoryMinIngredients:.01,replicatorAssignGovernorTask:!0};const setFoundryProduct=(e,i,a,r,n)=>{let o=resources[e].id;t["craft"+o]=i,t["job_"+o]=a,t["foundry_w_"+o]=r,t["foundry_p_"+o]=n};setFoundryProduct("Plywood",!0,!0,1,0),setFoundryProduct("Brick",!0,!0,1,0),setFoundryProduct("Wrought_Iron",!0,!0,1,0),setFoundryProduct("Sheet_Metal",!0,!0,2,0),setFoundryProduct("Mythril",!0,!0,3,0),setFoundryProduct("Aerogel",!0,!0,3,0),setFoundryProduct("Nanoweave",!0,!0,10,0),setFoundryProduct("Scarletite",!0,!0,1,0),setFoundryProduct("Quantium",!0,!0,1,0),Object.values(SmelterManager.Fuels).forEach(((e,i)=>{t["smelter_fuel_p_"+e.id]=i}));const setFactoryProduct=(e,i,a,r)=>{let n=FactoryManager.Productions[e].resource.id;t["production_"+n]=i,t["production_w_"+n]=a,t["production_p_"+n]=r};setFactoryProduct("LuxuryGoods",!0,1,2),setFactoryProduct("Furs",!0,1,1),setFactoryProduct("Alloy",!0,1,3),setFactoryProduct("Polymer",!0,1,3),setFactoryProduct("NanoTube",!0,4,3),setFactoryProduct("Stanene",!0,4,3);const setDroidProduct=(e,i,a)=>{let r=DroidManager.Productions[e].resource.id;t["droid_w_"+r]=i,t["droid_pr_"+r]=a};setDroidProduct("Adamantite",15,1),setDroidProduct("Aluminium",1,1),setDroidProduct("Uranium",5,-1),setDroidProduct("Coal",5,-1),Object.values(ReplicatorManager.Productions).forEach((e=>(e=>{let i=ReplicatorManager.Productions[e].id;t["replicator_"+i]=!0,t["replicator_w_"+i]=1,t["replicator_p_"+i]=1})(e.id))),applySettings(t,e)}function resetTriggerSettings(e){!e&&settingsRaw.hasOwnProperty("autoTrigger")||(TriggerManager.priorityList=[],TriggerManager.AddTrigger("BuildingCount","space-moon_mission",1,"build","space-moon_base",1),TriggerManager.AddTrigger("BuildingCount","space-moon_base",1,"build","space-iridium_mine",1),TriggerManager.AddTrigger("BuildingCount","space-moon_base",1,"build","space-helium_mine",1),settingsRaw.triggers=JSON.parse(JSON.stringify(TriggerManager.priorityList))),applySettings({autoTrigger:!1},e)}function resetLoggingSettings(e){let t={hellTurnOffLogMessages:!0,logFilter:"",logEnabled:!0};Object.keys(GameLog.Types).forEach((e=>t["log_"+e]=!0)),t.log_mercenary=!1,t.log_multi_construction=!1,t.log_prestige=!1,t.log_prestige_format="Reset: {resetType}, Species: {species}, Duration: {timeStamp} days",applySettings(t,e)}function resetPlanetSettings(e){let t={};biomeList.forEach((e=>t["biome_w_"+e]=10*(planetBiomes.length-planetBiomes.indexOf(e)))),traitList.forEach((e=>t["trait_w_"+e]=10*(planetTraits.length-planetTraits.indexOf(e)))),extraList.forEach((e=>t["extra_w_"+e]=0)),t.extra_w_Achievement=1e3,applySettings(t,e)}function resetFleetSettings(e){let t={autoFleet:!1,fleetOuterCrew:30,fleetOuterShips:"custom",fleetExploreTau:!0,fleetMaxCover:!0,fleetEmbassyKnowledge:6e6,fleetAlienGiftKnowledge:65e5,fleetAlien2Knowledge:85e5,fleetAlien2Loses:"none",fleetChthonianLoses:"low",fleet_outer_class:"destroyer",fleet_outer_armor:"neutronium",fleet_outer_weapon:"plasma",fleet_outer_engine:"ion",fleet_outer_power:"fission",fleet_outer_sensor:"lidar",fleet_scout_class:"corvette",fleet_scout_armor:"neutronium",fleet_scout_weapon:"plasma",fleet_scout_engine:"tie",fleet_scout_power:"fusion",fleet_scout_sensor:"quantum",fleet_pr_gxy_stargate:0,fleet_pr_gxy_alien2:1,fleet_pr_gxy_alien1:2,fleet_pr_gxy_chthonian:3,fleet_pr_gxy_gateway:4,fleet_pr_gxy_gorddon:5};const setOuterRegion=(e,i,a,r)=>{t["fleet_outer_pr_"+e]=i,t["fleet_outer_def_"+e]=a,t["fleet_outer_sc_"+e]=r};setOuterRegion("spc_moon",1,.9,0),setOuterRegion("spc_red",3,.9,0),setOuterRegion("spc_gas",0,.9,0),setOuterRegion("spc_gas_moon",0,.9,0),setOuterRegion("spc_belt",1,.9,0),setOuterRegion("spc_titan",5,.9,1),setOuterRegion("spc_enceladus",3,.9,1),setOuterRegion("spc_triton",10,.95,2),setOuterRegion("spc_kuiper",5,.9,2),setOuterRegion("spc_eris",100,.01,1),applySettings(t,e)}function resetMechSettings(e){applySettings({autoMech:!1,mechScrap:"mixed",mechScrapEfficiency:1.5,mechCollectorValue:.5,mechBuild:"random",mechSize:"titan",mechSizeGravity:"auto",mechFillBay:!0,mechScouts:.05,mechScoutsRebuild:!1,mechMinSupply:1e3,mechMaxCollectors:.5,mechInfernalCollector:!0,mechSpecial:"prefered",mechSaveSupplyRatio:1,buildingMechsFirst:!0,mechBaysFirst:!0,mechWaygatePotential:.4},e)}function resetEjectorSettings(e){"magic"===game.global.race.universe?EjectManager.priorityList=Object.values(resources).filter((e=>EjectManager.isConsumable(e))).sort(((e,t)=>t.atomicMass-e.atomicMass)):(EjectManager.priorityList=Object.values(resources).filter((e=>EjectManager.isConsumable(e)&&e!==resources.Elerium&&e!==resources.Infernite)).sort(((e,t)=>t.atomicMass-e.atomicMass)),EjectManager.priorityList.unshift(resources.Infernite),EjectManager.priorityList.unshift(resources.Elerium)),SupplyManager.priorityList=Object.values(resources).filter((e=>SupplyManager.isConsumable(e))).sort(((e,t)=>SupplyManager.supplyIn(t.id)-SupplyManager.supplyIn(e.id))),NaniteManager.priorityList=Object.values(resources).filter((e=>NaniteManager.isConsumable(e))).sort(((e,t)=>t.atomicMass-e.atomicMass));let t={autoEject:!1,autoSupply:!1,autoNanite:!1,ejectMode:"cap",supplyMode:"mixed",naniteMode:"full",prestigeWhiteholeStabiliseMass:!0,prestigeWhiteholeStabiliseCooldown:120};for(let i of EjectManager.priorityList)t["res_eject"+i.id]=i.is.tradable??!1;for(let i of SupplyManager.priorityList)t["res_supply"+i.id]=i.is.tradable??!1;for(let i of NaniteManager.priorityList)t["res_nanite"+i.id]=i.is.tradable??!1;t["res_eject"+resources.Elerium.id]=!0,t["res_eject"+resources.Infernite.id]=!0,applySettings(t,e)}function updateStateFromSettings(){TriggerManager.priorityList=[],settingsRaw.triggers.forEach((e=>TriggerManager.AddTriggerFromSetting(e)))}function updateSettingsFromState(){settingsRaw.triggers=JSON.parse(JSON.stringify(TriggerManager.priorityList)),localStorage.setItem("settings",JSON.stringify(settingsRaw))}function applySettings(e,t){if(t){for(let t in e)delete settingsRaw.overrides[t];Object.assign(settingsRaw,e)}else for(let i in e)settingsRaw.hasOwnProperty(i)?("string"==typeof settingsRaw[i]&&"number"==typeof e[i]&&(settingsRaw[i]=Number(settingsRaw[i])),"number"==typeof settingsRaw[i]&&"string"==typeof e[i]&&(settingsRaw[i]=String(settingsRaw[i]))):settingsRaw[i]=e[i]}function updateStandAloneSettings(){let e={scriptName:"TMVictor",overrides:{},triggers:[]};settingsSections.forEach((t=>e[t+"SettingsCollapsed"]=!0)),applySettings(e,!1),settingsRaw.hasOwnProperty("masterScriptToggle")&&(settingsRaw.hasOwnProperty("autoPrestige")||(settingsRaw.autoPrestige=!0,["job_b1_farmer","job_b2_farmer","job_b3_farmer","job_b1_hunter","job_b2_hunter","job_b3_hunter"].forEach((e=>delete settingsRaw[e]))),settingsRaw.hasOwnProperty("buildingsLimitPowered")||(settingsRaw.buildingsLimitPowered=!1)),resetEvolutionSettings(!1),resetWarSettings(!1),resetHellSettings(!1),resetMechSettings(!1),resetFleetSettings(!1),resetGovernmentSettings(!1),resetBuildingSettings(!1),resetWeightingSettings(!1),resetMarketSettings(!1),resetResearchSettings(!1),resetProjectSettings(!1),resetJobSettings(!1),resetMagicSettings(!1),resetProductionSettings(!1),resetStorageSettings(!1),resetGeneralSettings(!1),resetPrestigeSettings(!1),resetEjectorSettings(!1),resetPlanetSettings(!1),resetLoggingSettings(!1),resetTriggerSettings(!1),resetMinorTraitSettings(!1),resetMutableTraitSettings(!1);for(let t in settingsRaw.overrides)for(let e=0;e<settingsRaw.overrides[t].length;e++){let i=settingsRaw.overrides[t][e];"string"==typeof settingsRaw[t]&&"number"==typeof i.ret&&(i.ret=String(i.ret)),"number"==typeof settingsRaw[t]&&"string"==typeof i.ret&&(i.ret=Number(i.ret))}settingsRaw.triggers.forEach((e=>{"unlocked"!==e.requirementType&&"researched"!==e.requirementType||!techIds["tech-"+e.requirementId]||(e.requirementId="tech-"+e.requirementId),"research"===e.actionType&&techIds["tech-"+e.actionId]&&(e.actionId="tech-"+e.actionId),"unlocked"===e.requirementType&&(e.requirementType="ResearchUnlocked",e.requirementCount=1),"researched"===e.requirementType&&(e.requirementType="ResearchComplete",e.requirementCount=1),"built"===e.requirementType&&(e.requirementType="BuildingCount")})),settingsRaw.hasOwnProperty("productionPrioritizeDemanded")&&(settingsRaw.productionFoundryWeighting=settingsRaw.productionPrioritizeDemanded?"demanded":"none"),settingsRaw.challenge_plasmid=settingsRaw.challenge_mastery||settingsRaw.challenge_plasmid,settingsRaw.hasOwnProperty("res_trade_buy_mtr_Food")&&MarketManager.priorityList.forEach((e=>settingsRaw["res_trade_buy_"+e.id]=!0)),settingsRaw.hasOwnProperty("arpa")&&Object.entries(settingsRaw.arpa).forEach((([e,t])=>settingsRaw["arpa_"+e]=t)),["buildingWeightingTriggerConflict","researchAlienGift","arpaBuildIfStorageFullCraftableMin","arpaBuildIfStorageFullResourceMaxPercent","arpaBuildIfStorageFull","productionMoneyIfOnly","autoAchievements","autoChallenge","autoMAD","autoSpace","autoSeeder","foreignSpyManage","foreignHireMercCostLowerThan","userResearchUnification","btl_Ambush","btl_max_Ambush","btl_Raid","btl_max_Raid","btl_Pillage","btl_max_Pillage","btl_Assault","btl_max_Assault","btl_Siege","btl_max_Siege","smelter_fuel_Oil","smelter_fuel_Coal","smelter_fuel_Lumber","planetSettingsCollapser","buildingManageSpire","hellHandleAttractors","researchFilter","challenge_mastery","hellCountGems","productionPrioritizeDemanded","fleetChthonianPower","productionWaitMana","arpa","autoLogging"].forEach((e=>delete settingsRaw[e])),["foreignAttack","foreignOccupy","foreignSpy","foreignSpyMax","foreignSpyOp"].forEach((e=>[0,1,2].forEach((t=>delete settingsRaw[e+t])))),["res_storage_w_","res_trade_buy_mtr_","res_trade_sell_mps_"].forEach((e=>Object.values(resources).forEach((t=>delete settingsRaw[e+t.id])))),Object.values(projects).forEach((e=>delete settingsRaw["arpa_ignore_money_"+e.id])),Object.values(buildings).filter((e=>!e.isSwitchable())).forEach((e=>delete settingsRaw["bld_s_"+e._vueBinding])),migrateSetting("prestigeWhiteholeEjectEnabled","autoEject",(e=>e)),migrateSetting("mechSaveSupply","mechSaveSupplyRatio",(e=>e?1:0)),migrateSetting("foreignProtectSoldiers","foreignProtect",(e=>e?"always":"never")),migrateSetting("prestigeWhiteholeEjectExcess","ejectMode",(e=>e?"mixed":"cap")),migrateSetting("hellHandlePatrolCount","autoHell",(e=>e),!0),migrateSetting("unificationRequest","prioritizeUnify",(e=>e?"savereq":"ignore")),migrateSetting("queueRequest","prioritizeQueue",(e=>e?"savereq":"ignore")),migrateSetting("triggerRequest","prioritizeTriggers",(e=>e?"savereq":"ignore")),migrateSetting("govManage","autoGovernment",(e=>e)),migrateSetting("storagePrioritizedOnly","storageAssignPart",(e=>!e)),migrateSetting("fleetScanEris","fleet_outer_pr_spc_eris",(e=>e?100:0)),migrateSetting("jobDisableCraftsmans","productionCraftsmen",(e=>e?"nocraft":"always")),migrateSetting("activeTriggerUI","activeTargetsUI",(e=>e)),migrateSetting("autoAssembleGene","autoGenetics",(e=>e)),settingsRaw.hasOwnProperty("genesAssembleGeneAlways")&&(settingsRaw.overrides.genesAssembleGeneAlways&&(settingsRaw.overrides.geneticsAssemble=settingsRaw.overrides.genesAssembleGeneAlways.concat(settingsRaw.overrides.geneticsAssemble??[])),settingsRaw.genesAssembleGeneAlways||(settingsRaw.overrides.geneticsAssemble=settingsRaw.overrides.geneticsAssemble??[],settingsRaw.overrides.geneticsAssemble.push({type1:"ResearchComplete",arg1:"tech-dna_sequencer",type2:"Boolean",arg2:!0,cmp:"==",ret:"none"}))),settingsRaw.hasOwnProperty("prestigeWhiteholeEjectAllCount")&&settingsRaw.prestigeWhiteholeEjectAllCount<=20&&(settingsRaw.overrides.ejectMode=settingsRaw.overrides.ejectMode??[],settingsRaw.overrides.ejectMode.push({type1:"BuildingCount",arg1:"interstellar-mass_ejector",type2:"Number",arg2:settingsRaw.prestigeWhiteholeEjectAllCount,cmp:">=",ret:"all"})),settingsRaw.hasOwnProperty("prestigeAscensionSkipCustom")&&!settings.prestigeAscensionSkipCustom&&(settingsRaw.overrides.autoPrestige=settingsRaw.overrides.autoPrestige??[],settingsRaw.overrides.autoPrestige.push({type1:"ResetType",arg1:"ascension",type2:"Boolean",arg2:!0,cmp:"==",ret:!1})),Object.values(crafter).forEach((e=>{delete settingsRaw["job_p_"+e._originalId],delete settingsRaw["job_b1_"+e._originalId],delete settingsRaw["job_b2_"+e._originalId],delete settingsRaw["job_b3_"+e._originalId]})),["res_containers_m_","res_crates_m_"].forEach((e=>Object.values(resources).forEach((t=>{delete settingsRaw[e+t.id],delete settingsRaw.overrides[e+t.id]})))),["prestigeWhiteholeEjectAllCount","prestigeWhiteholeDecayRate","genesAssembleGeneAlways","buildingsConflictQueue","buildingsConflictRQueue","buildingsConflictPQueue","fleet_outer_pr_spc_hell","fleet_outer_pr_spc_dwarf","prestigeEnabledBarracks","bld_s2_city-garrison","prestigeAscensionSkipCustom","prestigeBioseedGECK","tickTimeout","minorTraitSettingsCollapsed","fleetOuterMinSyndicate","smelter_fuel_p_Star","replicatorResource"].forEach((e=>{delete settingsRaw[e],delete settingsRaw.overrides[e]}))}function migrateSetting(e,t,i,a){settingsRaw.hasOwnProperty(e)&&(a||(settingsRaw[t]=i(settingsRaw[e])),delete settingsRaw[e]),settingsRaw.overrides.hasOwnProperty(e)&&(settingsRaw.overrides[e].forEach((e=>e.ret=i(e.ret))),settingsRaw.overrides[t]=(settingsRaw.overrides[t]??[]).concat(settingsRaw.overrides[e]),delete settingsRaw.overrides[e])}function getStarLevel(e){let t=1;return e.challenge_plasmid&&t++,e.challenge_trade&&t++,e.challenge_craft&&t++,e.challenge_crispr&&t++,t}function getAchievementStar(e,t){return game.global.stats.achieve[e]?.[poly.universeAffix(t)]??0}function isAchievementUnlocked(e,t,i){return getAchievementStar(e,i)>=t}function loadQueuedSettings(){if(settings.evolutionQueueEnabled&&settingsRaw.evolutionQueue.length>0){state.evolutionAttempts++;let e=settingsRaw.evolutionQueue.shift();for(let[t,i]of Object.entries(e))typeof settingsRaw[t]==typeof i?settingsRaw[t]=i:GameLog.logDanger("special",`Type mismatch during loading queued settings: settingsRaw.${t} type: ${typeof settingsRaw[t]}, value: ${settingsRaw[t]}; queuedEvolution.${t} type: ${typeof i}, value: ${i};`,["events","major_events"]);updateOverrides(),settings.evolutionQueueRepeat&&settingsRaw.evolutionQueue.push(e),updateStandAloneSettings(),updateStateFromSettings(),updateSettingsFromState(),settings.showSettings&&(removeScriptSettings(),buildScriptSettings())}}function autoEvolution(){if("protoplasm"!==game.global.race.species)return;if(autoUniverseSelection(),autoPlanetSelection(),"bigbang"===game.global.race.universe||game.global.race.seeded&&!game.global.race.chose)return;if(null===state.evolutionTarget){if(loadQueuedSettings(),"auto"===settings.userEvolutionTarget){let e=Object.values(races).sort(((e,t)=>t.getWeighting()-e.getWeighting()));if(game.global.stats.achieve.mass_extinction)state.evolutionTarget=e[0];else{let t=Object.values(races).map((e=>e.genus)).filter(((e,t,i)=>i.indexOf(e)===t)).map((e=>[e,Object.values(races).filter((t=>t.genus===e)).map((e=>e.getWeighting())).reduce(((e,t)=>e+t))])).sort(((e,t)=>t[1]-e[1]))[0][0];state.evolutionTarget=e.find((e=>e.genus===t))}}if("auto"!==settings.userEvolutionTarget){let e=races[settings.userEvolutionTarget];e&&e.getHabitability()>0&&(state.evolutionTarget=e)}if(null===state.evolutionTarget&&settings.evolutionQueueEnabled&&settingsRaw.evolutionQueue.length>0&&(!settings.evolutionQueueRepeat||state.evolutionAttempts<settingsRaw.evolutionQueue.length))return;null===state.evolutionTarget&&(state.evolutionTarget=races.custom.getHabitability()>0?races.custom:races.entish),GameLog.logSuccess("special",`Attempting evolution of ${state.evolutionTarget.name}.`,["progress"])}for(let c=0;c<challenges.length;c++)if(settings["challenge_"+challenges[c][0].id])for(let e=0;e<challenges[c].length;e++){let{id:t,trait:i}=challenges[c][e];if(1!==game.global.race[i]&&evolutions[t].click()&&("junker"===t||"sludge"===t))return}let e=0,t=0;for(let c=0;c<state.evolutionTarget.evolutionTree.length;c++){let i=state.evolutionTarget.evolutionTree[c],a=poly.adjustCosts(i.definition);e=Math.max(e,Number(a.RNA?.()??0)),t=Math.max(t,Number(a.DNA?.()??0))}let i=Math.min(t-resources.DNA.currentQuantity,resources.DNA.maxQuantity-resources.DNA.currentQuantity,resources.RNA.maxQuantity/2),a=Math.min(2*i-resources.RNA.currentQuantity,resources.RNA.maxQuantity-resources.RNA.currentQuantity),r=resources.RNA.currentQuantity+a-2*i,n=Math.min(e-r,resources.RNA.maxQuantity-r),o=game.actions.evolution.rna,l=game.actions.evolution.dna;for(let c=0;c<a;c++)o.action();for(let c=0;c<i;c++)l.action();for(let c=0;c<n;c++)o.action();resources.RNA.currentQuantity=r+n,resources.DNA.currentQuantity=resources.DNA.currentQuantity+i;for(let c=0;c<state.evolutionTarget.evolutionTree.length;c++){let e=state.evolutionTarget.evolutionTree[c];if(e.isUnlocked()){let t=challenges.flat().find((t=>t.id===e.id));if(t&&game.global.race[t.trait])continue;if(e.click())return;break}}(evolutions.mitochondria.count<1||resources.RNA.maxQuantity<e||resources.DNA.maxQuantity<t)&&evolutions.mitochondria.click(),(evolutions.eukaryotic_cell.count<1||resources.DNA.maxQuantity<t)&&evolutions.eukaryotic_cell.click(),resources.RNA.maxQuantity<e&&evolutions.membrane.click(),evolutions.nucleus.count<10&&evolutions.nucleus.click(),evolutions.organelles.count<10&&evolutions.organelles.click();const u=Object.values(imitations).find((e=>e.id===`s-${settings.imitateRace}`));game.global.race.evoFinalMenu&&(u?u.click()||GameLog.logDanger("special",`${settings.imitateRace} not avaialble for imitation. Please select an available race.`,["progress","achievements"]):GameLog.logDanger("special","No race selected for imitation. Please select an available race to continue.",["progress","achievements"]))}function autoUniverseSelection(){if(!game.global.race.bigbang)return;if("bigbang"!==game.global.race.universe)return;if("none"===settings.userUniverseTargetName)return;let e=document.getElementById(`uni-${settings.userUniverseTargetName}`);null!==e&&e.children[0].click()}function generatePlanets(){let e=game.global.race.seed,seededRandom=(t=0,i=1)=>(e=(9301*e+49297)%233280,t+e/233280*(i-t)),t=[];if(game.global.stats.achieve.lamentis?.l>=4)for(let c of universes){let e=poly.universeAffix(c);game.global.custom.planet[e]?.s&&t.push(`${e}:s`)}let i=["grassland","oceanic","forest","desert","volcanic","tundra","evil"===game.global.race.universe?"eden":"hellscape"],a=["savanna","swamp",["taiga","swamp"],"ashland","ashland","taiga"],r=["toxic","mellow","rage","stormy","ozone","magnetic","trashed","elliptical","flare","dense","unstable","permafrost","retrograde"],n=["Copper","Iron","Aluminium","Coal","Oil","Titanium","Uranium"];game.global.stats.achieve.whitehole&&n.push("Iridium");let o=[],l=!1,u=Math.max(1,game.global.race.probes);for(let c=0;c<u;c++){let e={biome:"grassland",traits:[],orbit:365,geology:{}};if(t.length>0&&0===Math.floor(seededRandom(0,10))){let i=t[Math.floor(seededRandom(0,t.length))];t.splice(t.indexOf(i),1);let a=i.split(":"),r=game.global.custom.planet[a[0]][a[1]];e.biome=r.biome,e.traits=r.traitlist,e.orbit=r.orbit,e.geology=r.geology}else{let t=!l&&game.global.stats.portals>=1?7:6,o=0===Math.floor(seededRandom(0,3)),u=Math.floor(seededRandom(0,t));if(o&&isAchievementUnlocked("biome_"+i[u],1)&&u<a.length){let t=a[u];e.biome=t instanceof Array?t[Math.floor(seededRandom(0,t.length))]:t}else e.biome=i[u];e.traits=[];for(let i=0;i<2;i++){let t=Math.floor(seededRandom(0,18+9*i));"permafrost"===r[t]&&["volcanic","ashland","hellscape"].includes(e.biome)||t<r.length&&!e.traits.includes(r[t])&&e.traits.push(r[t])}e.traits.sort(),0===e.traits.length&&e.traits.push("none");let c=Math.floor(seededRandom(0,3)),g="eden"===e.biome?35:30;game.global.stats.achieve.whitehole&&(c+=game.global.stats.achieve.whitehole.l,g+=5*game.global.stats.achieve.whitehole.l);for(let i=0;i<c;i++){let t=Math.floor(seededRandom(0,10));n[t]&&(e.geology[n[t]]=(Math.floor(seededRandom(0,g))-10)/100)}"hellscape"===e.biome?(e.orbit=666,l=!0):"eden"===e.biome?(e.orbit=777,l=!0):e.orbit=Math.floor(seededRandom(200,e.traits.includes("elliptical")?800:600))}let u=e.biome+Math.floor(seededRandom(0,1e4));e.id=u.charAt(0).toUpperCase()+u.slice(1),o.push(e)}return o}function autoPlanetSelection(){if("bigbang"===game.global.race.universe)return;if(!game.global.race.seeded||game.global.race.chose)return;if("none"===settings.userPlanetTargetName)return;let e=generatePlanets(),t=getStarLevel(settings);for(let a=0;a<e.length;a++){let i=e[a];i.achieve=0,isAchievementUnlocked("biome_"+i.biome,t)||i.achieve++;for(let e of i.traits)"none"===e||isAchievementUnlocked("atmo_"+e,t)||i.achieve++;if(planetBiomeGenus[i.biome]){for(let e in races)races[e].genus!==planetBiomeGenus[i.biome]||isAchievementUnlocked("extinct_"+e,t)||i.achieve++;isAchievementUnlocked("genus_"+planetBiomeGenus[i.biome],t)||i.achieve++}isAchievementUnlocked("madagascar_tree",t)||"oceanic"!==i.biome||"sharkin"===game.global.race.gods||i.achieve++}for(let a=0;a<e.length;a++){let t=e[a];t.weighting=0,t.weighting+=settings["biome_w_"+t.biome];for(let e of t.traits)t.weighting+=settings["trait_w_"+e];t.weighting+=t.achieve*settings.extra_w_Achievement,t.weighting+=t.orbit*settings.extra_w_Orbit;let i=game.global.stats.achieve.miners_dream?game.global.stats.achieve.miners_dream.l>=4?2*game.global.stats.achieve.miners_dream.l-3:game.global.stats.achieve.miners_dream.l:0;game.global.stats.achieve.lamentis?.l>=0&&i++;for(let e in t.geology)0!==t.geology[e]&&(i-- >0?t.weighting+=t.geology[e]/.01*settings["extra_w_"+e]:t.weighting+=(t.geology[e]>0?1:-1)*settings["extra_w_"+e])}"weighting"===settings.userPlanetTargetName&&e.sort(((e,t)=>t.weighting-e.weighting)),"habitable"===settings.userPlanetTargetName&&e.sort(((e,t)=>planetBiomes.indexOf(e.biome)+planetTraits.indexOf(e.trait)-(planetBiomes.indexOf(t.biome)+planetTraits.indexOf(t.trait)))),"achieve"===settings.userPlanetTargetName&&e.sort(((e,t)=>e.achieve!==t.achieve?t.achieve-e.achieve:planetBiomes.indexOf(e.biome)+planetTraits.indexOf(e.trait)-(planetBiomes.indexOf(t.biome)+planetTraits.indexOf(t.trait))));let i=document.getElementById(e[0].id);i&&(i.dispatchEvent(new MouseEvent("mouseover",{})),i.children[0].click())}function autoCraft(){if(resources.Population.isUnlocked()&&!game.global.race.no_craft)e:for(let e=0;e<foundryList.length;e++){let t=foundryList[e];if(!t.isUnlocked()||!t.autoCraftEnabled)continue;let i=Number.MAX_SAFE_INTEGER;for(let e in t.cost){let a=resources[e],r=t.cost[e];if(i=Math.min(i,Math.ceil((a.currentQuantity-a.maxQuantity*t.craftPreserve)/r)),t.isDemanded()){let e=a.currentQuantity<a.maxQuantity*(t.craftPreserve+.05)?a.currentQuantity:a.spareQuantity;i=Math.min(i,e/r)}else{if(a.isDemanded()||!a.isCapped()&&a.usefulRatio<t.usefulRatio)continue e;if(t.currentQuantity<t.storageRequired)i=Math.min(i,a.spareQuantity/r);else{if(!(a.currentQuantity>=a.storageRequired||a.isCapped()))continue e;i=Math.min(i,Math.ceil(a.rateOfChange/ticksPerSecond()/r))}}}if(i=Math.floor(i),i>=1){t.tryCraftX(i);for(let e in t.cost)resources[e].currentQuantity-=t.cost[e]*i}}}function autoGovernment(){if(GovernmentManager.isEnabled()&&("none"!==settings.govSpace&&haveTech("q_factory")&&GovernmentManager.Types[settings.govSpace].isUnlocked()?GovernmentManager.setGovernment(settings.govSpace):"none"!==settings.govFinal&&GovernmentManager.Types[settings.govFinal].isUnlocked()?GovernmentManager.setGovernment(settings.govFinal):"none"!==settings.govInterim&&GovernmentManager.Types[settings.govInterim].isUnlocked()&&GovernmentManager.setGovernment(settings.govInterim)),haveTech("governor")&&"none"!==settings.govGovernor&&"none"===getGovernor()){let e=game.global.race.governor?.candidates??[];for(let t=0;t<e.length;t++)if(e[t].bg===settings.govGovernor){getVueById("candidates")?.appoint(t);break}}}function autoMerc(){let e=WarManager;if(!e._garrisonVue||!e.isMercenaryUnlocked()||e.maxCityGarrison<=0)return;let t=e.mercenaryCost,i=0,a=e.maxSoldiers-settings.foreignHireMercDeadSoldiers,r=state.moneyMedian*settings.foreignHireMercCostLowerThanIncome,n=Math.max(resources.Money.maxQuantity*settings.foreignHireMercMoneyStoragePercent/100,Math.min(resources.Money.maxQuantity-r,settings.storageAssignExtra?resources.Money.storageRequired/1.03:resources.Money.storageRequired));for("Reset"===state.goal&&(a=e.maxSoldiers,n=0,r=Number.MAX_SAFE_INTEGER);e.currentSoldiers<a&&resources.Money.currentQuantity>=t&&(resources.Money.spareQuantity-t>n||t<r)&&e.hireMercenary();)i++,t=e.mercenaryCost;1===i?GameLog.logSuccess("mercenary","Hired a mercenary to join the garrison.",["combat"]):i>1&&GameLog.logSuccess("mercenary",`Hired ${i} mercenaries to join the garrison.`,["combat"])}function autoSpy(){let e=SpyManager;if(e._foreignVue&&!haveTask("spyop")&&haveTech("spy")&&(haveTech("spy",2)||!(resources.Money.storageRatio<.9))){if(settings.foreignTrainSpy)for(let t of e.foreignActive){if(e._foreignVue.spy_disabled(t.id)||t.gov.occ||t.gov.anx||t.gov.buy)continue;let i=settings.foreignSpyMax>=0?settings.foreignSpyMax:Number.MAX_SAFE_INTEGER;i<1&&"Occupy"!==t.policy&&"Ignore"!==t.policy&&(i=1),i<3&&"Purchase"===t.policy&&resources.Money.maxQuantity>=poly.govPrice(t.id)&&(i=3),t.gov.spy>=i||e.purchaseMoney>0&&"Purchase"!==t.policy&&t.gov.spy>0||(GameLog.logSuccess("spying",`Training a spy to send against ${getGovName(t.id)}.`,["spy"]),e._foreignVue.spy(t.id))}if(haveTech("spy",2))for(let t of e.foreignActive){if(t.gov.spy<1||0!==t.gov.sab||"None"===t.policy)continue;let i=null;i="Betrayal"===t.policy?t.gov.mil<=75||t.gov.hstl<=0?e.Types.Sabotage:e.Types.Influence:"Occupy"===t.policy?e.Types.Sabotage:e.Types[t.policy],i&&(e.purchaseMoney>0&&e.purchaseForeigngs.includes(t.id)&&i===e.Types.Purchase&&t.gov.spy<3&&!game.global.race.elusive||(t.gov.anx&&"Annex"!==t.policy||t.gov.buy&&"Purchase"!==t.policy||t.gov.occ&&"Occupy"!==t.policy?(WarManager.release(t.id),t.released=!0):t.gov.anx||t.gov.buy||t.gov.occ||e.performEspionage(t.id,i.id,t!==e.foreignTarget)))}}}function autoBattle(){let e=SpyManager,t=WarManager;if(!t._garrisonVue||!e._foreignVue||t.maxCityGarrison<=0||"Reset"===state.goal||settings.foreignPacifist)return;let i=settings.foreignAttackHealthySoldiersPercent/100,a="auto"===settings.foreignProtect&&t.wounded<=0?0:settings.foreignAttackLivingSoldiersPercent/100;if(t.wounded>(1-i)*t.maxCityGarrison||t.currentCityGarrison<a*t.maxCityGarrison)return;let r=settings.foreignMinAdvantage,n=settings.foreignMaxAdvantage,o="always"===settings.foreignProtect;if("auto"===settings.foreignProtect){let e=game.global.civic.garrison;o=(100*t.deadSoldiers-e.progress)/(4*e.rate)>t.wounded/getHealingRate()*5}o&&(r=Math.max(r,80),n=Math.max(n,r));let l=new Array(5).fill(t.availableGarrison),u=t.maxCityGarrison;if(o){let e=(traitVal("scales",0)+(game.global.tech.armor??0))/traitVal("armored",0,"-")-traitVal("frail",0);l=[5,10,25,50,999].map(((t,i)=>e>=t*traitVal("high_pop",0,1)?Number.MAX_SAFE_INTEGER:(5-i)*(e+(game.global.city.ptrait.includes("rage")?1:2))-1)).map((e=>Math.min(e,t.availableGarrison))),u=0}l[4]=Math.min(l[4],settings.foreignMaxSiegeBattalion);let c=0,g=e.foreignTarget;for(let y of e.foreignActive)if("Occupy"===y.policy&&!y.gov.occ){let e=t.getSoldiersForAdvantage(settings.foreignMinAdvantage,4,y.id);if(e<=(settings.autoHell&&t._hellVue?t.maxSoldiers-t.hellReservedSoldiers:t.maxCityGarrison)){if(g=y,u=Math.max(e,Math.min(t.availableGarrison,t.getSoldiersForAdvantage(settings.foreignMaxAdvantage,4,y.id)-1)),c=4,t.availableGarrison<u/2+getOccCosts()&&t.availableGarrison<t.maxCityGarrison)return;break}}if(!g)return;if(4!==c){for(let e=!settings.foreignUnification||settings.foreignOccupyLast?4:3;e>=0;e--){let i=t.getSoldiersForAdvantage(r,e,g.id);if(i<=l[e]){u=Math.max(i,Math.min(l[e],t.availableGarrison,t.getSoldiersForAdvantage(n,e,g.id)-1)),c=e;break}}if(!u||u>t.availableGarrison)return}if(!g.released&&(g.gov.anx||g.gov.buy||g.gov.occ))t.release(g.id);else if(4===c&&game.global.settings.showPortal){let e=getOccCosts()-(t.currentCityGarrison-u);if(e>0){if(!settings.autoHell||!t._hellVue||t.hellSoldiers-t.hellReservedSoldiers<e)return;let i=Math.ceil((e-t.hellGarrison)/t.hellPatrolSize);i>0&&t.removeHellPatrol(i),t.removeHellGarrison(e)}}t.setTactic(c);let d=u-t.raid;d>0&&t.addBattalion(d),d<0&&t.removeBattalion(-1*d);let p=t.getCampaignTitle(c),h=game.armyRating(t.raid,"army"),b=t.getAdvantage(h,c,g.id).toFixed(1);GameLog.logSuccess("attack",`Launching ${p} campaign against ${getGovName(g.id)} with ${g.gov.spy<1?"~":""}${b}% advantage.`,["combat"]),t.launchCampaign(g.id)}function autoHell(){let e=WarManager;if(!e._garrisonVue||!e._hellVue)return;let t=0,i=0,a=0;if(e.maxSoldiers>settings.hellHomeGarrison+settings.hellMinSoldiers&&(e.hellSoldiers>settings.hellMinSoldiers||e.currentSoldiers>=e.maxSoldiers*settings.hellMinSoldiersPercent/100)){t=Math.min(e.currentSoldiers,e.maxSoldiers)-settings.hellHomeGarrison;let r=t-e.hellReservedSoldiers,n=settings.hellLowWallsMulti*(1-game.global.portal.fortress.walls/100),o=35*game.global.portal.fortress.threat/settings.hellTargetFortressDamage,l=buildings.PortalTurret.stateOnCount*(game.global.tech.turret?game.global.tech.turret>=2?70:50:35),u=e.getSoldiersForAttackRating(Math.max(0,n*o-l));if(r<u?u=0:r<2*u&&(u=Math.floor(r/2)),settings.hellHandlePatrolSize){let t=game.global.portal.fortress.threat*settings.hellPatrolThreatPercent/100;if(game.global.portal.war_drone&&(t-=settings.hellPatrolDroneMod*game.global.portal.war_drone.on*(game.global.tech.portal>=7?1.5:1)),game.global.portal.war_droid&&(t-=settings.hellPatrolDroidMod*game.global.portal.war_droid.on*(game.global.tech.hdroid?2:1)),game.global.city.boot_camp&&(t-=settings.hellPatrolBootcampMod*game.global.city.boot_camp.count),t=Math.max(t,settings.hellPatrolMinRating),settings.hellBolsterPatrolRating>0&&settings.hellBolsterPatrolPercentTop>0){const i=e.currentCityGarrison/e.maxCityGarrison;i<=settings.hellBolsterPatrolPercentTop/100&&(i<=settings.hellBolsterPatrolPercentBottom/100?t+=settings.hellBolsterPatrolRating:settings.hellBolsterPatrolPercentBottom<settings.hellBolsterPatrolPercentTop&&(t+=settings.hellBolsterPatrolRating*(settings.hellBolsterPatrolPercentTop/100-i)/(settings.hellBolsterPatrolPercentTop-settings.hellBolsterPatrolPercentBottom)*100))}a=e.getSoldiersForAttackRating(t),a=Math.min(a,r-u)}else a=e.hellPatrolSize;i=Math.max(1,Math.floor((r-u)/a)),settings.hellHandlePatrolSize&&1===i&&r-u>=1.5*a&&(a=Math.floor((r-u)/3),i=Math.floor((r-u)/a))}else if(e.hellAssigned>0)return e.removeHellPatrolSize(e.hellPatrolSize),e.removeHellPatrol(e.hellPatrols),void e.removeHellGarrison(e.hellSoldiers);settings.hellHandlePatrolSize&&e.hellPatrolSize>a&&e.removeHellPatrolSize(e.hellPatrolSize-a),e.hellPatrols>i&&e.removeHellPatrol(e.hellPatrols-i),e.hellSoldiers>t&&e.removeHellGarrison(e.hellSoldiers-t),e.hellSoldiers<t&&e.addHellGarrison(t-e.hellSoldiers),settings.hellHandlePatrolSize&&e.hellPatrolSize<a&&e.addHellPatrolSize(a-e.hellPatrolSize),e.hellPatrols<i&&e.addHellPatrol(i-e.hellPatrols)}function autoJobs(e){let t=JobManager.managedPriorityList();if(0===t.length)return;let i=game.global.race.artifical?-1:Math.max(t.indexOf(jobs.Hunter),t.indexOf(jobs.Farmer)),a=isDemonRace()&&isLumberRace()?i:t.indexOf(jobs.Lumberjack),r=t.indexOf(jobs.QuarryWorker),n=t.indexOf(jobs.CrystalMiner),o=t.indexOf(jobs.Scavenger),l=t.findIndex((e=>e.isDefault())),u=t.reduce(((e,t)=>e+t.workers),0),c=settings.jobManageServants?JobManager.servantsMax():0,g=settings.jobManageServants?JobManager.skilledServantsMax():0,d=JobManager.craftingMax(),p=traitVal("high_pop",0,1),h=game.global.civic.crew.max-game.global.civic.crew.workers,b=h>0?h+1:0,y=new Array(t.length).fill(0),f=new Array(t.length).fill(0);if(e?(d=u,u=0,c=0):settings.autoCraftsmen&&u>=d*(-1===i?1:2)?u-=d:d=0,settings.autoCraftsmen){let e=(game.global.genes.crafty?2:1)*traitVal("resourceful",0,"-")/140,i=d+g*p,a="always"===settings.productionCraftsmen||"nocraft"===settings.productionCraftsmen&&game.global.race.no_craft,r=[];for(let o of JobManager.craftingJobs){let n=o.resource;if(!o.isManaged()||!n.autoCraftEnabled)continue;let l=o===crafter.Scarletite?buildings.RuinsHellForge:o===crafter.Quantium?haveTech("isolation")?buildings.TauDiseaseLab:buildings.EnceladusZeroGLab:null;if(!l&&!a){if(!g)break;u+=d,i-=d,d=0}let c=i;for(let t in n.cost){let i=resources[t];if(!n.isDemanded()&&(!settings.useDemanded&&i.isDemanded()||i.storageRatio<n.craftPreserve)){c=0;break}c=Math.min(c,(n.rateOfChange+i.currentQuantity)/(n.cost[t]*e)/2*ticksPerSecond())}if(l){if("servants"===settings.productionCraftsmen)continue;let e=l.stateOnCount*traitVal("high_pop",0,1);c<e?y[t.indexOf(o)]=0:(y[t.indexOf(o)]=e,d-=e,i-=e)}else c>=i&&r.push(o)}let n=r.filter((e=>e.resource.isDemanded()));if(n.length>0)r=n;else if("demanded"===settings.productionFoundryWeighting){let e=r.filter((e=>e.resource.currentQuantity<e.resource.storageRequired));e.length>0&&(r=e)}if("buildings"===settings.productionFoundryWeighting&&state.unlockedBuildings.length>0){let e=Object.fromEntries(r.map((e=>[e.id,(state.unlockedBuildings.find((t=>t.cost[e.resource.id]>e.resource.currentQuantity))?.weighting??0)*e.resource.craftWeighting])));r.sort(((t,i)=>t.resource.currentQuantity/e[t.id]-i.resource.currentQuantity/e[i.id]))}else r.sort(((e,t)=>e.resource.currentQuantity/e.resource.craftWeighting-t.resource.currentQuantity/t.resource.craftWeighting));for(let o of JobManager.craftingJobs){let e=t.indexOf(o);-1===e||o===crafter.Scarletite&&resources.Scarletite.autoCraftEnabled||o===crafter.Quantium&&resources.Quantium.autoCraftEnabled||(o===r[0]?(y[e]=d,f[e]=g):(y[e]=0,f[e]=0))}r[0]===undefined&&(u+=d)}let S=settings.jobDisableMiners&&buildings.GatewayStarbase.count>0,w=S&&!(game.global.race.sappy&&game.global.race.smoldering),v=game.global.race.hooved&&resources.Horseshoe.usefulRatio<1,M=game.global.race.artifical&&!game.global.race.deconstructor&&resources.Population.storageRatio<1,T=t.indexOf(jobs.Miner);(v||M)&&!w&&u>1&&-1!==T&&jobs.Miner.isSmartEnabled&&(y[T]=1,u--);let x={},k=0;state.maxSpaceMiners=0;for(let B=0;B<3;B++){for(let e=0;e<t.length;e++){let i=t[e];if(2===B&&i.is.split)continue;if(i instanceof CraftingJob)continue;u+=y[e];let a=y[e],r=u;y[e]=0,i.is.serve&&(a+=f[e]*p,c+=f[e],r+=c*p,f[e]=0);let n=!(i!==jobs.Hunter||!isDemonRace()||!isLumberRace()),o=Math.min(r,Math.max(a,i.breakpointEmployees(B)));if(i.isSmartEnabled){if(i===jobs.Farmer||i===jobs.Hunter){if(x[e]===undefined){if(game.global.race.artifical||game.global.race.unfathomable)x[e]=0;else{let t=resources.Food.rateOfChange,a=.2*resources.Food.maxQuantity,r=.6*resources.Food.maxQuantity;if(game.global.race.ravenous&&(a=1.5*resources.Population.currentQuantity,r=3*resources.Population.currentQuantity,t+=Math.max(resources.Food.currentQuantity/traitVal("ravenous",1),0)),game.global.race.carnivore&&(a=resources.Population.currentQuantity,r=2*resources.Population.currentQuantity,resources.Food.currentQuantity>10&&(t+=(resources.Food.currentQuantity-10)*traitVal("carnivore",0,"=")*.9**buildings.Smokehouse.count)),resources.Population.currentQuantity>state.lastPopulationCount){let a=resources.Population.currentQuantity-state.lastPopulationCount,r=i.count-state.lastFarmerCount;x[e]=a===r&&t>0?i.count-a:i.count}else if(resources.Food.isCapped())x[e]=0;else if(resources.Food.currentQuantity+t/ticksPerSecond()<a)if(0===i.count)x[e]=1;else{let a=resources.Food.getProduction("job_"+i.id)/i.count,r=Math.ceil(t/-a)||0;x[e]=Math.max(1,i.count+r)}else resources.Food.currentQuantity>r&&t>0?x[e]=i.count-1:x[e]=i.count;k=x[e]}game.global.race.unfathomable?x[e]=Number.MAX_SAFE_INTEGER:i===jobs.Hunter&&(resources.Furs.isUnlocked()&&(game.global.race.evil||game.global.race.artifical)&&(x[e]=resources.Furs.isUseful()?Number.MAX_SAFE_INTEGER:Math.max(x[e],resources.Furs.getBusyWorkers("job_hunter",jobs.Hunter.count))),n&&(x[e]=resources.Lumber.isUseful()?Number.MAX_SAFE_INTEGER:Math.max(x[e],resources.Lumber.getBusyWorkers("job_hunter",jobs.Hunter.count))))}o=n?Math.min(r,Math.max(a,k,Math.min(x[e],jobs.Lumberjack.breakpointEmployees(B)))):Math.min(o,k)}if(i===jobs.Lumberjack&&(x[e]===undefined&&(x[e]=0,!game.global.race.soul_eater&&game.global.race.evil&&(x[e]=resources.Furs.isUseful()?Number.MAX_SAFE_INTEGER:resources.Furs.getBusyWorkers("job_reclaimer",jobs.Lumberjack.count)),x[e]=resources.Lumber.isUseful()?Number.MAX_SAFE_INTEGER:Math.max(x[e],resources.Lumber.getBusyWorkers(game.global.race.evil?"job_reclaimer":"job_lumberjack",jobs.Lumberjack.count))),o=Math.min(o,x[e])),i===jobs.QuarryWorker&&(x[e]===undefined&&(x[e]=0,resources.Aluminium.isUnlocked()&&(x[e]=resources.Aluminium.isUseful()?Number.MAX_SAFE_INTEGER:Math.max(x[e],resources.Aluminium.getBusyWorkers("workers",jobs.QuarryWorker.count))),resources.Chrysotile.isUnlocked()&&(x[e]=resources.Chrysotile.isUseful()?Number.MAX_SAFE_INTEGER:Math.max(x[e],resources.Chrysotile.getBusyWorkers("workers",jobs.QuarryWorker.count))),x[e]=resources.Stone.isUseful()?Number.MAX_SAFE_INTEGER:Math.max(x[e],resources.Stone.getBusyWorkers("workers",jobs.QuarryWorker.count))),o=Math.min(o,x[e])),i===jobs.CrystalMiner&&(x[e]===undefined&&(x[e]=resources.Crystal.isUseful()?Number.MAX_SAFE_INTEGER:resources.Crystal.getBusyWorkers("job_crystal_miner",jobs.CrystalMiner.count)),o=Math.min(o,x[e])),i===jobs.Torturer){if(x[e]===undefined){let t=0;for(let e=0;e<game.global.city.surfaceDwellers.length;e++)t+=game.global.city.captive_housing[`race${e}`],t+=game.global.city.captive_housing[`jailrace${e}`];let i=game.global.stats.achieve.nightmare?.mg??0;x[e]=Math.ceil(t/(i/2))}o=Math.min(o,x[e])}if(i===jobs.Miner){if(x[e]===undefined&&(x[e]=0,!w)){if(game.global.race.sappy&&(resources.Aluminium.isUnlocked()&&(x[e]=resources.Aluminium.isUseful()?Number.MAX_SAFE_INTEGER:Math.max(x[e],resources.Aluminium.getBusyWorkers(game.global.race.cataclysm||game.global.race.orbit_decayed?"space_red_mine_title":"job_miner",jobs.Miner.count))),resources.Chrysotile.isUnlocked()&&(x[e]=resources.Chrysotile.isUseful()?Number.MAX_SAFE_INTEGER:Math.max(x[e],resources.Chrysotile.getBusyWorkers("job_miner",jobs.Miner.count)))),game.global.tech.titanium>=2){let t=2*buildings.BeltIronShip.stateOnCount;x[e]=resources.Titanium.isUseful()?Number.MAX_SAFE_INTEGER:Math.max(x[e],resources.Titanium.getBusyWorkers("resource_Iron_name",jobs.Miner.count+t)-t)}resources.Iron.isUnlocked()&&(x[e]=resources.Iron.isUseful()?Number.MAX_SAFE_INTEGER:Math.max(x[e],resources.Iron.getBusyWorkers("job_miner",jobs.Miner.count))),x[e]=resources.Copper.isUseful()?Number.MAX_SAFE_INTEGER:Math.max(x[e],resources.Copper.getBusyWorkers("job_miner",jobs.Miner.count))}o=Math.min(o,x[e])}if(i===jobs.CoalMiner&&(x[e]===undefined&&(x[e]=0,S||(resources.Uranium.isUnlocked()&&(x[e]=resources.Uranium.isUseful()?Number.MAX_SAFE_INTEGER:resources.Uranium.getBusyWorkers("job_coal_miner",jobs.CoalMiner.count)),x[e]=resources.Coal.isUseful()?Number.MAX_SAFE_INTEGER:Math.max(x[e],resources.Coal.getBusyWorkers("job_coal_miner",jobs.CoalMiner.count)))),o=Math.min(o,x[e])),i===jobs.SpaceMiner&&(x[e]===undefined&&(x[e]=(2*buildings.BeltEleriumShip.stateOnCount+buildings.BeltIridiumShip.stateOnCount+buildings.BeltIronShip.stateOnCount)*traitVal("high_pop",0,1)),o=Math.min(o,x[e]),state.maxSpaceMiners=Math.max(state.maxSpaceMiners,Math.min(r,i.breakpointEmployees(B,!0)))),i===jobs.Entertainer&&!haveTech("superstar")){if(x[e]===undefined){let t=(settings.autoTax||haveTask("tax"))&&game.global.civic.taxes.tax_rate<poly.taxCap(!1)?1:0,a=(game.global.tech.theatre+traitVal("musical",0))*traitVal("emotionless",0,"-")*traitVal("high_pop",1,"=")*("sagittarius"===state.astroSign?1.05:1)*(game.global.race.lone_survivor?25:1),r=resources.Morale.rateOfChange-resources.Morale.maxQuantity-t;x[e]=i.count-Math.floor(r/a)}o=Math.min(o,x[e])}if(i===jobs.Banker&&(resources.Money.isCapped()||game.global.civic.taxes.tax_rate<=0)&&!haveTech("banking",7)&&(o=0),i===jobs.Scientist){if(x[e]===undefined&&(x[e]=Number.MAX_SAFE_INTEGER,"magic"===game.global.race.universe||!resources.Knowledge.isCapped()||game.global.race.intelligent||haveTech("science",5)||haveTech("genetics",5)||(o=0),game.global.race.witch_hunter)){let t="magocracy"===game.global.civic.govern.type?.5:1;x[e]=(99-resources.Sus.currentQuantity)/t+i.count*t}o=Math.min(o,x[e])}if(i!==jobs.Professor||game.global.race.intelligent||!resources.Knowledge.isCapped()||haveTech("genetics",5)||haveTech("fanaticism",2)||(o=0),i===jobs.CementWorker){if(x[e]===undefined){if(x[e]=Number.MAX_SAFE_INTEGER,resources.Stone.storageRatio<.1){let t=resources.Stone.rateOfChange+3*i.count-5;game.global.race.smoldering&&settings.autoQuarry&&(t+=resources.Chrysotile.rateOfChange),x[e]=Math.min(x[e],Math.floor(t/3))}resources.Cement.isUseful()||(x[e]=Math.min(x[e],resources.Cement.getBusyWorkers("city_cement_plant_bd",jobs.CementWorker.count)))}o=Math.min(o,x[e])}if(i===jobs.HellSurveyor&&(x[e]===undefined&&(game.global.portal.fortress.threat>9e3&&resources.Population.storageRatio<1?x[e]=0:x[e]=Number.MAX_SAFE_INTEGER),o=Math.min(o,x[e])),i===jobs.Teamster&&(x[e]===undefined&&(x[e]=Math.round(game.global.race.teamster/(game.global.tech.transport??0)*1.5),x[e]-=2*(game.global.tech.railway??0)),o=Math.min(o,x[e])),i===jobs.Meditator){if(x[e]===undefined){let t=1.25;t+=traitVal("slow_digestion",0),t+=traitVal("humpback",0),t-=traitVal("atrophy",0),x[e]=Math.ceil((resources.Population.currentQuantity/100*getFoodConsume()-t)/(.03*traitVal("high_pop",1,"="))),x[e]+=1}o=Math.min(o,x[e])}}if(e===l&&b>0&&(y[e]+=Math.min(u,b),u-=y[e],o-=y[e]),o>0&&i.is.serve){let t=Math.min(c,Math.floor(o/p));f[e]+=t,c-=t,o-=t*p}if(o>0){let t=Math.min(o,u);y[e]+=t,u-=t}}if(u<=0&&c<=0)break}let C=t.indexOf(jobs.Entertainer);-1!==C&&y[C]!==t[C].count&&(resources.Morale.incomeAdusted=!0),-1!==T&&y[T]!==t[T].count&&(resources.Iron.incomeAdusted=!0);let A=[];if(game.global.race.unfathomable&&-1!==i&&settings.jobRaiderWeighting>0&&A.push({index:i,job:jobs.Hunter,weighting:settings.jobRaiderWeighting}),-1!==a&&settings.jobLumberWeighting>0&&A.push({index:a,job:jobs.Lumberjack,weighting:settings.jobLumberWeighting}),-1!==r&&settings.jobQuarryWeighting>0&&A.push({index:r,job:jobs.QuarryWorker,weighting:settings.jobQuarryWeighting}),-1!==n&&settings.jobCrystalWeighting>0&&A.push({index:n,job:jobs.CrystalMiner,weighting:settings.jobCrystalWeighting}),-1!==o&&settings.jobScavengerWeighting>0&&A.push({index:o,job:jobs.Scavenger,weighting:settings.jobScavengerWeighting}),A.length>0){if(A.forEach((e=>{u+=y[e.index],y[e.index]=0,c+=f[e.index],f[e.index]=0})),A.find((e=>e.index===l))&&b>y[l]){let e=Math.min(u,b-y[l]);y[l]+=e,u-=e}let e=y[i]+f[i]*p;if(A.find((e=>e.index===i))&&k>e){let t=k-e,a=Math.min(c,Math.floor(t/p));if(f[i]+=a,c-=a,t-=a*p,t>0){let e=Math.min(u,t);y[i]+=e,u-=e,t-=e}}let splitSorter=(e,t)=>(y[e.index]+f[e.index]*p)/e.weighting-(y[t.index]+f[t.index]*p)/t.weighting||e.index-t.index;for(let t=0;t<3&&(u>0||c>0);t++){let e=A.slice();for(;u+c>0&&e.length>0;){let i=e.sort(splitSorter)[0],a=y[i.index]+f[i.index]*p,r=i.job.getBreakpoint(t)>0?i.job.breakpointEmployees(t):0;!(2===t||a<r)||a>=x[i.index]?e.shift():c>0?(f[i.index]++,c--):(y[i.index]++,u--)}}}let R=[i,a,r,n,o];for(;(u>0||c>0)&&R.length>0;){let e=R.pop();-1!==e&&(y[e]+=u,u=0,f[e]+=c,c=0)}let P=y.map(((e,i)=>e-t[i].workers));if(P.forEach(((e,i)=>e<0&&t[i].removeWorkers(-1*e))),P.forEach(((e,i)=>e>0&&t[i].addWorkers(e))),settings.jobManageServants&&!$.isEmptyObject(game.global.race.servants?.jobs??{})){let e=f.map(((e,i)=>e-t[i].servants));e.forEach(((e,i)=>e<0&&t[i].removeServants(-1*e))),e.forEach(((e,i)=>e>0&&t[i].addServants(e)))}state.lastPopulationCount=resources.Population.currentQuantity,state.lastFarmerCount=-1===i?0:y[i]+f[i]*p,!e&&settings.jobSetDefault&&(jobs.QuarryWorker.isManaged()&&y[r]>0?jobs.QuarryWorker.setAsDefault():jobs.Lumberjack.isManaged()&&y[a]>0?jobs.Lumberjack.setAsDefault():jobs.CrystalMiner.isManaged()&&y[n]>0?jobs.CrystalMiner.setAsDefault():jobs.Scavenger.isManaged()&&y[o]>0?jobs.Scavenger.setAsDefault():jobs.Hunter.isManaged()?jobs.Hunter.setAsDefault():jobs.Farmer.isManaged()?jobs.Farmer.setAsDefault():jobs.Teamster.isManaged()?jobs.Teamster.setAsDefault():jobs.Scavenger.isUnlocked()?jobs.Scavenger.setAsDefault():jobs.CrystalMiner.isUnlocked()?jobs.CrystalMiner.setAsDefault():jobs.QuarryWorker.isUnlocked()?jobs.QuarryWorker.setAsDefault():jobs.Lumberjack.isUnlocked()?jobs.Lumberjack.setAsDefault():jobs.Unemployed.setAsDefault())}function autoTax(){if(resources.Morale.incomeAdusted)return;let e=getVueById("tax_rates");if(e===undefined||!game.global.civic.taxes.display)return;let t=game.global.civic.taxes.tax_rate,i=resources.Morale.currentQuantity,a=resources.Morale.rateOfChange,r=resources.Morale.maxQuantity,n=settings.generalMinimumMorale,o=poly.taxCap(!1),l=poly.taxCap(!0);if(-1!=settings.generalRequestedTaxRate){var u=Math.min(Math.max(settings.generalRequestedTaxRate,l),o);for(KeyManager.set(!1,!1,!1);t>u;)e.sub(),t--;for(;t<u;)e.add(),t++;return void(resources.Morale.incomeAdusted=!0)}resources.Money.storageRatio<.9&&!game.global.race.banana&&(l=Math.max(l,settings.generalMinimumTaxRate));let c=game.global.race.banana?l:resources.Money.isDemanded()?o:Math.round((o-l)*Math.max(0,.9-resources.Money.storageRatio))+l;game.global.race.banana||(t<20&&(r-=10-Math.floor(t/2)),c<20&&(r+=10-Math.floor(l/2))),resources.Money.storageRatio<.9&&(r=Math.min(r,settings.generalMaximumMorale)),t<o&&i>=n+1&&(t<c||i>=r+1||a>=i+1&&c>=20)&&(KeyManager.set(!1,!1,!1),e.add(),resources.Morale.incomeAdusted=!0),t>l&&i<r&&(t>c||i<n)&&(KeyManager.set(!1,!1,!1),e.sub(),resources.Morale.incomeAdusted=!0)}function autoAlchemy(){let e=AlchemyManager;if(!e.isUnlocked())return;let t=e.managedPriorityList(),i=Object.fromEntries(t.map((t=>[t.id,-1*e.currentCount(t.id)])));if(!resources.Crystal.isDemanded()){let a=t.filter((t=>e.resWeighting(t.id)>0&&t.isUseful())),r=0,n=0;for(let t of a)r+=e.resWeighting(t.id),n+=e.currentCount(t.id);let o=(n+resources.Mana.rateOfChange)*(!settings.autoPylon&&resources.Mana.storageRatio>.99?1:settings.magicAlchemyManaUse),l=.15*n+resources.Crystal.currentQuantity+resources.Crystal.rateOfChange,u=Math.floor(Math.min(o,l*(1/.15)));a.forEach((t=>i[t.id]+=Math.floor(u*(e.resWeighting(t.id)/r))))}Object.entries(i).forEach((([t,i])=>i<0&&e.transmuteLess(t,-1*i))),Object.entries(i).forEach((([t,i])=>i>0&&e.transmuteMore(t,i)))}function autoPylon(){let e=RitualManager;if(!e.initIndustry())return;let t=Object.values(e.Productions).filter((e=>e.isUnlocked())),i=Object.fromEntries(t.map((e=>[e.id,0]))),a=resources.Mana.rateOfChange*(resources.Mana.storageRatio>.99?1:settings.productionRitualManaUse),r=settings.productionRitualSafe&&game.global.race.witch_hunter?jobs.Priest.count*(haveTech("roguemagic",4)?4:1):Number.MAX_SAFE_INTEGER,spellSorter=(e,t)=>i[e.id]/e.weighting-i[t.id]/t.weighting||t.weighting-e.weighting,n=t.filter((t=>t.weighting>0&&(t!==e.Productions.Factory||jobs.CementWorker.count>0))).sort(spellSorter);e:for(;n.length>0&&r>0;){let t=n.shift(),o=i[t.id],l=e.costStep(o);if(l<=a){i[t.id]=o+1,a-=l,r--;for(let e=n.length-1;e>=0;e--)if(spellSorter(t,n[e])>0){n.splice(e+1,0,t);continue e}n.unshift(t)}}resources.Mana.rateOfChange;let o=t.map((t=>i[t.id]-e.currentSpells(t)));t.forEach(((t,i)=>o[i]<0&&e.decreaseRitual(t,-1*o[i]))),t.forEach(((t,i)=>o[i]>0&&e.increaseRitual(t,o[i])))}function autoQuarry(){if(!QuarryManager.initIndustry())return;let e=resources.Chrysotile.isDemanded()?Number.MAX_SAFE_INTEGER:100-100*resources.Chrysotile.storageRatio,t=resources.Stone.isDemanded()?Number.MAX_SAFE_INTEGER:100-100*resources.Stone.storageRatio;buildings.MetalRefinery.count>0&&(t=Math.max(t,resources.Aluminium.isDemanded()?Number.MAX_SAFE_INTEGER:100-100*resources.Aluminium.storageRatio)),e*=settings.productionChrysotileWeight;let i=QuarryManager.currentProduction(),a=Math.round(e/(e+t)*100);QuarryManager.increaseProduction(a-i)}function autoMine(){if(!MineManager.initIndustry())return;let e=resources.Adamantite.isDemanded()?Number.MAX_SAFE_INTEGER:100-100*resources.Adamantite.storageRatio,t=resources.Aluminium.isDemanded()?Number.MAX_SAFE_INTEGER:100-100*resources.Aluminium.storageRatio;e*=settings.productionAdamantiteWeight;let i=MineManager.currentProduction(),a=Math.round(e/(e+t)*100);MineManager.increaseProduction(a-i)}function autoExtractor(){if(!ExtractorManager.initIndustry())return;let e=[{id:"common",res1:"Iron",res2:"Aluminium"},{id:"uncommon",res1:"Iridium",res2:"Neutronium"}];haveTech("tau_roid",5)&&e.push({id:"rare",res1:"Orichalcum",res2:"Elerium"});for(let t of e){let e=resources[t.res1].isDemanded()?Number.MAX_SAFE_INTEGER:100-100*resources[t.res1].storageRatio,i=resources[t.res2].isDemanded()?Number.MAX_SAFE_INTEGER:100-100*resources[t.res2].storageRatio;i*=settings[`productionExtWeight_${t.id}`];let a=ExtractorManager.currentProduction(t.id),r=Math.round(i/(e+i)*100);ExtractorManager.increaseProduction(t.id,r-a)}}function autoSmelter(){let e=SmelterManager;if(!e.initIndustry())return;let t=e.maxOperating(),i=0;if(!game.global.race.forge){let a=t,r=e.managedFuelPriorityList(),n={};for(let t=0;t<r.length;t++){let i=r[t];if(!i.unlocked)continue;let o=a;i===e.Fuels.Inferno&&r[t+1]===e.Fuels.Oil&&a>75&&(o=Math.floor(.5*a+37.5));for(let t of i.cost){let a=t.resource;if(a.currentQuantity<o*t.quantity*CONSUMPTION_BALANCE_MIN+t.minRateOfChange||a.isDemanded()){let r=a.rateOfChange+e.fueledCount(i)*t.quantity-t.minRateOfChange,n=Math.max(0,Math.floor(r/t.quantity));n<o&&(state.tooltips["smelterFuels"+i.id.toLowerCase()]=`Too low ${a.name} income<br>`),o=Math.min(o,n)}}a-=o,n[i.id]=o-e.fueledCount(i)}for(let t of r)n[t.id]<0&&(i+=-1*n[t.id],e.decreaseFuel(t,-1*n[t.id]));for(let t of r)n[t.id]>0&&e.increaseFuel(t,n[t.id]);t-=a}t+=e.extraOperating();let a=e.smeltingCount(e.Productions.Iron),r=e.smeltingCount(e.Productions.Steel),n=e.smeltingCount(e.Productions.Iridium),o=e.Productions.Iridium.unlocked&&!resources.Iridium.isCapped()?Math.floor(settings.productionSmeltingIridium*t):0,l=t-n,u={Iridium:o-n,Steel:n-o};if(i>a){let e=i-a;e<=r?u.Steel+=e:(u.Steel+=r,u.Iridium+=e-r)}let c=e.Productions.Steel.cost;for(let p of c){let e=p.resource;if(e.currentQuantity<r*p.quantity*CONSUMPTION_BALANCE_MIN+p.minRateOfChange||e.isDemanded()){let t=e.rateOfChange+r*p.quantity-p.minRateOfChange,i=Math.max(0,Math.floor(t/p.quantity));i<l&&(state.tooltips.smelterMatssteel=`Too low ${e.name} income<br>`),l=Math.min(l,i)}}let g=0,d=0;switch(settings.productionSmelting){case"iron":g=resources.Iron.timeToFull,g||(d=resources.Steel.timeToFull);break;case"steel":d=resources.Steel.timeToFull,d||(g=resources.Iron.timeToFull);break;case"storage":g=resources.Iron.timeToFull,d=resources.Steel.timeToFull;break;case"required":g=resources.Iron.timeToRequired,d=resources.Steel.timeToRequired}resources.Iron.isDemanded()&&(g=Number.MAX_SAFE_INTEGER),resources.Steel.isDemanded()&&(d=Number.MAX_SAFE_INTEGER),0===jobs.Miner.count&&0===buildings.BeltIronShip.stateOnCount&&(g=0,d=1,l=t-n),(r>l||r>0&&g>d)&&u.Steel--,r<l&&a>0&&(d>g||d<=0&&g<=0&&resources.Titanium.storageRatio<.99&&haveTech("titanium"))&&u.Steel++,u.Iron=t-(a+r+u.Steel+n+u.Iridium),Object.entries(u).forEach((([t,i])=>i<0&&e.decreaseSmelting(t,-1*i))),Object.entries(u).forEach((([t,i])=>i>0&&e.increaseSmelting(t,i)))}function autoFactory(){if(!FactoryManager.initIndustry())return;let e=Object.values(FactoryManager.Productions),t={},i={};for(let n=0;n<e.length;n++){let a=e[n];if(state.tooltips["iFactory"+a.id]="Disabled<br>",a.unlocked&&a.enabled){if(a.weighting>0){let e=a.resource.isDemanded()?Math.max(a.priority,100):a.priority;0!==e&&(t[e]=t[e]??[],t[e].push(a),state.tooltips["iFactory"+a.id]="Low priority<br>")}i[a.id]=0}}let a=Object.keys(t).sort(((e,t)=>t-e)).map((e=>t[e]));t[-1]&&a.length>1&&(a.splice(a.indexOf(t[-1],1)),a[0].push(...t[-1]));let r=FactoryManager.maxOperating();for(let n=0;n<a.length&&r>0;n++){let e=a[n].sort(((e,t)=>e.weighting-t.weighting));for(;r>0;){let t=r,a=e.reduce(((e,t)=>e+t.weighting),0);for(let n=e.length-1;n>=0&&r>0;n--){let o=e[n];state.tooltips["iFactory"+o.id]="";let l=Math.min(r,Math.max(1,Math.floor(t/a*o.weighting))),u=l;o.resource.isUseful()||(u=0,state.tooltips["iFactory"+o.id]+="Resource capped<br>");for(let e of o.cost)if(e.resource.isUnlocked()){if(!o.resource.isDemanded()){if(!settings.useDemanded&&e.resource.isDemanded()){u=0,state.tooltips["iFactory"+o.id]+=`${e.resource.name} is demanded<br>`;break}if(e.resource.storageRatio<settings.productionFactoryMinIngredients){u=0,state.tooltips["iFactory"+o.id]+=`${e.resource.name} under min materials ratio<br>`;break}}if(e.resource.storageRatio<.8){let t=FactoryManager.currentProduction(o)*e.quantity,a=i[o.id]*e.quantity,r=e.resource.rateOfChange+t-a-e.minRateOfChange;o.resource.isDemanded()&&(r+=e.resource.currentQuantity);let n=Math.floor(r/e.quantity);n<1&&(state.tooltips["iFactory"+o.id]+=`Too low ${e.resource.name} income<br>`),u=Math.min(u,n)}}if("bioseed"===settings.prestigeType&&settings.prestigeBioseedConstruct&&o===FactoryManager.Productions.NanoTube){let e=game.global.race.truepath?500:250;resources.Neutronium.currentQuantity<e&&(state.tooltips["iFactory"+o.id]+=`${e} ${resources.Neutronium.name} reserved<br>`,u=0)}u>0&&(r-=u,i[o.id]+=u),u<l&&e.splice(n,1)}if(t===r)break}}for(let n of e)if(i[n.id]!==undefined){let e=i[n.id]-FactoryManager.currentProduction(n);e<0&&FactoryManager.decreaseProduction(n,-1*e)}for(let n of e)if(i[n.id]!==undefined){let e=i[n.id]-FactoryManager.currentProduction(n);e>0&&FactoryManager.increaseProduction(n,e)}}function autoMiningDroid(){if(!DroidManager.initIndustry())return;let e=Object.values(DroidManager.Productions),t={},i={};for(let n=0;n<e.length;n++){let a=e[n];if(a.weighting>0){let e=a.resource.isDemanded()?Math.max(a.priority,100):a.priority;0!==e&&(t[e]=t[e]??[],t[e].push(a))}i[a.id]=0}let a=Object.keys(t).sort(((e,t)=>t-e)).map((e=>t[e]));t[-1]&&a.length>1&&(a.splice(a.indexOf(t[-1],1)),a[0].push(...t[-1]));let r=DroidManager.maxOperating();for(let n=0;n<a.length&&r>0;n++){let e=a[n].sort(((e,t)=>e.weighting-t.weighting));for(;r>0;){let t=r,a=e.reduce(((e,t)=>e+t.weighting),0);for(let n=e.length-1;n>=0&&r>0;n--){let o=e[n],l=Math.min(r,Math.max(1,Math.floor(t/a*o.weighting))),u=l;o.resource.isUseful()||(u=0),u>0&&(r-=u,i[o.id]+=u),u<l&&e.splice(n,1)}if(t===r)break}}if(!(r>0)){for(let t of e)if(i[t.id]!==undefined){let e=i[t.id]-DroidManager.currentProduction(t);e<0&&DroidManager.decreaseProduction(t,-1*e)}for(let t of e)if(i[t.id]!==undefined){let e=i[t.id]-DroidManager.currentProduction(t);e>0&&DroidManager.increaseProduction(t,e)}}}function autoGraphenePlant(){if(!GrapheneManager.initIndustry())return;let e=GrapheneManager.maxOperating(),t=[],i=Object.values(GrapheneManager.Fuels).sort(((e,t)=>t.cost.resource.storageRatio<.995||e.cost.resource.storageRatio<.995?t.cost.resource.storageRatio-e.cost.resource.storageRatio:t.cost.resource.rateOfChange-e.cost.resource.rateOfChange));for(let a of i){if(0===e)break;let i=a.cost.resource;if(!i.isUnlocked())continue;let r=GrapheneManager.fueledCount(a),n=e;if(resources.Graphene.isUseful()){if(i.storageRatio<.8){let e=i.rateOfChange+a.cost.quantity*r-a.cost.minRateOfChange,t=Math.floor(e/a.cost.quantity);n=Math.max(Math.min(n,t),0)}}else n=0;let o=n-r;0!==o&&t.push({res:a,delta:o}),e-=r+o}t.forEach((e=>e.delta<0&&GrapheneManager.decreaseFuel(e.res,-1*e.delta))),t.forEach((e=>e.delta>0&&GrapheneManager.increaseFuel(e.res,e.delta)))}function autoConsume(e){if(!e.initIndustry())return;let t=e.managedPriorityList(),i=Object.fromEntries(t.map((e=>[e.id,0])));if(e.isUseful()){let a=e.maxConsume();for(let r of e.useRatio())for(let n of t){if(a<=0)break;if(!e.resEnabled(n.id)||n.isDemanded())continue;let t=r;if(-1===t){if(n.storageRequired<=1)continue;t=Math.max(t,n.storageRequired/n.maxQuantity*e.storageShift)}n!==resources.Food||isHungryRace()||(t=Math.max(t,.25)),t=Math.max(t,n.requestedQuantity/n.maxQuantity*e.storageShift);let o=i[n.id];if(a+=i[n.id],n.isCraftable()){if(n.currentQuantity>n.storageRequired*e.storageShift){let t=Math.floor(e.maxConsumeCraftable(n));o=Math.max(0,o,t)}}else if(n.storageRatio>t+.01){let i=Math.ceil(e.maxConsumeForRatio(n,t));o=Math.max(1,o,i)}else if(n.storageRatio>t){let i=Math.floor(e.maxConsumeForRatio(n,t));o=Math.max(0,o,i)}else if(n.storageRatio>=.999&&t>=1){let t=Math.floor(e.maxConsumeForRatio(n,n.storageRatio));o=Math.max(0,o,t)}i[n.id]=Math.min(a,o),a-=i[n.id]}}Object.keys(i).forEach((t=>i[t]-=e.currentConsume(t))),Object.entries(i).forEach((([t,i])=>i<0&&e.consumeLess(t,-1*i))),Object.entries(i).forEach((([t,i])=>i>0&&e.consumeMore(t,i)))}function autoReplicator(){if(!ReplicatorManager.initIndustry())return;let e=Object.values(ReplicatorManager.Productions),t={};for(let n=0;n<e.length;n++){let i=e[n];if(i.unlocked&&i.enabled&&i.weighting>0){let e=i.resource.isDemanded()?Math.max(i.priority,100):i.priority;e*=i.resource.isUseful()?i.priority:0,0!==e&&(t[e]=t[e]??[],t[e].push(i))}}let i=Object.keys(t).sort(((e,t)=>t-e)).map((e=>t[e]));if(t[-1]&&i.length>1&&(i.splice(i.indexOf(t[-1],1)),i[0].push(...t[-1])),i.length>0&&i[0].length>0){var a=i[0].sort(((e,t)=>e.weighting-t.weighting))[0];ReplicatorManager.setResource(a.id)}if(settings.replicatorAssignGovernorTask&&"none"!==getGovernor()&&haveTech("replicator")){var r=Object.values(game.global.race.governor.tasks).findIndex((e=>"replicate"===e));if(-1==r){if(-1==(r=Object.values(game.global.race.governor.tasks).findIndex((e=>"none"===e))))return;getVueById("govOffice").setTask("replicate",r)}0==game.global.race.governor.config.replicate.pow.on&&win.document.querySelector("#govOffice .options").getElementsByClassName("tConfig")[8].childNodes[1].childNodes[0].childNodes[0].click(),game.global.race.governor.config.replicate.res.que&&win.document.querySelector("#govOffice .options").getElementsByClassName("tConfig")[8].childNodes[2].childNodes[0].childNodes[0].click(),game.global.race.governor.config.replicate.res.neg&&win.document.querySelector("#govOffice .options").getElementsByClassName("tConfig")[8].childNodes[2].childNodes[1].childNodes[0].click(),game.global.race.governor.config.replicate.res.cap&&win.document.querySelector("#govOffice .options").getElementsByClassName("tConfig")[8].childNodes[2].childNodes[2].childNodes[0].click()}}function formatLogString(e,t){return(e=e.replace(/\{eval:([^}]+)\}/g,((e,t)=>{try{return fastEval(t)}catch(i){return e}}))).replace(/{(\w+)}/g,((e,i)=>t.hasOwnProperty(i)?t[i]:e))}function logPrestige(){var e={};e.resetType=prestigeTypes.find((e=>e.val===settings.prestigeType)).label,e.timeStamp=game.global.stats.days,e.species=game.global.race.species.charAt(0).toUpperCase()+game.global.race.species.slice(1),GameLog.logInfo("prestige",formatLogString(settings.log_prestige_format,e),["achievements"])}function autoPrestige(){switch(settings.prestigeType){case"none":case"vacuum":case"retire":case"eden":return;case"mad":let e=getVueById("mad");if(e?.display&&haveTech("mad")){if("Reset"!==state.goal)return void(state.goal="Reset");e.armed&&e.arm(),(!settings.prestigeMADWait||WarManager.currentSoldiers>=WarManager.maxSoldiers&&resources.Population.currentQuantity>=resources.Population.maxQuantity&&WarManager.currentSoldiers+resources.Population.currentQuantity>=settings.prestigeMADPopulation)&&(state.goal="GameOverMan",logPrestige(),e.launch())}return;case"bioseed":if(isBioseederPrestigeAvailable()){if("Reset"!==state.goal)return void(state.goal="Reset");buildings.GasSpaceDockLaunch.isUnlocked()?buildings.GasSpaceDockLaunch.click():buildings.GasSpaceDockPrepForLaunch.isUnlocked()?buildings.GasSpaceDockPrepForLaunch.click():buildings.GasSpaceDock.cacheOptions()}return;case"cataclysm":if(isCataclysmPrestigeAvailable()){if("Reset"!==state.goal)return void(state.goal="Reset");settings.autoEvolution&&loadQueuedSettings(),techIds["tech-dial_it_to_11"].isClickable()&&(logPrestige(),techIds["tech-dial_it_to_11"].click())}return;case"whitehole":if(isWhiteholePrestigeAvailable()){if("Reset"!==state.goal)return void(state.goal="Reset");techIds["tech-exotic_infusion"].isUnlocked()&&techIds["tech-exotic_infusion"].isAffordable()&&logPrestige(),["tech-infusion_confirm","tech-infusion_check","tech-exotic_infusion"].forEach((e=>techIds[e].click()))}return;case"apocalypse":if(isApocalypsePrestigeAvailable()){if("Reset"!==state.goal)return void(state.goal="Reset");logPrestige(),["tech-protocol66","tech-protocol66a"].forEach((e=>techIds[e].click()))}return;case"ascension":if(game.global.race.witch_hunter){if(isWitchAscensionPrestigeAvailable()){if("Reset"!==state.goal)return void(state.goal="Reset");KeyManager.set(!1,!1,!1),logPrestige(),buildings.PitAbsorptionChamber.vue.action(),state.goal="GameOverMan"}}else if(isAscensionPrestigeAvailable()){if("Reset"!==state.goal)return void(state.goal="Reset");KeyManager.set(!1,!1,!1),buildings.SiriusAscend.click()}return;case"demonic":if(game.global.race.witch_hunter){if(isWitchAscensionPrestigeAvailable(!0)){if("Reset"!==state.goal)return void(state.goal="Reset");KeyManager.set(!1,!1,!1),logPrestige(),buildings.PitAbsorptionChamber.vue.action(),state.goal="GameOverMan"}}else if(isDemonicPrestigeAvailable()){if("Reset"!==state.goal)return void(state.goal="Reset");logPrestige(),techIds["tech-demonic_infusion"].click()}return;case"terraform":if(buildings.RedTerraform.isUnlocked()){if("Reset"!==state.goal)return void(state.goal="Reset");KeyManager.set(!1,!1,!1),buildings.RedTerraform.click()}return;case"matrix":if(buildings.TauStarBluePill.isUnlocked()){if("Reset"!==state.goal)return void(state.goal="Reset");KeyManager.set(!1,!1,!1),buildings.TauStarBluePill.click()}return}}function isPrestigeAllowed(e){return settings.autoPrestige&&!(settings.prestigeWaitAT&&game.global.settings.at>0)&&(!e||settings.prestigeType===e)}function isCataclysmPrestigeAvailable(){return techIds["tech-dial_it_to_11"].isUnlocked()}function isBioseederPrestigeAvailable(){return!isGECKNeeded()&&buildings.GasSpaceDock.count>=1&&buildings.GasSpaceDockShipSegment.count>=100&&buildings.GasSpaceDockProbe.count>=settings.prestigeBioseedProbes}function isWhiteholePrestigeAvailable(){return getBlackholeMass()>=settings.prestigeWhiteholeMinMass&&(techIds["tech-exotic_infusion"].isUnlocked()||techIds["tech-infusion_check"].isUnlocked()||techIds["tech-infusion_confirm"].isUnlocked())}function isApocalypsePrestigeAvailable(){return techIds["tech-protocol66"].isUnlocked()||techIds["tech-protocol66a"].isUnlocked()}function isAscensionPrestigeAvailable(){return buildings.SiriusAscend.isUnlocked()&&isPillarFinished()}function isWitchAscensionPrestigeAvailable(e){return(!e||haveTech("forbidden",5))&&buildings.PitAbsorptionChamber.count>=100&&buildings.PitSoulCapacitor.instance.energy>=1e8&&isPillarFinished()}function isDemonicPrestigeAvailable(){return buildings.SpireTower.count>settings.prestigeDemonicFloor&&haveTech("waygate",3)&&(!settings.autoMech||!MechManager.isActive&&MechManager.mechsPotential<=settings.prestigeDemonicPotential)&&techIds["tech-demonic_infusion"].isUnlocked()}function isPillarFinished(){let e=game.global.pillars[game.global.race.species],t=!e&&resources.Harmony.currentQuantity>=1&&"micro"!==game.global.race.universe,i=e&&e<game.alevel();return!settings.prestigeAscensionPillar||!t&&!i}function isGECKNeeded(){return isAchievementUnlocked("lamentis",5,"standard")&&buildings.GasSpaceDockGECK.count<settings.prestigeGECK}function getBlackholeMass(){let e=game.global.interstellar.stellar_engine;return e?e.mass+e.exotic:0}function autoShapeshift(){if(!game.global.race.shapeshifter||"ignore"===settings.shifterGenus||game.global.race.ss_genus===settings.shifterGenus)return!1;getVueById("sshifter")?.setShape(settings.shifterGenus)}function autoPsychic(){if("none"===settings.psychicPower||!game.global.race.psychic||!game.global.tech.psychic||resources.Energy.storageRatio<1)return!1;let e=null;const canAfford=e=>resources.Energy.currentQuantity>=psychicPowerCost[e][game.global.tech.psychic>=5?1:0];if(("murder"===settings.psychicPower||"boost"!==settings.psychicPower&&game.global.stats.psykill<10)&&resources.Population.currentQuantity>0&&canAfford("murder")&&(e=getVueById("psychicKill")))return void e.murder();if(game.global.tech.psychicthrall&&game.global.tech.unfathomable&&game.global.race.unfathomable){let t=resources.Thrall.rateOfChange,i=resources.Thrall.storageRatio;if(("auto"===settings.psychicPower||"mind_break"===settings.psychicPower)&&(t>1||1===t&&1===i)&&canAfford("mind_break")&&(e=getVueById("psychicMindBreak")))return void e.breakMind();if(("auto"===settings.psychicPower||"stun"===settings.psychicPower)&&game.global.tech.psychicthrall>=2&&i<1&&canAfford("stun")&&(e=getVueById("psychicCapture")))return void e.stun()}const haveRoom=e=>e.currentQuantity+450*e.income<e.maxQuantity;let t=game.global.race.psychicPowers;if(("auto"===settings.psychicPower||"profit"===settings.psychicPower)&&game.global.tech.psychic>=3&&haveRoom(resources.Money)&&!t.cash&&canAfford("profit")&&(e=getVueById("psychicFinance")))e.boostVal();else{if(("auto"===settings.psychicPower||"boost"===settings.psychicPower)&&!t.boostTime&&canAfford("boost")){let t=null;if("auto"===settings.psychicBoostRes){let e=Object.values(resources).filter((e=>e.isUnlocked()&&e.atomicMass>0&&haveRoom(e))).sort(((e,t)=>t.income-e.income));e.length>0&&(t=e[0].id)}else t=settings.psychicBoostRes;if(t&&(e=getVueById("psychicBoost")))return $(`#psychicBoost #psyhscrolltarget input[value="${t}"]`).click(),void e.boostVal()}("auto"===settings.psychicPower||"assault"===settings.psychicPower)&&game.global.tech.psychic>=2&&!t.assaultTime&&canAfford("assault")&&(e=getVueById("psychicAssault"))&&e.boostVal()}}function autoGenetics(){let e=game.global.tech.genetics;if(!e)return;let t=getVueById("arpaSequence"),i=game.global.arpa.sequence;if(!t||!i)return;if(("enabled"===settings.geneticsSequence&&!i.on||"disabled"===settings.geneticsSequence&&i.on||"decode"===settings.geneticsSequence&&i.on&&e>1)&&t.toggle(),e<5)return;if(("enabled"===settings.geneticsBoost&&!i.boost||"disabled"===settings.geneticsBoost&&i.boost)&&t.booster(),e<6)return;if(("enabled"===settings.geneticsAssemble&&!i.auto||"disabled"===settings.geneticsAssemble&&i.auto)&&t.auto_seq(),"auto"!==settings.geneticsAssemble||resources.Knowledge.currentQuantity<2e5||resources.Knowledge.isDemanded())return;let a=resources.Knowledge.currentQuantity+resources.Knowledge.rateOfChange/ticksPerSecond()-resources.Knowledge.maxQuantity;if(a<=0)return;let r=Math.ceil(a/2e5);resources.Knowledge.currentQuantity-=2e5*r,resources.Genes.currentQuantity+=1*r;for(let n of KeyManager.click(r))t.novo()}function autoMarket(e,t){if(!MarketManager.isUnlocked())return;if(adjustTradeRoutes(),game.global.race.no_trade)return;let i=Math.max(resources.Money.maxQuantity*settings.minimumMoneyPercentage/100,settings.minimumMoney),a=MarketManager.multiplier,r=MarketManager.getMaxMultiplier();for(let n=0;n<MarketManager.priorityList.length;n++){let a=MarketManager.priorityList[n];if(a.is.tradable&&a.isUnlocked()&&MarketManager.isBuySellUnlocked(a)){if(a.autoSellEnabled&&(t||a.storageRatio>=a.autoSellRatio)){let e=resources.Money.maxQuantity-resources.Money.currentQuantity,t=MarketManager.getUnitSellPrice(a),i=Math.floor(e/t);if(i=a.storageRatio>a.autoSellRatio?Math.min(i,Math.floor(a.currentQuantity-a.autoSellRatio*a.maxQuantity)):Math.min(i,Math.floor(2*a.income/ticksPerSecond())),i<=r)MarketManager.setMultiplier(i),MarketManager.sell(a);else{let e=Math.min(5,Math.floor(i/r));MarketManager.setMultiplier(r);for(let t=0;t<e;t++)MarketManager.sell(a)}}if(!0!==e&&!0===a.autoBuyEnabled&&a.storageRatio<a.autoBuyRatio&&!resources.Money.isDemanded()){let e=Math.floor((a.autoBuyRatio-a.storageRatio)*a.maxQuantity),t=Math.floor((resources.Money.currentQuantity-i)/MarketManager.getUnitBuyPrice(a)),n=Math.min(e,t);if(n>0)if(n<=r)MarketManager.setMultiplier(n),MarketManager.buy(a);else{let e=Math.min(5,Math.floor(n/r));MarketManager.setMultiplier(r);for(let t=0;t<e;t++)MarketManager.buy(a)}}}}MarketManager.setMultiplier(a)}function autoGalaxyMarket(){if(!GalaxyTradeManager.initIndustry())return;let e={},t={};for(let n=0;n<poly.galaxyOffers.length;n++){let i=poly.galaxyOffers[n],a=resources[i.buy.res];if(a.galaxyMarketWeighting>0){let t=a.isDemanded()?Math.max(a.galaxyMarketPriority,100):a.galaxyMarketPriority;0!==t&&(e[t]=e[t]??[],e[t].push(i))}t[a.id]=0}let i=Object.keys(e).sort(((e,t)=>t-e)).map((t=>e[t]));e[-1]&&i.length>1&&(i.splice(i.indexOf(e[-1],1)),i[0].push(...e[-1]));let a=GalaxyTradeManager.maxOperating();for(let n=0;n<i.length&&a>0;n++){let e=i[n].sort(((e,t)=>resources[e.buy.res].galaxyMarketWeighting-resources[t.buy.res].galaxyMarketWeighting));for(;a>0;){let i=a,r=e.reduce(((e,t)=>e+resources[t.buy.res].galaxyMarketWeighting),0);for(let n=e.length-1;n>=0&&a>0;n--){let o=e[n],l=resources[o.buy.res],u=resources[o.sell.res],c=Math.min(a,Math.max(1,Math.floor(i/r*l.galaxyMarketWeighting))),g=c;(!l.isUseful()||u.isDemanded()||u.storageRatio<settings.marketMinIngredients)&&(g=0),g>0&&(a-=g,t[l.id]+=g),g<c&&e.splice(n,1)}if(i===a)break}}let r=poly.galaxyOffers.map(((e,i)=>t[e.buy.res]-GalaxyTradeManager.currentProduction(i)));r.forEach(((e,t)=>e<0&&GalaxyTradeManager.decreaseProduction(t,-1*e))),r.forEach(((e,t)=>e>0&&GalaxyTradeManager.increaseProduction(t,e)))}function autoGatherResources(){if(!settings.buildingAlwaysClick&&resources.Population.currentQuantity>15&&(buildings.RockQuarry.count>0||game.global.race.sappy))return;let e=getResourcesPerClick(),t=0;if(buildings.Food.isClickable()&&!game.global.race.fasting){haveTech("conjuring",1)?(t=Math.floor(Math.min((resources.Food.maxQuantity-resources.Food.currentQuantity)/(10*e),resources.Mana.currentQuantity,settings.buildingClickPerTick)),resources.Mana.currentQuantity-=t,resources.Food.currentQuantity+=t*e):(t=Math.ceil(Math.min((resources.Food.maxQuantity-resources.Food.currentQuantity)/e,settings.buildingClickPerTick)),resources.Food.currentQuantity=Math.min(resources.Food.currentQuantity+t*e,resources.Food.maxQuantity));let i=game.actions.city.food;for(let e=0;e<t;e++)i.action()}if(buildings.Lumber.isClickable()){haveTech("conjuring",2)?(t=Math.floor(Math.min((resources.Lumber.maxQuantity-resources.Lumber.currentQuantity)/(10*e),resources.Mana.currentQuantity,settings.buildingClickPerTick)),resources.Mana.currentQuantity-=t,resources.Lumber.currentQuantity+=t*e):(t=Math.ceil(Math.min((resources.Lumber.maxQuantity-resources.Lumber.currentQuantity)/e,settings.buildingClickPerTick)),resources.Lumber.currentQuantity=Math.min(resources.Lumber.currentQuantity+t*e,resources.Lumber.maxQuantity));let i=game.actions.city.lumber;for(let e=0;e<t;e++)i.action()}if(buildings.Stone.isClickable()){haveTech("conjuring",2)?(t=Math.floor(Math.min((resources.Stone.maxQuantity-resources.Stone.currentQuantity)/(10*e),resources.Mana.currentQuantity,settings.buildingClickPerTick)),resources.Mana.currentQuantity-=t,resources.Stone.currentQuantity+=t*e):(t=Math.ceil(Math.min((resources.Stone.maxQuantity-resources.Stone.currentQuantity)/e,settings.buildingClickPerTick)),resources.Stone.currentQuantity=Math.min(resources.Stone.currentQuantity+t*e,resources.Stone.maxQuantity));let i=game.actions.city.stone;for(let e=0;e<t;e++)i.action()}if(buildings.Chrysotile.isClickable()){haveTech("conjuring",2)?(t=Math.floor(Math.min((resources.Chrysotile.maxQuantity-resources.Chrysotile.currentQuantity)/(10*e),resources.Mana.currentQuantity,settings.buildingClickPerTick)),resources.Mana.currentQuantity-=t,resources.Chrysotile.currentQuantity+=t*e):(t=Math.ceil(Math.min((resources.Chrysotile.maxQuantity-resources.Chrysotile.currentQuantity)/e,settings.buildingClickPerTick)),resources.Chrysotile.currentQuantity=Math.min(resources.Chrysotile.currentQuantity+t*e,resources.Chrysotile.maxQuantity));let i=game.actions.city.chrysotile;for(let e=0;e<t;e++)i.action()}if(buildings.Slaughter.isClickable()){t=Math.min(Math.max(resources.Lumber.maxQuantity-resources.Lumber.currentQuantity,resources.Food.maxQuantity-resources.Food.currentQuantity,resources.Furs.maxQuantity-resources.Furs.currentQuantity)/e,settings.buildingClickPerTick);let i=game.actions.city.slaughter;for(let e=0;e<t;e++)i.action();resources.Lumber.currentQuantity=Math.min(resources.Lumber.currentQuantity+t*e,resources.Lumber.maxQuantity),game.global.race.soul_eater&&haveTech("primitive")&&!game.global.race.fasting&&(resources.Food.currentQuantity=Math.min(resources.Food.currentQuantity+t*e,resources.Food.maxQuantity)),resources.Furs.isUnlocked()&&(resources.Furs.currentQuantity=Math.min(resources.Furs.currentQuantity+t*e,resources.Furs.maxQuantity))}}function autoBuild(){BuildingManager.updateWeighting(),ProjectManager.updateWeighting();let e=[...state.queuedTargets,...state.triggerTargets],t=[...BuildingManager.managedPriorityList(),...ProjectManager.managedPriorityList()];state.unlockedBuildings=t.sort(((e,t)=>t.weighting-e.weighting));let i={},a={},r={};const isAffordable=e=>a[e._vueBinding]??(a[e._vueBinding]=e.isAffordable()),n="perResource"===settings.buildingConsumptionCheck?e=>e.consumption.some((e=>e.rate>=0&&r[e.resource._id])):"unlimited"===settings.buildingConsumptionCheck?e=>!1:e=>Object.keys(r).length>0;e:for(let o=0;o<t.length;o++){let l=t[o];if(e.includes(l)||!isAffordable(l))continue;if(n(l))continue;let u=getCostConflict(l);if(u)l.extraDescription+=`Conflicts with ${u.actionList.map((e=>`<span class="has-text-info">${e}</span>`)).join(", ")} for ${u.resList.map((e=>`<span class="has-text-info">${e}</span>`)).join(", ")} (${u.obj.cause})<br>`;else{if(!settings.buildingBuildIfStorageFull||!Object.keys(l.cost).some((e=>resources[e].storageRatio>.98)))for(let e=0;e<t.length;e++){let a=t[e],r=a.weighting/l.weighting;if(r<=1.000001)break;if(r<10&&isAffordable(a))continue;let n=i[a._vueBinding];if(!n){n=[];for(let e in a.cost){let t=resources[e],i=a.cost[e];if(!t.isUnlocked())continue;let r=t.rateOfChange;r>0?n[t.id]=(i-t.currentQuantity)/r:settings.buildingsIgnoreZeroRate&&t.storageRatio<.975&&t.currentQuantity<i?n[t.id]=Number.MAX_SAFE_INTEGER:n[t.id]=0}n.total=Math.max(0,...Object.values(n)),i[a._vueBinding]=n}for(let e in l.cost){let t=resources[e],i=l.cost[e];if(!t.isUnlocked()||t.storageRatio>.99&&t.currentQuantity>=t.storageRequired)continue;let o=a.cost[e];if(o!==undefined&&!(t.currentQuantity>=o+i||i<=(n.total-n[t.id])*t.rateOfChange||o/i>=r)){l.extraDescription+=`Conflicts with ${a.title} for <span class="has-text-info">${t.name}</span><br>`;continue e}}}if(l.click()){if(l.isMission()||l.cost.Soul_Gem&&"whitehole"===settings.prestigeType&&settings.prestigeWhiteholeSaveGems)return;l.consumption.forEach((e=>{e.rate>=0&&(r[e.resource._id]=!0)}));for(let e in a)a[e]=!1}}}}function getTechConflict(e){let t=e._vueBinding;if(settings.researchIgnore.includes(t))return"Ignored research";if("tech-exotic_infusion"===t||"tech-infusion_check"===t||"tech-infusion_confirm"===t||"tech-dial_it_to_11"===t||"tech-limit_collider"===t||"tech-demonic_infusion"===t||"tech-protocol66"===t||"tech-protocol66a"===t)return"Reset research";if("whitehole"===settings.prestigeType&&settings.prestigeWhiteholeSaveGems&&"tech-virtual_reality"!==t&&e.cost.Soul_Gem>resources.Soul_Gem.currentQuantity-10)return"Saving up Soul Gems for prestige";if("tech-isolation_protocol"===t&&"retire"!==settings.prestigeType)return"Progression fork to Retirement reset";if("tech-outerplane_summon"===t&&"demonic"!==settings.prestigeType)return"Progression fork to Witch Hunter's Demonic Infusion";if("tech-focus_cure"===t&&"matrix"!==settings.prestigeType)return"Progression fork to Matrix reset";if(("tech-vax_strat1"===t||"tech-vax_strat2"===t||"tech-vax_strat3"===t||"tech-vax_strat4"===t)&&!t.includes(settings.prestigeVaxStrat))return"Undesirable Vaccination Strategy";if("tech-dark_bomb"===t&&(!settings.prestigeDemonicBomb||"infusion"!==settings.prestigeType))return"Dark Bomb disabled";if(("tech-incorporeal"===t||"tech-tech_ascension"===t)&&"ascension"!==settings.prestigeType)return"Not needed for current prestige";if("tech-xeno_gift"===t&&resources.Knowledge.maxQuantity<settings.fleetAlienGiftKnowledge)return`${getNumberString(settings.fleetAlienGiftKnowledge)} Max Knowledge required`;if(("tech-unification2"===t||"tech-unite"===t)&&!settings.foreignUnification)return"Unification disabled";if("tech-stabilize_blackhole"===t){if(!settings.prestigeWhiteholeStabiliseMass)return"Blackhole stabilization disabled";if("whitehole"===settings.prestigeType)return"Disabled during whilehole reset";if(settings.prestigeWhiteholeStabiliseCooldown>0&&state.whiteholeLastStabilise){let e=(Date.now()-state.whiteholeLastStabilise)/1e3;if(e<settings.prestigeWhiteholeStabiliseCooldown)return`On cooldown for ${Math.ceil(settings.prestigeWhiteholeStabiliseCooldown-e)} more seconds`}}if(t!==settings.userResearchTheology_1&&("tech-anthropology"===t||"tech-fanaticism"===t)){const isFanatRace=()=>Object.values(fanatAchievements).reduce(((e,t)=>e||game.global.race.species===t.race&&game.global.race.gods===t.god&&!isAchievementUnlocked(t.achieve,game.alevel())),!1);if("tech-anthropology"===t&&("auto"!==settings.userResearchTheology_1||"mad"!==settings.prestigeType||isFanatRace()))return"Undesirable theology path";if("tech-fanaticism"===t&&("auto"!==settings.userResearchTheology_1||"mad"===settings.prestigeType&&!isFanatRace()))return"Undesirable theology path"}if(t!==settings.userResearchTheology_2&&("tech-deify"===t||"tech-study"===t)){let e=["ascension","demonic","apocalypse","terraform","matrix","retire","eden"].includes(settings.prestigeType);if("tech-deify"===t&&("auto"!==settings.userResearchTheology_2||!e))return"Undesirable theology path";if("tech-study"===t&&("auto"!==settings.userResearchTheology_2||e))return"Undesirable theology path"}return!1}function autoTrigger(){let e=!1;for(let t of state.triggerTargets)t.click()&&(e=!0);return e}function autoResearch(){for(let e of state.unlockedTechs)if(e.isAffordable()&&!getCostConflict(e)&&e.click())return BuildingManager.updateBuildings(),void ProjectManager.updateProjects()}function getCitadelConsumption(e){return(30+2.5*(e-1))*e*(game.global.race.emfield?1.5:1)}function isHellSupressUseful(){return jobs.Archaeologist.count>0||crafter.Scarletite.count>0||buildings.RuinsArcology.stateOnCount>0||buildings.GateInferniteMine.stateOnCount>0}function autoPower(){if(!resources.Power.isUnlocked())return;let e=BuildingManager.managedStatePriorityList();if(0===e.length)return;let t=resources.Power.currentQuantity;for(let n=0;n<e.length;n++){let i=e[n];t+=i.powered*i.stateOnCount;for(let e=0;e<i.consumption.length;e++){let t=i.consumption[e];i===buildings.BeltSpaceStation&&t.resource===resources.Belt_Support?resources.Belt_Support.rateOfChange-=resources.Belt_Support.maxQuantity:t.resource.rateOfChange+=i.getFuelRate(e)*i.stateOnCount}}let i=buildings.LakeTransport.isSmartManaged()&&buildings.LakeBireme.isSmartManaged(),a=buildings.SpirePort.isSmartManaged()&&buildings.SpireBaseCamp.isSmartManaged();for(let n=0;n<e.length;n++){let r=e[n],o=r.count,l=r.stateOnCount;if(game.global.settings.showGalactic||"galaxy"!==r._tab||(o=0),settings.buildingsLimitPowered&&(o=Math.min(o,r.autoMax)),r===buildings.NeutronCitadel)for(;o>0&&!(t>=getCitadelConsumption(o));)o--;else r.powered>0&&(o=Math.min(o,t/r.powered));if((r===buildings.SiriusAscensionTrigger||r===buildings.RedAtmoTerraformer)&&t<r.powered&&(r.extraDescription=`Missing ${Math.ceil(r.powered-t)} MW to power on<br>${r.extraDescription}`),(!a||r!==buildings.SpirePort&&r!==buildings.SpireBaseCamp&&r!==buildings.SpireMechBay)&&(!i||r!==buildings.LakeTransport&&r!==buildings.LakeBireme)){if(r.is.smart&&r.autoStateSmart){if(resources.Power.currentQuantity<=resources.Power.maxQuantity||haveTech("replicator")){if(r===buildings.BeltSpaceStation){let e=parseFloat(game.breakdown.c.Elerium?.[game.loc("space_belt_station_title")]??0),t=e>0?Math.floor((resources.Elerium.maxQuantity-resources.Elerium.maxCost)/e):0,i=2*buildings.BeltEleriumShip.stateOnCount+buildings.BeltIridiumShip.stateOnCount+buildings.BeltIronShip.stateOnCount;o=Math.min(o,Math.max(l-t,Math.ceil(i/3)))}r===buildings.CementPlant&&0===jobs.CementWorker.count&&(o=0),r===buildings.Mine&&0===jobs.Miner.count&&(o=0),r===buildings.CoalMine&&0===jobs.CoalMiner.count&&(o=0),r===buildings.LakeCoolingTower&&t<r.powered*o+(500*.92**o*(game.global.race.emfield?1.5:1)).toFixed(2)*Math.min(2,buildings.LakeHarbour.count)&&(o=0),r===buildings.LakeHarbour&&1===o&&r.count>1&&(o=0),r!==buildings.GasMining||resources.Helium_3.isUseful()||(o=Math.min(o,resources.Helium_3.getBusyWorkers("space_gas_mining_title",l)),o!==l&&(resources.Helium_3.incomeAdusted=!0)),r!==buildings.GasMoonOilExtractor||resources.Oil.isUseful()||(o=Math.min(o,resources.Oil.getBusyWorkers("space_gas_moon_oil_extractor_title",l)),o!==l&&(resources.Oil.incomeAdusted=!0)),r!==buildings.KuiperOrichalcum||resources.Orichalcum.isUseful()||(o=Math.min(o,resources.Orichalcum.getBusyWorkers("space_kuiper_mine",l,[resources.Orichalcum.title])),o!==l&&(resources.Orichalcum.incomeAdusted=!0)),r!==buildings.KuiperUranium||resources.Uranium.isUseful()||(o=Math.min(o,resources.Uranium.getBusyWorkers("space_kuiper_mine",l,[resources.Uranium.title])),o!==l&&(resources.Uranium.incomeAdusted=!0)),r!==buildings.KuiperNeutronium||resources.Neutronium.isUseful()||(o=Math.min(o,resources.Neutronium.getBusyWorkers("space_kuiper_mine",l,[resources.Neutronium.title])),o!==l&&(resources.Neutronium.incomeAdusted=!0)),r!==buildings.KuiperElerium||resources.Elerium.isUseful()||(o=Math.min(o,resources.Elerium.getBusyWorkers("space_kuiper_mine",l,[resources.Elerium.title])),o!==l&&(resources.Elerium.incomeAdusted=!0))}if(r===buildings.TritonLander)if(buildings.TritonFOB.stateOnCount<1)o=0;else{let e=WarManager.currentSoldiers-Math.min(0,WarManager.wounded-Math.floor(getHealingRate())),t=Math.floor(e/(3*traitVal("high_pop",0,1)));o=Math.min(o,t)}if(r!==buildings.SiriusAscensionTrigger||isPillarFinished()&&"ascension"===settings.prestigeType||(o=0),r===buildings.RedAtmoTerraformer&&"terraform"!==settings.prestigeType&&(o=0),r===buildings.BadlandsAttractor){let e=0;game.global.portal.fortress.threat<settings.hellAttractorTopThreat&&WarManager.hellAssigned>0&&(e=game.global.portal.fortress.threat>settings.hellAttractorBottomThreat&&settings.hellAttractorTopThreat>settings.hellAttractorBottomThreat?Math.floor(o*(settings.hellAttractorTopThreat-game.global.portal.fortress.threat)/(settings.hellAttractorTopThreat-settings.hellAttractorBottomThreat)):o),o=Math.min(o,l+1,Math.max(l-1,e))}if(r===buildings.TouristCenter&&!isHungryRace()&&resources.Food.storageRatio<.7&&!resources.Money.isUseful()&&(o=Math.min(o,resources.Money.getBusyWorkers("tech_tourism",l)),o!==l&&(resources.Money.incomeAdusted=!0)),r===buildings.Mill&&r.powered&&resources.Food.storageRatio<.7&&(jobs.Farmer.count>0||jobs.Hunter.count>0)&&(o=Math.min(o,l-(resources.Power.currentQuantity-5)/-r.powered)),r===buildings.ChthonianMineLayer)if(0===buildings.ChthonianRaider.stateOnCount&&0===buildings.ChthonianExcavator.stateOnCount)o=0;else{let e=((game.global.race.instinct?7e3:7500)-poly.piracy("gxy_chthonian"))/game.actions.galaxy.gxy_chthonian.minelayer.ship.rating();o=Math.min(o,l+Math.ceil(e))}if(r===buildings.RuinsGuardPost)if(isHellSupressUseful()){let e=game.armyRating(traitVal("high_pop",0,1),"hellArmy",0)*traitVal("holy",1,"+"),t=(5001-poly.hellSupression("ruins").rating)/e;haveTech("hell_gate")&&(t=Math.max(t,(7501-poly.hellSupression("gate").rating)/e)),o=Math.min(o,l+1,l+Math.ceil(t))}else o=0;if(r===buildings.SpireWaygate&&(haveTech("waygate",3)||settings.prestigeDemonicBomb&&game.global.stats.spire[poly.universeAffix()]?.dlstr>0||settings.autoMech&&MechManager.mechsPotential>settings.mechWaygatePotential&&!(settings.autoPrestige&&"demonic"===settings.prestigeType&&buildings.SpireTower.count>=settings.prestigeDemonicFloor))&&(o=0),r!==buildings.ScoutShip&&r!==buildings.CorvetteShip||game.global.tech.piracy||!buildings.GorddonEmbassy.isUnlocked()||(o=0),r!==buildings.BeltEleriumShip||resources.Elerium.isUseful()||(o=Math.min(o,resources.Elerium.getBusyWorkers("job_space_miner",l)),o!==l&&(resources.Elerium.incomeAdusted=!0)),r!==buildings.BeltIridiumShip||resources.Iridium.isUseful()||(o=Math.min(o,resources.Iridium.getBusyWorkers("job_space_miner",l)),o!==l&&(resources.Iridium.incomeAdusted=!0)),r!==buildings.BeltIronShip||resources.Iron.isUseful()||(o=Math.min(o,resources.Iron.getBusyWorkers("job_space_miner",l)),o!==l&&(resources.Iron.incomeAdusted=!0)),r!==buildings.MoonIridiumMine||resources.Iridium.isUseful()||(o=Math.min(o,resources.Iridium.getBusyWorkers("space_moon_iridium_mine_title",l)),o!==l&&(resources.Iridium.incomeAdusted=!0)),r!==buildings.MoonHeliumMine||resources.Helium_3.isUseful()||(o=Math.min(o,resources.Helium_3.getBusyWorkers("space_moon_helium_mine_title",l)),o!==l&&(resources.Helium_3.incomeAdusted=!0)),r===buildings.Alien2ArmedMiner&&!resources.Bolognium.isUseful()&&!resources.Adamantite.isUseful()&&!resources.Iridium.isUseful()){let e=Math.max(resources.Bolognium.getBusyWorkers("galaxy_armed_miner_bd",l),resources.Adamantite.getBusyWorkers("galaxy_armed_miner_bd",l),resources.Iridium.getBusyWorkers("galaxy_armed_miner_bd",l));o=Math.min(o,e),o!==l&&(resources.Bolognium.incomeAdusted=!0,resources.Adamantite.incomeAdusted=!0,resources.Iridium.incomeAdusted=!0)}if(r===buildings.BologniumShip&&(buildings.GorddonMission.isAutoBuildable()&&buildings.ScoutShip.count>=2&&buildings.CorvetteShip.count>=1&&(o=Math.min(o,resources.Gateway_Support.maxQuantity-(buildings.ScoutShip.count+buildings.CorvetteShip.count))),resources.Bolognium.isUseful()||(o=Math.min(o,resources.Bolognium.getBusyWorkers("galaxy_bolognium_ship",l))),o!==l&&(resources.Bolognium.incomeAdusted=!0)),!(r!==buildings.ChthonianRaider||resources.Vitreloy.isUseful()||resources.Polymer.isUseful()||resources.Neutronium.isUseful()||resources.Deuterium.isUseful())){let e=Math.max(resources.Vitreloy.getBusyWorkers("galaxy_raider",l),resources.Polymer.getBusyWorkers("galaxy_raider",l),resources.Neutronium.getBusyWorkers("galaxy_raider",l),resources.Deuterium.getBusyWorkers("galaxy_raider",l));o=Math.min(o,e),o!==l&&(resources.Vitreloy.incomeAdusted=!0,resources.Polymer.incomeAdusted=!0,resources.Neutronium.incomeAdusted=!0,resources.Deuterium.incomeAdusted=!0)}if(r!==buildings.Alien1VitreloyPlant||resources.Vitreloy.isUseful()||(o=Math.min(o,resources.Vitreloy.getBusyWorkers("galaxy_vitreloy_plant_bd",l)),o!==l&&(resources.Vitreloy.incomeAdusted=!0)),r!==buildings.ChthonianExcavator||resources.Orichalcum.isUseful()||(o=Math.min(o,resources.Orichalcum.getBusyWorkers("galaxy_excavator",l)),o!==l&&(resources.Orichalcum.incomeAdusted=!0)),r!==buildings.EnceladusWaterFreighter||resources.Water.isUseful()||(o=Math.min(o,resources.Water.getBusyWorkers("space_water_freighter_title",l)),o!==l&&(resources.Water.incomeAdusted=!0)),r===buildings.NebulaHarvester&&!resources.Deuterium.isUseful()&&!resources.Helium_3.isUseful()){let e=Math.max(resources.Deuterium.getBusyWorkers("interstellar_harvester_title",l),resources.Helium_3.getBusyWorkers("interstellar_harvester_title",l));o=Math.min(o,e),o!==l&&(resources.Deuterium.incomeAdusted=!0,resources.Helium_3.incomeAdusted=!0)}if(r===buildings.TauRedWomlingFarm){let e=haveTech("womling_pop")?16:12;haveTech("womling_gene")&&(e+=4),o=Math.min(o,Math.ceil(resources.Womlings_Support.maxQuantity/e))}if(r===buildings.TauRedOverseer){let e=game.global.race.womling_friend?25:game.global.race.womling_god?75:(game.global.race.womling_lord,0),t=r.definition.val(),i=game.global.tauceti.womling_mine.miners,a=Math.ceil((100-(e-i))/t);o=Math.min(o,a)}if(r===buildings.TauRedWomlingFun){let e=game.global.race.womling_friend?75:game.global.race.womling_god?40:game.global.race.womling_lord?30:0,t=r.definition.val(),i=game.global.tauceti.womling_mine.miners+game.global.tauceti.womling_farm.farmers+game.global.tauceti.overseer.injured,a=Math.ceil((100-(e-i))/t);o=Math.min(o,a)}if(r===buildings.TauGasWhalingStation){let e=resources.Tau_Belt_Support,t=8*(1-(1-e.maxQuantity/e.currentQuantity)**1.4)*buildings.TauBeltWhalingShip.stateOnCount;o=Math.min(o,Math.ceil(t/12))}r===buildings.TauMiningPit&&(o=Math.min(o,Math.ceil(resources.Population.maxQuantity/6)))}for(let e=0;e<r.consumption.length;e++){let t=r.consumption[e];if(t.rate>0){if(!t.resource.isUnlocked()){o=0;break}if(t.resource===resources.Food){if(game.global.race.fasting){o=0;break}if(t.resource.storageRatio>.05||isHungryRace())continue}else{if(!(t.resource instanceof Support)&&t.resource.currentQuantity>=o*CONSUMPTION_BALANCE_MIN*t.rate)continue;if(t.resource===resources.Tau_Belt_Support)continue}let e=t.resource.rateOfChange/t.rate;t.resource===resources.Womlings_Support&&(e=Math.ceil(e)),o=Math.min(o,e)}}r.powered<0&&(o=Math.max(o,l-1)),o=Math.max(0,Math.floor(o));for(let e=0;e<r.consumption.length;e++){let t=r.consumption[e];r===buildings.BeltSpaceStation&&t.resource===resources.Belt_Support?resources.Belt_Support.rateOfChange+=resources.Belt_Support.maxQuantity:t.resource.rateOfChange-=r.getFuelRate(e)*o}r.tryAdjustState(o-l),r===buildings.NeutronCitadel?t-=getCitadelConsumption(o):t-=r.powered*o}}if(i&&resources.Lake_Support.rateOfChange>0){let e=resources.Lake_Support.rateOfChange,t=game.global.blood.spire&&game.global.blood.spire>=2?.8:.85,i=buildings.LakeBireme,a=buildings.LakeTransport,r=i.count,n=a.count;for(;r+n>e;)5*n*(1-t**(r-1))>5*(n-1)*(1-t**r)?r--:n--;i.tryAdjustState(r-i.stateOnCount),a.tryAdjustState(n-a.stateOnCount)}if(a&&resources.Spire_Support.rateOfChange>0){let e=settings.autoBuild&&!(settings.autoMech&&MechManager.isActive)&&!(settings.autoPrestige&&"demonic"===settings.prestigeType&&settings.prestigeDemonicFloor-buildings.SpireTower.count<=buildings.SpireMechBay.count);const canBuild=(t,i)=>e&&t.isAutoBuildable()&&resources.Money.maxQuantity>=(t.cost.Money??0)&&(!i||t.isSmartManaged());let t=Math.floor(resources.Spire_Support.rateOfChange),i=Math.min(buildings.SpireMechBay.count,t),a=buildings.SpirePort.count,r=buildings.SpireBaseCamp.count,n=canBuild(buildings.SpirePort)?buildings.SpirePort.autoMax:a,o=canBuild(buildings.SpireBaseCamp)?buildings.SpireBaseCamp.autoMax:r,l=canBuild(buildings.SpireMechBay,!0)?buildings.SpireMechBay.cost.Supply:Number.MAX_SAFE_INTEGER,u=canBuild(buildings.SpirePurifier,!0)?buildings.SpirePurifier.cost.Supply:Number.MAX_SAFE_INTEGER,c=state.queuedTargetsAll.includes(buildings.SpireMechBay),g=state.queuedTargetsAll.includes(buildings.SpirePurifier),[d,p,h]=getBestSupplyRatio(t,n,o);buildings.SpirePurifier.extraDescription=`Supported Supplies: ${Math.floor(d)}<br>${buildings.SpirePurifier.extraDescription}`;let b=c&&l<=d?l:g&&u<=d?u:Math.min(l,u);MechManager.saveSupply=b<=d;let y=c||g;for(let f=i;f>=0;f--){let[e,l,u]=getBestSupplyRatio(t-f,n,o),c=l>a?buildings.SpirePort:u>r?buildings.SpireBaseCamp:null;if(c){for(let e=i;e>=0;e--){let[i,n,o]=getBestSupplyRatio(t-e,a,r);if(i>=c.cost.Supply){adjustSpire(e,n,o);break}}break}if(resources.Supply.currentQuantity>=e&&(y=!0),!y||d<b||e>=b){adjustSpire(f,l,u);break}}}resources.Power.currentQuantity=t,resources.Power.rateOfChange=t;let r=$("span.on.warn");for(let n=0;n<r.length;n++){let e=buildingIds[r[n].parentNode.id];if(e&&e.autoStateEnabled&&!e.is.ship){if((e===buildings.BeltEleriumShip||e===buildings.BeltIridiumShip||e===buildings.BeltIronShip)&&(2*buildings.BeltEleriumShip.stateOnCount+buildings.BeltIridiumShip.stateOnCount+buildings.BeltIronShip.stateOnCount)*traitVal("high_pop",0,1)<=resources.Belt_Support.maxQuantity)continue;if((e===buildings.LakeBireme||e===buildings.LakeTransport)&&buildings.LakeBireme.stateOnCount+buildings.LakeTransport.stateOnCount<=resources.Lake_Support.maxQuantity)continue;if(e===buildings.TauBeltWhalingShip||e===buildings.TauBeltMiningShip)continue;e.tryAdjustState(-1);break}}}function adjustSpire(e,t,i){buildings.SpireMechBay.tryAdjustState(e-buildings.SpireMechBay.stateOnCount),buildings.SpirePort.tryAdjustState(t-buildings.SpirePort.stateOnCount),buildings.SpireBaseCamp.tryAdjustState(i-buildings.SpireBaseCamp.stateOnCount)}function getBestSupplyRatio(e,t,i){let a=0,r=0,n=Math.ceil(e/2+1),o=Math.floor(e/2-1);return e<=3||n>t?(a=Math.min(t,e),r=Math.min(i,e-a)):o>i?(r=Math.min(i,e),a=Math.min(t,e-r)):n<=t&&o<=i&&(a=n,r=o),[Math.round(a*(1+.4*r)*1e4+100),a,r]}function expandStorage(e){let t=e,i=resources.Crates.maxQuantity-resources.Crates.currentQuantity,a=resources.Containers.maxQuantity-resources.Containers.currentQuantity;for(let n in resources.Crates.cost)i=Math.min(i,resources[n].currentQuantity/resources.Crates.cost[n]);for(let n in resources.Containers.cost)a=Math.min(a,resources[n].currentQuantity/resources.Containers.cost[n]);settings.storageLimitPreMad&&isEarlyGame()&&(resources.Steel.storageRatio<.8&&(a=0),isLumberRace()&&buildings.Library.count<20&&buildings.Library.cost.Plywood>resources.Plywood.currentQuantity&&resources.Steel.maxQuantity>=resources.Steel.storageRequired&&(i=0));let r=Math.min(Math.floor(i),Math.ceil(t/StorageManager.crateValue));StorageManager.constructCrate(r),resources.Crates.currentQuantity+=r;for(let n in resources.Crates.cost)resources[n].currentQuantity-=resources.Crates.cost[n]*r;if(t-=r*StorageManager.crateValue,t>0){let e=Math.min(Math.floor(a),Math.ceil(t/StorageManager.containerValue));StorageManager.constructContainer(e),resources.Containers.currentQuantity+=e;for(let t in resources.Containers.cost)resources[t].currentQuantity-=resources.Containers.cost[t]*e;t-=e*StorageManager.containerValue}return t<e}function autoStorage(){let e=StorageManager;if(!e.initStorage())return;if(e.crateValue<=0||e.containerValue<=0)return;let t=e.priorityList.filter((e=>e.isUnlocked()&&e.isManagedStorage()));if(0===t.length)return;let i=resources.Crates.currentQuantity,a=resources.Containers.currentQuantity,r={},n={},o={},l={},u={},c={};for(let h of t){let t=h.id;if(settings.storageAssignExtra){let e=!game.global.race.no_trade&&settings.autoMarket&&h.autoSellEnabled&&h.autoSellRatio>0;n[t]=e?1.03/h.autoSellRatio:1.03}else n[t]=1;h.storeOverflow&&(l[t]=1.03*h.currentQuantity),c[t]=h.storageRequired,o[t]=h.currentQuantity,u[t]=h.minStorage,r[t]={crate:0,container:0,amount:h.maxQuantity-(h.currentCrates*e.crateValue+h.currentContainers*e.containerValue)},i+=h.currentCrates,a+=h.currentContainers}let g=[],d=t.map((e=>[e.id,[]]));const addList=e=>{let i=Object.fromEntries(d);e.forEach((e=>t.find((t=>e.cost[t.id]&&i[t.id].push(e))))),Object.entries(i).forEach((([e,t])=>t.sort(((t,i)=>i.cost[e]-t.cost[e])))),g.push(...Object.values(i).flat())};settings.storageSafeReassign&&addList([{cost:o,isList:!0}]),addList([{cost:u,isList:!0}]),addList([{cost:l,isList:!0}]),addList(state.queuedTargetsAll),addList(state.triggerTargets),settings.autoFleet&&FleetManagerOuter.nextShipExpandable&&"ignore"!==settings.prioritizeOuterFleet&&addList([{cost:FleetManagerOuter.nextShipCost}]),addList(state.unlockedTechs),addList(ProjectManager.priorityList.filter((e=>e.isUnlocked()&&e.autoBuildEnabled))),addList(BuildingManager.priorityList.filter((e=>e.isUnlocked()&&e.autoBuildEnabled))),settings.storageAssignPart&&addList([{cost:c,isList:!0}]);let p=0;e:for(let h of g){let t={},o=i,l=a;for(let i in h.cost){let a=resources[i],u=h.cost[i],c=h.isList?1:n[i];if(!r[i]){if(a.maxQuantity>=u)continue;continue e}if(r[i].amount>=u*c)continue;if(!h.isList&&a.maxStorage>=0&&a.maxStorage<u*c)continue e;let g=Math.min(a.maxStorage>=0?a.maxStorage:Number.MAX_SAFE_INTEGER,u*c)-r[i].amount,d=o*e.crateValue+l*e.containerValue;if(!(h.isList||g<=d)){p=Math.max(p,g-d);continue e}if(t[i]={crate:0,container:0},g>0&&o>0){let a=Math.min(Math.ceil(g/e.crateValue),o);o-=a,g-=a*e.crateValue,t[i].crate=a}if(g>0&&l>0){let a=Math.min(Math.ceil(g/e.containerValue),l);l-=a,g-=a*e.containerValue,t[i].container=a}g>0&&(p=Math.max(p,g))}for(let i in t)r[i].crate+=t[i].crate,r[i].container+=t[i].container,r[i].amount+=t[i].crate*e.crateValue+t[i].container*e.containerValue;i=o,a=l}if(!(p>0&&expandStorage(p))){for(let t in r){let i=resources[t],a=r[t].crate-i.currentCrates,n=r[t].container-i.currentContainers;a<0&&(e.unassignCrate(i,-1*a),i.maxQuantity+=a*e.crateValue,resources.Crates.currentQuantity-=a),n<0&&(e.unassignContainer(i,-1*n),i.maxQuantity+=n*e.containerValue,resources.Containers.currentQuantity-=n)}for(let t in r){let i=resources[t],a=r[t].crate-i.currentCrates,n=r[t].container-i.currentContainers;a>0&&(e.assignCrate(i,a),i.maxQuantity+=a*e.crateValue,resources.Crates.currentQuantity+=a),n>0&&(e.assignContainer(i,n),i.maxQuantity+=n*e.containerValue,resources.Containers.currentQuantity+=n)}}}function autoMinorTrait(){let e=MinorTraitManager;if(!e.isUnlocked())return;let t=e.managedPriorityList();if(0===t.length)return;let i=0,a=0;t.forEach((e=>{i+=e.weighting,a+=e.geneCost()})),t.forEach((t=>{let r=t.geneCost();t.weighting/i>=r/a&&resources.Genes.currentQuantity>=r&&(e.buyTrait(t.traitName),resources.Genes.currentQuantity-=r)}))}function autoMutateTrait(){let e=MutableTraitManager;if(!e.isUnlocked())return;let t="antimatter"===game.global.race.universe?resources.Antiplasmid:resources.Plasmid;for(let i of e.priorityList){if(i.canGain()){let a=i.mutationCost("gain");return e.gainTrait(i.traitName),GameLog.logSuccess("mutation",`Mutating in ${i.name} for ${a} ${t.name}`),void(t.currentQuantity-=a)}if(i.canPurge()){let a=i.mutationCost("purge");return e.purgeTrait(i.traitName),GameLog.logSuccess("mutation",`Mutating out ${i.name} for ${a} ${t.name}`),void(t.currentQuantity-=a)}}}function adjustTradeRoutes(){let e=MarketManager.priorityList.filter((e=>e.isRoutesUnlocked()&&(e.autoTradeBuyEnabled||e.autoTradeSellEnabled))).sort(((e,t)=>(t.storageRatio>.99?1e3*t.tradeSellPrice:t.usefulRatio)-(e.storageRatio>.99?1e3*e.tradeSellPrice:e.usefulRatio))),t={},i=resources.Money.rateOfChange,a=0,r=MarketManager.getImportRouteCap(),n=MarketManager.getExportRouteCap(),[o,l]=MarketManager.getMaxTradeRoutes();for(let b=0;b<e.length;b++){let r=e[b];if(!r.autoTradeSellEnabled)continue;if(t[r.id]=0,a>=o||game.global.race.banana&&a>0||(settings.tradeRouteSellExcess?r.usefulRatio<1:r.storageRatio<.99))continue;let l=Math.min(n,o-a,Math.floor(r.rateOfChange/r.tradeRouteQuantity));l>0&&(a+=l,t[r.id]-=l,i+=r.tradeSellPrice*l)}let u=Math.min(resources.Money.maxQuantity-resources.Money.currentQuantity,Math.max(settings.tradeRouteMinimumMoneyPerSecond,settings.tradeRouteMinimumMoneyPercentage/100*i)),c={};for(let b=0;b<e.length;b++){let i=e[b];if(!i.autoTradeBuyEnabled)continue;if(t[i.id]=t[i.id]??0,i.autoTradeWeighting<=0||(settings.tradeRouteSellExcess?i.usefulRatio>.99:i.storageRatio>.98))continue;let a=i.autoTradePriority;if(i.isDemanded())a=Math.max(a,100),resources.Money.isDemanded()||(u=0);else if(a<100&&-1!==a&&resources.Money.isDemanded())continue;0!==a&&(c[a]=c[a]??[],c[a].push(i))}let g=Object.keys(c).sort(((e,t)=>t-e)).map((e=>c[e]));c[-1]&&g.length>1&&(g.splice(g.indexOf(c[-1],1)),g[0].push(...c[-1]));let d,p,resSorter=(e,i)=>t[e.id]/e.autoTradeWeighting-t[i.id]/i.autoTradeWeighting||i.autoTradeWeighting-e.autoTradeWeighting;"entrepreneur"===getGovernor()?(d=a-l,p=2):(d=o,p=1);e:for(let b=0;b<g.length&&d>0;b++){let e=g[b].sort(((e,t)=>e.autoTradeWeighting-t.autoTradeWeighting));t:for(;e.length>0&&d>0;){let n=e.sort(resSorter)[0];if(t[n.id]>=r)e.shift();else{if(i-n.tradeBuyPrice<u)break e;if(!(a<o)){for(let e in t){if(t[e]===undefined)continue;let a=resources[e];if(!(t[e]>=0||n===a)&&i-a.tradeSellPrice-n.tradeBuyPrice>u&&d>=p){i-=a.tradeSellPrice,i-=n.tradeBuyPrice,t[e]++,t[n.id]++,d-=p;continue t}}break e}i-=n.tradeBuyPrice,a++,d--,t[n.id]++}}}let h=[];for(let b=0;b<e.length;b++){let i=e[b];t[i.id]!==undefined&&(h[b]=t[i.id]-i.tradeRoutes,0===t[i.id]&&0!==i.tradeRoutes?(MarketManager.zeroTradeRoutes(i),h[b]=0):h[b]>0&&i.tradeRoutes<0?(MarketManager.addTradeRoutes(i,h[b]),h[b]=0):h[b]<0&&i.tradeRoutes>0&&(MarketManager.removeTradeRoutes(i,-1*h[b]),h[b]=0))}for(let b=0;b<e.length;b++){let i=e[b];t[i.id]!==undefined&&(h[b]>0?MarketManager.addTradeRoutes(i,h[b]):h[b]<0&&MarketManager.removeTradeRoutes(i,-1*h[b]))}resources.Money.rateOfChange=i}function autoFleetOuter(){let e=FleetManagerOuter;if(!e.initFleet())return e.nextShipMsg="No ships needed yet",void e.updateNextShip();if("none"===settings.fleetOuterShips)return e.updateNextShip(),void(e.nextShipMsg="Ship construction is disabled");let t=game.global.space.shipyard;if("manual"===settings.fleetOuterShips)return e.updateNextShip(e.avail(t.blueprint)?t.blueprint:null),void(e.nextShipMsg="Ships managed manually");let i=null,a=null,r=settings.fleetOuterCrew;if(settings.fleetExploreTau&&1===game.global.tech.tauceti&&e.avail(e._explorerBlueprint)&&e.shipCount("tauceti",e._explorerBlueprint)<1)i="tauceti",a=e._explorerBlueprint,r=0;else{if(1===game.global.tech.eris&&e.getWeighting("spc_eris")>0&&e.syndicate("spc_eris",!0,!0).s<50)i="spc_eris",r=0;else{let t=e.Regions.filter((t=>e.isUnlocked(t)&&e.getWeighting(t)>0&&e.syndicate(t,!1,!0)<e.getMaxDefense(t))).sort(((t,i)=>(1-e.syndicate(i,!1,!0))*e.getWeighting(i)-(1-e.syndicate(t,!1,!0))*e.getWeighting(t)));if(t.length<1)return e.updateNextShip(),void(e.nextShipMsg="No more ships currently needed");i=t[0]}if("user"===settings.fleetOuterShips)a=e.avail(t.blueprint)?t.blueprint:null;else{let t=e.getScoutBlueprint();if(e.avail(t)&&e.shipCount(i,t)<e.getMaxScouts(i)&&(a=t),!a){let t=e.getFighterBlueprint();a=e.avail(t)?t:null}}}if(!a)return e.updateNextShip(),void(e.nextShipMsg=`No suitable blueprint for ship to ${e.getLocName(i)}`);e.updateNextShip(a),e.nextShipName=`${e.getShipName(a)} to ${e.getLocName(i)}`;let n=e.getMissingResource(a);n?e.nextShipMsg=`Next ship(${e.nextShipName}) is missing ${resources[n].name}`:WarManager.currentCityGarrison-e.ClassCrew[a["class"]]<r?e.nextShipMsg=`Next ship(${e.nextShipName}) is missing crew`:e.build(a,i)?GameLog.logSuccess("outer_fleet",`${e.getShipName(a)} has been assembled, and dispatched to ${e.getLocName(i)}.`,["combat"]):e.nextShipMsg=`Invalid design! Next ship(${e.nextShipName}) is missing power`}function autoFleet(){if(!FleetManager.initFleet())return;let e=game.global.galaxy.defense,t=[{name:"gxy_stargate",piracy:(game.global.race.instinct?.09:.1)*game.global.tech.piracy,armada:20*buildings.StargateDefensePlatform.stateOnCount,useful:!0},{name:"gxy_gateway",piracy:(game.global.race.instinct?.09:.1)*game.global.tech.piracy,armada:25*buildings.GatewayStarbase.stateOnCount,useful:buildings.BologniumShip.stateOnCount>0},{name:"gxy_gorddon",piracy:game.global.race.instinct?720:800,armada:0,useful:buildings.GorddonFreighter.stateOnCount>0||buildings.Alien1SuperFreighter.stateOnCount>0||buildings.GorddonSymposium.stateOnCount>0},{name:"gxy_alien1",piracy:game.global.race.instinct?900:1e3,armada:0,useful:buildings.Alien1VitreloyPlant.stateOnCount>0},{name:"gxy_alien2",piracy:game.global.race.instinct?2250:2500,armada:50*buildings.Alien2Foothold.stateOnCount+buildings.Alien2ArmedMiner.stateOnCount*game.actions.galaxy.gxy_alien2.armed_miner.ship.rating(),useful:buildings.Alien2Scavenger.stateOnCount>0||buildings.Alien2ArmedMiner.stateOnCount>0},{name:"gxy_chthonian",piracy:game.global.race.instinct?7e3:7500,armada:buildings.ChthonianMineLayer.stateOnCount*game.actions.galaxy.gxy_chthonian.minelayer.ship.rating()+buildings.ChthonianRaider.stateOnCount*game.actions.galaxy.gxy_chthonian.raider.ship.rating(),useful:buildings.ChthonianExcavator.stateOnCount>0||buildings.ChthonianRaider.stateOnCount>0}],i=[{name:"scout_ship",count:0,power:game.actions.galaxy.gxy_gateway.scout_ship.ship.rating()},{name:"corvette_ship",count:0,power:game.actions.galaxy.gxy_gateway.corvette_ship.ship.rating()},{name:"frigate_ship",count:0,power:game.actions.galaxy.gxy_gateway.frigate_ship.ship.rating()},{name:"cruiser_ship",count:0,power:game.actions.galaxy.gxy_gateway.cruiser_ship.ship.rating()},{name:"dreadnought",count:0,power:game.actions.galaxy.gxy_gateway.dreadnought.ship.rating()}],a=i[0].power,r=Object.fromEntries(i.map(((e,t)=>[e.name,t])));Object.values(e).forEach((e=>Object.entries(e).forEach((([e,t])=>i[r[e]].count+=Math.floor(t)))));let n=null;if(buildings.ChthonianMission.isUnlocked()&&"ignore"!==settings.fleetChthonianLoses){let e,t;"low"===settings.fleetChthonianLoses?(e=4500,t=80):"avg"===settings.fleetChthonianLoses?(e=2500,t=160):"high"===settings.fleetChthonianLoses?(e=1250,t=500):"dread"===settings.fleetChthonianLoses?i[4].count>0&&(n={ships:[0,0,0,0,1],region:"gxy_chthonian",mission:buildings.ChthonianMission}):"frigate"===settings.fleetChthonianLoses&&i.reduce(((e,t)=>e+(t.power>=i[2].power?t.power*t.count:0)),0)>=4500&&(n={ships:i.map(((e,t)=>t>=2?e.count:0)),region:"gxy_chthonian",mission:buildings.ChthonianMission}),game.global.race.instinct&&(t/=2);let r=i.map((e=>e.count)),o=e-t;for(let a=r.length-1;a>=0&&o>0;a--){let e=Math.min(r[a],Math.ceil(o/i[a].power));r[a]-=e,o-=e*i[a].power}if(o<=0){let e=r.map(((e,r)=>[...Array(Math.min(e,Math.floor((t+(a-.1))/i[r].power))+1).keys()]));for(let r of cartesian(...e)){let e=t-r.reduce(((e,t,a)=>e+t*i[a].power),0);if(e<=0&&e>-1*a){let e=r.reduce(((e,t,i)=>t>0?i:e),0),t=i.map(((t,i)=>i>=e?t.count:r[i]));n={ships:t,region:"gxy_chthonian",mission:buildings.ChthonianMission};break}}}}else if(buildings.Alien2Mission.isUnlocked()&&resources.Knowledge.maxQuantity>=settings.fleetAlien2Knowledge){let e=i.reduce(((e,t)=>e+t.power*t.count),0),t=!1;t="suicide"===settings.fleetAlien2Loses?e>=400:e>=650,t&&(n={ships:i.map((e=>e.count)),region:"gxy_alien2",mission:buildings.Alien2Mission})}if(n)return Object.entries(e).forEach((([e,t])=>Object.entries(t).forEach((([t,i])=>FleetManager.subShip(e,t,i))))),i.forEach(((e,t)=>FleetManager.addShip(n.region,e.name,n.ships[t]))),void n.mission.click();let o=t.filter((e=>e.useful&&e.piracy-e.armada>0));for(let g=0;g<t.length;g++){let e=t[g];e.priority=settings["fleet_pr_"+e.name],e.assigned={};for(let t=0;t<i.length;t++)e.assigned[i[t].name]=0}let l=o.map((e=>e.piracy-e.armada));for(let g=i.length-1;g>=0;g--){let e=i[g],t=l.reduce(((t,i)=>t+Math.floor(i/e.power)),0);if(e.count>t)if(e.count>=t+l.length)e.cover=0;else{let i=l.map((t=>t%e.power)).sort(((e,t)=>t-e));e.cover=i[e.count-t-1]}else e.cover=e.power-(a-.1);if(e.count>=t&&(l.forEach(((t,i,a)=>a[i]=t%e.power)),e.count>t)){l.sort(((e,t)=>t-e));for(let i=0;i<e.count-t;i++)l[i]=0}}for(let g=0;g<i.length;g++)if(i[g].count>0){i[g].cover=.1;break}let u=o.sort(((e,t)=>e.priority-t.priority));for(let g=0;g<u.length;g++){let e=u[g],t=e.piracy-e.armada;for(let a=i.length-1;a>=0&&t>0;a--){let r=i[a];if(r.cover<=t){let i=Math.min(r.count,Math.floor(t/r.power));i<r.count&&i*r.power+r.cover<=t&&i++,e.assigned[r.name]+=i,r.count-=i,t-=i*r.power}}if(settings.fleetMaxCover&&t>0){let a=-1;for(;t>0&&++a<i.length;){let r=i[a];if(r.count>0){let i=Math.min(r.count,Math.ceil(t/r.power));e.assigned[r.name]+=i,r.count-=i,t-=i*r.power}}if(t>0)break;for(;--a>=0;){let r=i[a];if(e.assigned[r.name]>0&&t+r.power<=0){let i=Math.min(e.assigned[r.name],Math.floor(t/r.power*-1));i>0&&(e.assigned[r.name]-=i,r.count+=i,t+=i*r.power)}}}}buildings.GorddonSymposium.stateOnCount>0&&i.forEach((e=>t[2].assigned[e.name]+=e.count));let c=t.map((t=>Object.entries(t.assigned).map((([i,a])=>[i,a-e[t.name][i]]))));c.forEach(((e,i)=>e.forEach((([e,a])=>a<0&&FleetManager.subShip(t[i].name,e,-1*a))))),c.forEach(((e,i)=>e.forEach((([e,a])=>a>0&&FleetManager.addShip(t[i].name,e,a)))))}function autoMech(){let e=MechManager;if(!e.initLab()||$("#mechList .mechRow[draggable=true]").length>0)return;let t=game.global.portal.mechbay,i=e.isActive;e.isActive=!1;let a=e.saveSupply&&settings.mechBaysFirst&&0===buildings.SpirePurifier.stateOffCount;if(e.saveSupply=!1,e.inactiveMechs.length>0)return void(e.activeMechs.length>0&&(e.activeMechs.sort(((e,t)=>e.efficiency-t.efficiency)),e.inactiveMechs.sort(((e,t)=>t.efficiency-e.efficiency)),e.activeMechs[0].efficiency<e.inactiveMechs[0].efficiency&&(e.activeMechs.length>e.inactiveMechs.length?e.dragMech(e.activeMechs[0].id,t.mechs.length-1):e.dragMech(e.inactiveMechs[0].id,0))));if(haveTask("mech"))return;let r,n,o={};if("random"===settings.mechBuild)[r,n]=e.getPreferredSize(),o=e.getRandomMech(r);else{if("user"!==settings.mechBuild)return;o={...t.blueprint,...e.getMechStats(t.blueprint)}}let[l,u,c]=e.getMechCost(o);if(!settings.mechFillBay&&resources.Supply.spareMaxQuantity<u)return;let g=t.max-t.bay,d=settings.autoPrestige&&"demonic"===settings.prestigeType&&buildings.SpireTower.count>=settings.prestigeDemonicFloor&&haveTech("waygate",3);if(d&&(a=!1),settings.mechSaveSupplyRatio>0&&!d&&!n){let t=resources.Supply.maxQuantity*settings.mechSaveSupplyRatio-resources.Supply.currentQuantity;g<c&&(t-=e.getMechRefund({size:"titan"})[1]);let i=t/resources.Supply.rateOfChange;if(e.getTimeToClear()<=i)return}let p=settings.autoBuild&&settings.mechBaysFirst&&buildings.SpireMechBay.isAutoBuildable()&&(buildings.SpireMechBay.isAffordable(!0)||buildings.SpirePurifier.isAutoBuildable()&&buildings.SpirePurifier.isAffordable(!0)&&0===buildings.SpirePurifier.stateOffCount),h=settings.mechScrap;if(p&&resources.Supply.currentQuantity<resources.Supply.maxQuantity&&!i&&resources.Supply.rateOfChange>=settings.mechMinSupply)h="none";else if("mixed"===settings.mechScrap)if(1===buildings.SpireWaygate.stateOnCount)h="single";else{let t=Math.floor(g/c),i=t*u+resources.Supply.maxQuantity*settings.mechSaveSupplyRatio,a=Math.max((i-resources.Supply.currentQuantity)/resources.Supply.rateOfChange,(t*l-resources.Soul_Gem.currentQuantity)/resources.Soul_Gem.rateOfChange),r=e.mechsPower+t*o.power;h=a>e.getTimeToClear()*(e.mechsPower/r)&&!d?"single":"all"}if(u<resources.Supply.spareMaxQuantity&&("single"===h&&g<c||"all"===h&&(g<c||resources.Supply.spareQuantity<u||resources.Soul_Gem.spareQuantity<l))){let i=0,r=0,p=0,b=0,y=(settings.mechFillBay?0===g:g<c)&&resources.Supply.storageRatio>.9&&!a?0:d?Math.min(settings.mechScrapEfficiency,1):settings.mechScrapEfficiency,f=e.activeMechs.filter((t=>{if(t.infernal&&"collector"!==t.size||t.power>=e.bestMech[t.size].power)return!1;if(n)return!0;let[i,a]=e.getMechRefund(t);return Math.min((i||.5)/l,a/u)/(t.power/o.power)>y})).sort(((e,t)=>e.efficiency-t.efficiency)),S=settings.mechScoutsRebuild?Number.MAX_SAFE_INTEGER:t.scouts-t.max*settings.mechScouts/2,w=[];for(let t=0;t<f.length&&(g+i<c||"all"===h&&(resources.Supply.spareQuantity+r<u||resources.Soul_Gem.spareQuantity+p<l));t++){if("small"===f[t].size){if(S<1)continue;S--}i+=e.getMechSpace(f[t]),r+=e.getMechRefund(f[t])[1],p+=e.getMechRefund(f[t])[0],b+=f[t].power,w.push(f[t])}if(w.length>0&&(n||b/i<o.efficiency)&&g+i>=c&&resources.Supply.spareQuantity+r>=u&&resources.Soul_Gem.spareQuantity+p>=l){if(w.sort(((e,t)=>t.id-e.id)),w.length>1){let t=average(w.map((t=>t.power/e.bestMech[t.size].power)));GameLog.logSuccess("mech_scrap",`${w.length} mechs (~${Math.round(100*t)}%) has been scrapped.`,["hell"])}else GameLog.logSuccess("mech_scrap",`${e.mechDesc(w[0])} mech has been scrapped.`,["hell"]);w.forEach((t=>e.scrapMech(t))),resources.Supply.currentQuantity=Math.min(resources.Supply.currentQuantity+r,resources.Supply.maxQuantity),resources.Soul_Gem.currentQuantity+=p,g+=i}else if(g+i>=c)return}if(settings.mechFillBay&&!a&&(!p&&g<c||resources.Supply.maxQuantity<u))for(let b=e.Size.indexOf(o.size)-1;b>=0;b--)if([l,u,c]=e.getMechCost({size:e.Size[b]}),c<=g&&u<=resources.Supply.maxQuantity){o=e.getRandomMech(e.Size[b]);break}return resources.Soul_Gem.spareQuantity>=l&&resources.Supply.spareQuantity>=u&&g>=c?(e.buildMech(o),resources.Supply.currentQuantity-=u,resources.Soul_Gem.currentQuantity-=l,void(e.isActive=i)):void 0}function updateScriptData(){for(let e in resources)resources[e].updateData();updateCraftCost(),WarManager.updateGarrison(),WarManager.updateHell(),MarketManager.updateData(),BuildingManager.updateBuildings(),state.globalProductionModifier=1;for(let e of Object.values(game.breakdown.p.Global??{}))state.globalProductionModifier*=1+(parseFloat(e)||0)/100}function finalizeScriptData(){SpyManager.updateForeigns();for(let e in resources)resources[e].finalizeData();if(EjectManager.updateResources(),SupplyManager.updateResources(),NaniteManager.updateResources(),settings.autoMarket){let e=game.breakdown.p.consume.Money?.Trade||0;e>0?resources.Money.rateMods.buy=-1*e:e<0&&(resources.Money.rateMods.sell=-1*e,resources.Money.rateOfChange+=resources.Money.rateMods.sell)}if(settings.autoPylon&&RitualManager.initIndustry()&&Object.values(RitualManager.Productions).filter((e=>e.isUnlocked())).forEach((e=>resources.Mana.rateOfChange+=RitualManager.spellCost(e))),settings.buildingAlwaysClick||settings.autoBuild&&(resources.Population.currentQuantity<=15||buildings.RockQuarry.count<1&&!game.global.race.sappy)){let e=getResourcesPerClick()*ticksPerSecond(),t=haveTech("conjuring",2)?10:1;buildings.Food.isClickable()&&!game.global.race.fasting&&(resources.Food.rateOfChange+=e*settings.buildingClickPerTick*t),buildings.Lumber.isClickable()&&(resources.Lumber.rateOfChange+=e*settings.buildingClickPerTick*t),buildings.Stone.isClickable()&&(resources.Stone.rateOfChange+=e*settings.buildingClickPerTick*t),buildings.Chrysotile.isClickable()&&(resources.Chrysotile.rateOfChange+=e*settings.buildingClickPerTick*t),buildings.Slaughter.isClickable()&&(resources.Lumber.rateOfChange+=e*settings.buildingClickPerTick,game.global.race.soul_eater&&haveTech("primitive",2)&&(resources.Food.rateOfChange+=e*settings.buildingClickPerTick),resources.Furs.isUnlocked()&&(resources.Furs.rateOfChange+=e*settings.buildingClickPerTick))}}function requestStorageFor(e){let t=settings.storageAssignExtra?1.03:1;for(let i=0;i<e.length;i++){let a=e[i],r=!0;for(let e in a.cost)resources[e].maxCost=Math.max(a.cost[e],resources[e].maxCost),resources[e].maxQuantity<a.cost[e]&&!resources[e].hasStorage()&&(r=!1);if(r)for(let e in a.cost){let i=a.cost[e]*t;resources[e].maxQuantity<i&&!resources[e].hasStorage()&&(i=(a.cost[e]+resources[e].maxQuantity)/2),resources[e].storageRequired=Math.max(i,resources[e].storageRequired)}}}function calculateRequiredStorages(){if(state.knowledgeRequiredByTechs=Math.max(0,...state.unlockedTechs.map((e=>e.cost.Knowledge??0))),buildings.GorddonEmbassy.isAutoBuildable()&&(state.knowledgeRequiredByTechs=Math.max(state.knowledgeRequiredByTechs,settings.fleetEmbassyKnowledge)),settings.autoFleet&&FleetManagerOuter.nextShipExpandable&&"ignore"!==settings.prioritizeOuterFleet&&requestStorageFor([{cost:FleetManagerOuter.nextShipCost}]),requestStorageFor(state.unlockedTechs),requestStorageFor(state.queuedTargetsAll),requestStorageFor(BuildingManager.priorityList.filter((e=>e.isUnlocked()&&e.autoBuildEnabled))),requestStorageFor(ProjectManager.priorityList.filter((e=>e.isUnlocked()&&e.autoBuildEnabled))),settings.storageAssignExtra&&!game.global.race.no_trade&&settings.autoMarket)for(let e in resources)resources[e].autoSellEnabled&&resources[e].autoSellRatio>0&&(resources[e].storageRequired/=resources[e].autoSellRatio)}function prioritizeDemandedResources(){let e=[];if(settings.prioritizeQueue.includes("req")&&e.push(...state.queuedTargets),settings.prioritizeTriggers.includes("req")&&e.push(...state.triggerTargets),settings.missionRequest)for(let r=state.missionBuildingList.length-1;r>=0;r--){let t=state.missionBuildingList[r];!t.isUnlocked()||!t.autoBuildEnabled||t===buildings.BlackholeJumpShip&&settings.prestigeBioseedConstruct&&"whitehole"===settings.prestigeType?t.isComplete()&&state.missionBuildingList.splice(r,1):e.push(t)}if(0===e.length&&(isEarlyGame()?settings.researchRequest:settings.researchRequestSpace)&&(e=state.unlockedTechs.filter((e=>e.isAffordable(!0)))),e.length>0)for(let r=0;r<e.length;r++){let t=e[r];for(let e in t.cost){let i=resources[e],a=t.cost[e];t instanceof Project&&t.progress<99&&(a*=2),i.requestQuantity(a)}}if(SpyManager.purchaseMoney&&settings.prioritizeUnify.includes("req")&&resources.Money.requestQuantity(SpyManager.purchaseMoney),settings.autoFleet&&FleetManagerOuter.nextShipAffordable&&settings.prioritizeOuterFleet.includes("req"))for(let r in FleetManagerOuter.nextShipCost)resources[r].requestQuantity(FleetManagerOuter.nextShipCost[r]);let t=JobManager.craftingMax()+JobManager.skilledServantsMax();for(let r in resources){let e=resources[r];if(e.isDemanded())for(let i in e.cost){let a=resources[i],r=a.maxQuantity*e.craftPreserve+t*(1/140)*CONSUMPTION_BALANCE_TARGET*e.cost[i];a.requestQuantity(r)}}const i=FactoryManager.maxOperating(),a=settings.productionFactoryMinIngredients,factoryMin=(e,t)=>Math.max(e.maxQuantity*a,CONSUMPTION_BALANCE_TARGET*i*t);if(resources.Stanene.isDemanded()){const e=factoryMin(resources.Nano_Tube,.02);resources.Nano_Tube.requestQuantity(e)}if(resources.Nano_Tube.isDemanded()){const e=factoryMin(resources.Coal,8);resources.Coal.requestQuantity(e)}if(resources.Furs.isDemanded()){const e=factoryMin(resources.Polymer,1.5);resources.Polymer.requestQuantity(e)}buildings.Alien1VitreloyPlant.count>0&&resources.Stanene.currentQuantity<buildings.Alien1VitreloyPlant.count*CONSUMPTION_BALANCE_TARGET*100&&resources.Stanene.requestQuantity(buildings.Alien1VitreloyPlant.count*CONSUMPTION_BALANCE_TARGET*100)}function updatePriorityTargets(){state.conflictTargets=[],state.queuedTargets=[],state.queuedTargetsAll=[],state.triggerTargets=[],state.unlockedTechs=[],state.unlockedBuildings=[];let e=settings.prioritizeQueue.includes("save");if([{type:"queue",noorder:"qAny",map:e=>buildingIds[e]||arpaIds[e]},{type:"r_queue",noorder:"qAny_res",map:e=>techIds[e]}].forEach((t=>{if(game.global[t.type].display)for(let i of game.global[t.type].queue){let a=t.map(i.id);if(a&&(state.queuedTargetsAll.push(a),a.isAffordable(!0)&&(state.queuedTargets.push(a),e&&state.conflictTargets.push({name:a.title,cause:"Queue",cost:a.cost}))),!game.global.settings[t.noorder])break}})),SpyManager.purchaseMoney&&settings.prioritizeUnify.includes("save")&&state.conflictTargets.push({name:techIds["tech-unification"].title,cause:"Purchase",cost:{Money:SpyManager.purchaseMoney}}),settings.autoFleet&&FleetManagerOuter.nextShipAffordable&&settings.prioritizeOuterFleet.includes("save")&&state.conflictTargets.push({name:FleetManagerOuter.nextShipName,cause:"Ship",cost:FleetManagerOuter.nextShipCost}),settings.autoTrigger){TriggerManager.resetTargetTriggers();let e=settings.prioritizeTriggers.includes("save");for(let t of TriggerManager.targetTriggers){let i=t.actionId,a=arpaIds[i]||buildingIds[i]||techIds[i];a&&(state.triggerTargets.push(a),e&&state.conflictTargets.push({name:a.title,cause:"Trigger",cost:a.cost}))}}if(buildings.GorddonEmbassy.isAutoBuildable()&&resources.Knowledge.maxQuantity>=settings.fleetEmbassyKnowledge){let e=buildings.GorddonEmbassy;state.triggerTargets.push(e),state.conflictTargets.push({name:e.title,cause:"Knowledge",cost:e.cost})}if(buildings.TauStarEden.isAutoBuildable()&&isPrestigeAllowed("eden")){let e=buildings.TauStarEden;state.triggerTargets.push(e),state.conflictTargets.push({name:e.title,cause:"Prestige",cost:e.cost})}if(buildings.TauGas2MatrioshkaBrain.count>=1e3&&buildings.TauGas2IgniteGasGiant.isAutoBuildable()&&isPrestigeAllowed("retire")){let e=buildings.TauGas2IgniteGasGiant;state.triggerTargets.push(e),state.conflictTargets.push({name:e.title,cause:"Prestige",cost:e.cost})}$("#tech .action").each((function(){let e=techIds[this.id];e.updateResourceRequirements(),(!getTechConflict(e)||state.triggerTargets.includes(e)||state.queuedTargetsAll.includes(e))&&state.unlockedTechs.push(e)}))}function checkEvolutionResult(){if(!settings.masterScriptToggle||!state.evoCheckNeeded)return!0;state.evoCheckNeeded=!1;let e=!1;if(settings.autoEvolution&&settings.evolutionBackup&&"junker"!==game.global.race.species&&"sludge"!==game.global.race.species)if("auto"===settings.userEvolutionTarget){let t=races[game.global.race.species];t.getWeighting()<=0&&(Math.max(...Object.values(races).map((e=>e.getWeighting())))>0?(GameLog.logDanger("special",`${t.name} have no unearned achievements for current prestige, soft resetting and trying again.`,["progress","achievements"]),e=!0):GameLog.logWarning("special",`Can't pick a race with unearned achievements for current prestige. Continuing with ${t.name}.`,["progress","achievements"]))}else settings.userEvolutionTarget!==game.global.race.species&&races[settings.userEvolutionTarget].getHabitability()>0&&(GameLog.logDanger("special","Wrong race, soft resetting and trying again.",["progress"]),e=!0);if(settings.autoMutateTraits){let t=game.races[game.global.race.species];for(let i of MutableTraitManager.priorityList)if(i.resetEnabled&&game.global.race[i.traitName]&&!t.traits[i.traitName]){GameLog.logDanger("special",`Gained ${i.name} trait, soft resetting and trying again.`,["progress"]),e=!0;break}}if(e){let e=document.querySelector(".reset .button:not(.right)");if(e.innerText===game.loc("reset_soft"))return settings.evolutionQueueEnabled&&settingsRaw.evolutionQueue.length>0&&(settings.evolutionQueueRepeat||addEvolutionSetting(),settingsRaw.evolutionQueue.unshift(settingsRaw.evolutionQueue.pop())),updateSettingsFromState(),state.goal="GameOverMan",e.disabled=!1,e.click(),!1}return!0}function updateTabs(e){let t=state.tabHash;if(state.tabHash=0+(game.global.race.smoldering&&buildings.RockQuarry.count?1:0)+(game.global.race.shapeshifter?1:0)+(game.global.race.servants?1:0)+(game.global.settings.showMarket?1e3:0)+(game.global.galaxy.trade?1:0)+(game.global.settings.showEjector?1:0)+(game.global.settings.showCargo?1:0)+(game.global.tech.alchemy??0)+(game.global.tech.queue?1:0)+(game.global.tech.r_queue?1:0)+(game.global.tech.govern?1:0)+(game.global.tech.spy>=2?1:0)+(game.global.tech.trade?1:0)+(resources.Crates.isUnlocked()?1:0)+(resources.Containers.isUnlocked()?1:0)+(game.global.tech.m_smelting>=2?1:0)+(game.global.tech.irid_smelting?1:0)+(buildings.TitanQuarters.count>0?1:0)+(game.global.race.orbit_decayed?1:0)+(game.global.tech.womling_tech??0)+(game.global.tech.focus_cure??0)+(game.global.tech.isolation?1:0)+(game.global.tech.m_ignite?1:0)+(buildings.TauStarRingworld.count>=1e3?1:0)+(game.global.tech.tau_gas2>=5?1:0)+(game.global.tech.replicator?1:0)+(game.global.tauceti.tau_factory?.count>0?1:0)+(game.global.space.g_factory?.count>0?1:0)+(game.global.tauceti.mining_ship?.count>0?1:0)+(game.global.tech.psychicthrall??0)+(game.global.tech.psychic??0),game.global.settings.showShipYard&&(state.tabHash+=1+(game.global.tech.syard_class??0)+(game.global.tech.syard_power??0)+(game.global.tech.syard_weapon??0)+(game.global.tech.syard_armor??0)+(game.global.tech.syard_engine??0)+(game.global.tech.syard_sensor??0)+(haveTech("titan",3)&&haveTech("enceladus",2)?1:0)+(haveTech("triton",2)?1:0)+(haveTech("kuiper")?1:0)+(haveTech("eris")?1:0)+(haveTech("eris",2)?1:0)+(haveTech("titan_ai_core")?1:0)+(haveTech("tauceti")?1:0)),game.global.race.shapeshifter&&(state.tabHash+=(game.global.race.ss_genus??"none").split("").reduce(((e,t)=>0|(e<<5)-e+t.charCodeAt(0)),0)),e&&state.tabHash!==t){let e=win.$("#mainColumn > div:first-child")[0].__vue__;return e.s.civTabs=7,e.s.tabLoad=!1,e.toggleTabLoad(),e.s.tabLoad=!0,e.toggleTabLoad(),e.s.civTabs=game.global.settings.civTabs,!0}return!1}function getMultiSegmentedTimeLeft(e){let t=e.gameMax-e.count;e instanceof Project&&(t=(100-e.progress)/e.currentStep);let i="",a=0;Object.keys(e.cost).forEach((r=>{const n=e.cost[r]*t,o=(n-game.global.resource[r].amount)/game.global.resource[r].diff;o>a&&n>game.global.resource[r].amount&&(i=r,a=o)}));const r=a===Infinity?"Never":poly.timeFormat(a);return{resource:i,timeLeft:r}}function updateActiveTargetsUI(e,t){e.length?($(`#active_targets .target-type-box.${t}`).show(),$(`#active_targets ul.active_targets-list.${t}`).html(e.map((e=>{let i=e.name,a="",r="",n=0,o="arpa"===t||e instanceof Project,l=e.is&&e.is.multiSegmented;e.count&&!l&&(i+=` #${e.count+1}`),e.instance&&e.instance.time&&(a=`${e.instance.time}`);const u=e.cost;if(e instanceof Technology)$.isEmptyObject(e.cost)?a="Waiting on prerequisite":e.cost.Knowledge>game.global.resource.Knowledge.max&&(a="Not enough Knowledge");else if(o){i+=` (${e.progress}%)`;const t=getMultiSegmentedTimeLeft(e);a=`${t.timeLeft}</span> <span class="has-text-danger">(${t.resource})</span>`}const c=Object.keys(u).map((t=>{let i=resources[t],r="has-text-success",c="",g=u[t];if(o?g=u[t]*((100-e.progress)/e.currentStep):l&&(g=u[t]*(e.gameMax-e.count)),i.currentQuantity<g)if(r="has-text-danger",i.maxQuantity>=g&&i.income>0){const t=(g-i.currentQuantity)/i.income;e instanceof Technology&&t>n&&(n=t),c=`${poly.timeFormat(t)}`,i===resources.Soul_Gem&&(c=`~${c}`)}else o&&"Knowledge"===i.name&&i.income>0?c=poly.timeFormat(i.currentQuantity/i.income):a=c="Never";const d=i.currentQuantity/g*100,p=game.global.race.replicator&&game.global.race.replicator.res===t?"is-replicating":"";return`\n                    <li>\n                        <div class='active_targets-resource-row'>\n                            <div class='active_targets-resource-text'>\n                                <span class='${r}'>${i.title}</span>\n                            </div>\n                            <div class="percentage-full-progress-bar-wrapper ${p}">\n                                <div class="percentage-full-progress-bar" style="width: ${d}%;"></div>\n                            </div>\n                            <div class="active_targets-time-left">${c}</div>\n                        </div>\n                    </li>`})).join("");if(l){r=`(${e.count} / ${e.gameMax})`;const t=getMultiSegmentedTimeLeft(e);a=`${t.timeLeft} <span class="has-text-danger">(${t.resource})</span>`}e instanceof Technology&&""===a&&(a=poly.timeFormat(n));const g=`<span class="active-target-title name">${i} </span><span class="active-target-title time">${a} <span class="active-target-segments has-text-special">${r}</span></span>`;let d="";return"buildings"===t?d=`${e._tab}-${e.id}`:"arpa"===t?d=`${e._tab}${e.id}`:"research"!==t&&"triggers"!==t||(d=e.id),`\n                    <li class="active-target-li">\n                        ${g} <span class="active-target-remove-x ${t}" data-queueid="${d}" data-type="${t}">＋</span>\n                        <ul class="active_targets-sub-list">\n                            ${c}\n                        </ul>\n                    </li>\n                `})))):$(`#active_targets .target-type-box.${t}`).hide()}function updateState(){if("protoplasm"===game.global.race.species)state.goal="Evolution";else if("Evolution"===state.goal){if(!checkEvolutionResult())return;state.goal="Standard",settingsRaw.triggers.length>0&&updateTriggerSettingsContent()}else if(1===game.global.stats.days&&(game.global.race.slow||game.global.race.hyper||"junker"===game.global.race.species)&&!checkEvolutionResult())return;for(let t in resources)resources[t].maxCost=0,resources[t].storageRequired=1,resources[t].requestedQuantity=0;StorageManager.crateValue=poly.crateValue(),StorageManager.containerValue=poly.containerValue(),updatePriorityTargets(),ProjectManager.updateProjects(),calculateRequiredStorages(),prioritizeDemandedResources(),state.tooltips={},state.moneyIncomes.shift();for(let t=state.moneyIncomes.length;t<11;t++)state.moneyIncomes.push(resources.Money.rateOfChange);state.moneyMedian=[...state.moneyIncomes].sort(((e,t)=>e-t))[5];let e=1e3;if(game.global.hasOwnProperty("pillars"))for(let t in game.global.pillars)game.global.pillars[t]&&(e-=12);if(state.astroSign=poly.astrologySign(),buildings.GateEastTower.gameMax=e,buildings.GateWestTower.gameMax=e,(game.global.interstellar?.stellar_engine?.exotic??0)<state.whiteholeLastExoticMass&&(state.whiteholeLastStabilise=Date.now()),state.whiteholeLastExoticMass=game.global.interstellar?.stellar_engine?.exotic??0,buildings.GasSpaceDock.isOptionsCached()||buildings.GasSpaceDock.cacheOptions(),settings.activeTargetsUI){const e=state.queuedTargetsAll,t=state.triggerTargets,i=[],a=[],r=[];e.forEach((e=>{e instanceof Technology?a.push(e):e instanceof Project?r.push(e):i.push(e)})),updateActiveTargetsUI(t,"triggers"),updateActiveTargetsUI(i,"buildings"),updateActiveTargetsUI(a,"research"),updateActiveTargetsUI(r,"arpa"),$(".active-target-remove-x").click((function(){const e=$(this).data("queueid"),t=$(this).data("type"),i=$(".queued").filter(((t,i)=>i.id.indexOf(e)>-1));if("triggers"===t){const t=TriggerManager.targetTriggers.find((t=>t.actionId.includes(e)));t!==undefined&&null!==t&&(t.complete=!0)}else i?.length&&i[0].click();$("#active_targets-wrapper").css("height","auto")}))}else $(".active-target-remove-x").off("click")}function verifyGameActions(){verifyGameActionsExist(game.actions.city,buildings,!1),verifyGameActionsExist(game.actions.space,buildings,!0),verifyGameActionsExist(game.actions.interstellar,buildings,!0),verifyGameActionsExist(game.actions.portal,buildings,!0),verifyGameActionsExist(game.actions.galaxy,buildings,!0)}function verifyGameActionsExist(e,t,i){let a=Object.keys(t);for(let r in e)if(i){let i=e[r];for(let e in i)verifyGameActionExists(a,t,e,i)}else verifyGameActionExists(a,t,r,e)}function verifyGameActionExists(e,t,i,a){if(["info","gift","bonfire","firework","replicator"].includes(i))return;let r=!1;for(let n=0;n<e.length;n++)if(t[e[n]].id===i){r=!0;break}r||(console.log("Game action key not found in script: "+i+" ("+a[i].id+")"),console.log(a[i]))}function initialiseScript(){for(let[e,t]of Object.entries(game.actions.tech))techIds[t.id]=new Technology(e);for(let e of Object.values(buildings))buildingIds[e._vueBinding]=e,e.isMission()&&e!==buildings.BlackholeJumpShip&&e!==buildings.PitAssaultForge&&state.missionBuildingList.push(e);for(let e of Object.values(projects))arpaIds[e._vueBinding]=e;for(let e of Object.values(jobs))jobIds[e._originalId]=e;for(let e of Object.values(crafter))jobIds[e._originalId]=e;updateStandAloneSettings(),updateStateFromSettings(),updateSettingsFromState(),TriggerManager.priorityList.forEach((e=>{e.complete=!1})),checkActions&&verifyGameActions(),new MutationObserver(tooltipObserverCallback).observe(document.getElementById("main"),{childList:!0}),new MutationObserver((e=>e.forEach((e=>e.addedNodes.forEach((e=>{e.nodeType===Node.ELEMENT_NODE&&e.classList.contains("modal")&&(WindowManager.openedByScript?(e.style.display="none",new MutationObserver(WindowManager.checkCallbacks).observe(document.getElementById("modalBox"),{childList:!0})):new MutationObserver(tooltipObserverCallback).observe(e,{childList:!0}))})))))).observe(document.querySelector("body"),{childList:!0}),buildFilterRegExp(),new MutationObserver(filterLog).observe(document.getElementById("msgQueueLog"),{childList:!0})}function buildFilterRegExp(){let e=[],t=[],i=settingsRaw.logFilter.split(/[^0-9a-z_%]/g).filter(Boolean);for(let a=0;a<i.length;a++){let[r,...n]=i[a].split("%");n=n.map(game.loc);let o=game.loc(r,n.length?n:undefined)+("civics_garrison_gained"===r?"%0":"");o!==r&&(e.push(o.replace(/[.*+?^${}()|[\]\\]/g,"\\$&").replace(/%\d/g,".*")),t.push(i[a]))}e.length>0?(state.filterRegExp=new RegExp("^("+e.join("|")+")$"),settingsRaw.logFilter=t.join(", ")):(state.filterRegExp=null,settingsRaw.logFilter="")}function filterLog(e){settings.masterScriptToggle&&state.filterRegExp&&e.forEach((e=>e.addedNodes.forEach((e=>{state.filterRegExp.test(e.innerText)&&e.remove()}))))}function getTooltipInfo(e){let t=[];if(e===buildings.NeutronCitadel){let i=getCitadelConsumption(e.stateOnCount+1)-getCitadelConsumption(e.stateOnCount);t.push(`Next level will increase total consumption by ${getNiceNumber(i)} MW`)}if(e===buildings.SpireMechBay&&MechManager.initLab()){t.push(`Current team potential: ${getNiceNumber(MechManager.mechsPotential)}`);let e=MechManager.activeMechs.filter((e=>"collector"===e.size)).reduce(((e,t)=>e+t.power*MechManager.collectorValue),0);e>0&&t.push(`Supplies collected: ${getNiceNumber(e)} /s`)}if((e instanceof Technology||!settings.autoARPA&&"arpa"===e._tab||!settings.autoBuild&&"arpa"!==e._tab)&&!state.queuedTargetsAll.includes(e)&&!state.triggerTargets.includes(e)){let i=getCostConflict(e);i&&t.push(`Conflicts with ${i.actionList.map((e=>`<span class="has-text-info">${e}</span>`)).join(", ")} for ${i.resList.map((e=>`<span class="has-text-info">${e}</span>`)).join(", ")} (${i.obj.cause})`)}if(e instanceof Technology)if(state.queuedTargetsAll.includes(e))t.push("Queued research, processing...");else if(state.triggerTargets.includes(e))t.push("Active trigger, processing...");else{let i=getTechConflict(e);i&&t.push(i)}if(e===buildings.GorddonFreighter&&haveTech("banking",13)){let i=e.stateOnCount,a=100*((1+.03*(i+1))/(1+.03*i)-1),r=a/3;t.push(`Next level will increase ${buildings.AlphaExchange.title} storage by +${getNiceNumber(a)}% (+${getNiceNumber(r)}% per crew)`)}if(e===buildings.Alien1SuperFreighter&&haveTech("banking",13)){let i=e.stateOnCount,a=100*((1+.08*(i+1))/(1+.08*i)-1),r=a/5;t.push(`Next level will increase ${buildings.AlphaExchange.title} storage by +${getNiceNumber(a)}% (+${getNiceNumber(r)}% per crew)`)}if((e===buildings.Hospital||e===buildings.BootCamp&&game.global.race.artifical||e===buildings.EnceladusBase&&game.global.race.orbit_decayed)&&t.push(`~${getNiceNumber(getHealingRate())} soldiers healed per day`),e===buildings.Hospital){let e=1/(4*getGrowthRate());t.push(`~${getNiceNumber(e)} seconds to increase population`)}if(e===buildings.PortalCarport&&jobs.HellSurveyor.count>0){let e=5*(1+.22*buildings.BadlandsAttractor.stateOnCount),i=(10*e+50*e)/2,a="sports"===getGovernor()?1100:1e3;a*=traitVal("blurry",0,"+"),a*=traitVal("instinct",0,"+"),a+=haveTech("infernite",5)?250:0;let r=i/a,n=10-Math.min(10,jobs.HellSurveyor.count)/2,o=1/(r/2*Math.min(1,r/n)/5);t.push(`Up to ~${getNiceNumber(o)} seconds to break car (with full supression)`)}if(e===buildings.PortalRepairDroid){let i=Math.round(200*.95**e.stateOnCount)/4,a=Math.round(180*.92**e.stateOnCount)/4;t.push(`${getNiceNumber(i)} seconds to repair 1% of wall`),t.push(`${getNiceNumber(a)} seconds to repair car`)}if(e===buildings.BadlandsAttractor){let i=5*(1+.22*e.stateOnCount),a=game.global.stats.achieve.technophobe?.l>=5?9e3:1e4;if("evil"===game.global.race.universe&&resources.Dark.currentQuantity>1){let e=resources.Dark.currentQuantity*(1+.01*resources.Harmony.currentQuantity);a-=Math.round(2*Math.log2(e))}a=Math.round(a*.948**e.stateOnCount),a=Math.round(a*traitVal("ghostly",2,"-")),a=Math.max(12,a);let r=1/a*100;t.push(`~${getNiceNumber(r)}% chance to find ${resources.Soul_Gem.title}`),t.push(`Up to ~${getNiceNumber(10*i)}-${getNiceNumber(50*i)} demons spawned per day`)}if(e===buildings.Smokehouse){let i=50*.9**e.count;t.push(`${getNiceNumber(i)}% of stored ${resources.Food.title} spoiled per second`)}if(e===buildings.LakeCoolingTower){let e=buildings.LakeCoolingTower.stateOnCount,i=(500*.92**e-500*.92**(e+1))*buildings.LakeHarbour.stateOnCount*(game.global.race.emfield?1.5:1);t.push(`Next level will decrease total consumption by ${getNiceNumber(i)} MW`)}return e===buildings.DwarfShipyard&&settings.autoFleet&&FleetManagerOuter.nextShipMsg&&t.push(FleetManagerOuter.nextShipMsg),e.extraDescription&&t.push(e.extraDescription),t.join("<br>")}function tooltipObserverCallback(e){settings.masterScriptToggle&&e.forEach((e=>e.addedNodes.forEach((e=>{if("popper"===e.id){let t=new MutationObserver((i=>{e.querySelector(".script-tooltip")||(t.disconnect(),addTooltip(e),t.observe(e,{childList:!0}))}));addTooltip(e),t.observe(e,{childList:!0})}}))))}function addTooltip(e){$(e).append('<span class="script-tooltip" hidden></span>');let t=e.dataset.id;if("powerStatus"===t)return void $(e).append(`<p class="modal_bd"><span>Disabled</span><span class="has-text-danger">${getNiceNumber(resources.Power.maxQuantity)}</span></p>`);if(infusionStep[t])return void $(e).find(".costList .res-Blood_Stone").append(` (+${infusionStep[t]})`);if(state.tooltips[t])return void $(e).append(`<div style="border-top: solid .0625rem #999">${state.tooltips[t]}</div>`);let i=null,a=null;if(a=(i=t.match(/^popArpa([a-z_-]+)\d*$/))?arpaIds["arpa"+i[1]]:(i=t.match(/^q([A-Za-z_-]+)\d*$/))?buildingIds[i[1]]||arpaIds[i[1]]:buildingIds[t]||techIds[t],!a||a instanceof Technology&&a.isResearched())return;if(a===buildings.BlackholeStellarEngine&&"magic"!==game.global.race.universe&&buildings.BlackholeMassEjector.count>0&&game.global.interstellar.stellar_engine.exotic<.025){let t=resources.Elerium.atomicMass*game.global.interstellar.mass_ejector.Elerium+resources.Infernite.atomicMass*game.global.interstellar.mass_ejector.Infernite||-1,i=1e10*(.025-game.global.interstellar.stellar_engine.exotic);$(e).append(`<div id="popTimer" class="flair has-text-advanced">Contaminated in [${poly.timeFormat(i/t)}]</div>`)}if(a===buildings.TauRedJeff&&buildings.TauRedWomlingLab.count>0){let t=game.global.stats.achieve.overlord?.l>=5?4.9:5;t-=game.global.race.lone_survivor?.1:0;let i=(game.global.tech.womling_tech+2)**t,a=game.global.tauceti.womling_lab.tech,r=Math.floor(a/i*100);$(e).find("div:eq(1)>div:eq(5)").append(` (${r}%)`);let n=game.global.tauceti.womling_lab.scientist/2*Math.min(1,.1*game.global.tauceti.womling_lab.scientist),o=n>0?Math.ceil((i-a)/n):-1;$(e).append(`<div id="popTimer" class="flair has-text-advanced">Next Tech Level in ~[${poly.timeFormat(o)}]</div>`)}let r=getTooltipInfo(a);r&&$(e).append(`<div style="border-top: solid .0625rem #999">${r}</div>`)}function updateOverrides(){let e={},t={};for(let r in settingsRaw.overrides){let i=settingsRaw.overrides[r];for(let n=0;n<i.length;n++){let o=i[n];try{if(!checkTypes[o.type1])throw`${o.type1} variable not found`;if(!checkTypes[o.type2])throw`${o.type2} variable not found`;if(!checkCompare[o.cmp])throw`${checkCompare[o.cmp]} comparator not found`;let i=checkTypes[o.type1].fn(o.arg1),a=checkTypes[o.type2].fn(o.arg2);if(!checkCompare[o.cmp](i,a))continue;let n=checkCustom[o.cmp]?a:o.ret;if(typeof settingsRaw[r]==typeof n){t[r]=n;break}if("object"!=typeof settingsRaw[r])throw`Expected type: ${typeof settingsRaw[r]}; Override type: ${typeof n}`;e[r]=e[r]??[],e[r].push(n)}catch(a){let e=`Condition ${n+1} for setting ${r} invalid! Fix or remove it. (${a})`;WindowManager.isOpen()||Object.values(game.global.lastMsg.all).find((t=>t.m===e))||GameLog.logDanger("special",e,["events","major_events"]);continue}}}haveTask("bal_storage")&&(t.autoStorage=!1),haveTask("trash")&&(t.autoEject=!1),haveTask("tax")&&(t.autoTax=!1),t.tickRate=Math.min(240,Math.max(1,Math.round(2*(t.tickRate??settingsRaw.tickRate)))/2),Object.assign(settings,settingsRaw,t);for(let r in e){settings[r]=settingsRaw[r].slice();for(let t of e[r]){let e=settings[r].indexOf(t);e>-1?settings[r].splice(e,1):settings[r].push(t)}}let i=$("#script_override_true_value:visible");0!==i.length&&changeDisplayInputNode(i)}function automateLab(){let e=document.querySelector("#celestialLab .create button");if(e&&(updateOverrides(),settings.masterScriptToggle&&settings.autoPrestige&&("ascension"===settings.prestigeType||"terraform"===settings.prestigeType)))return state.goal="GameOverMan",void e.click()}function automate(){"GameOverMan"!==state.goal&&!state.forcedUpdate&&state.gameTicked&&(state.gameTicked=!1,state.scriptTick<Number.MAX_SAFE_INTEGER?state.scriptTick++:state.scriptTick=1,state.scriptTick%(game.global.settings.at?2*settings.tickRate:settings.tickRate)==0&&(updateScriptData(),updateOverrides(),finalizeScriptData(),updateTabs(!0)||(updateState(),updateUI(),KeyManager.reset(),settings.masterScriptToggle&&("Evolution"!==state.goal?((settings.buildingAlwaysClick||settings.autoBuild)&&autoGatherResources(),settings.autoMarket&&autoMarket(),settings.autoHell&&autoHell(),settings.autoGalaxyMarket&&autoGalaxyMarket(),settings.autoFactory&&autoFactory(),settings.autoMiningDroid&&autoMiningDroid(),settings.autoGraphenePlant&&autoGraphenePlant(),settings.autoAlchemy&&autoAlchemy(),settings.autoPylon&&autoPylon(),settings.autoQuarry&&autoQuarry(),settings.autoMine&&autoMine(),settings.autoExtractor&&autoExtractor(),settings.autoSmelter&&autoSmelter(),settings.autoStorage&&autoStorage(),settings.autoReplicator&&autoReplicator(),settings.autoTrigger&&autoTrigger()||(settings.autoResearch&&autoResearch(),(settings.autoBuild||settings.autoARPA)&&autoBuild()),settings.autoJobs?autoJobs():settings.autoCraftsmen&&autoJobs(!0),settings.autoFleet&&(game.global.race.truepath?autoFleetOuter():autoFleet()),settings.autoMech&&autoMech(),settings.autoGenetics&&autoGenetics(),settings.autoMinorTrait&&autoMinorTrait(),settings.autoCraft&&autoCraft(),settings.autoFight&&(autoMerc(),autoSpy(),autoBattle()),settings.autoTax&&autoTax(),settings.autoGovernment&&autoGovernment(),settings.autoNanite&&autoConsume(NaniteManager),settings.autoSupply&&autoConsume(SupplyManager),settings.autoEject&&autoConsume(EjectManager),settings.autoPower&&autoPower(),isPrestigeAllowed()&&autoPrestige(),settings.autoMinorTrait&&(autoShapeshift(),autoPsychic()),settings.autoMutateTraits&&autoMutateTrait(),KeyManager.finish(),state.soulGemLast=resources.Soul_Gem.currentQuantity):settings.autoEvolution&&autoEvolution()))))}function mainAutoEvolveScript(){if(null===document.getElementById("queueColumn"))return void setTimeout(mainAutoEvolveScript,100);if("undefined"!=typeof unsafeWindow?win=unsafeWindow:(win=window,win.$._data(win.document).events?.keydown||$.noConflict()),!(game=win.evolve))return state.warnDebug&&(state.warnDebug=!1,alert("You need to enable Debug Mode in settings for script to work")),void setTimeout(mainAutoEvolveScript,100);if(!game.global?.race||!game.breakdown.p.consume)return void setTimeout(mainAutoEvolveScript,100);if(!game.global.settings.tabLoad)return state.warnPreload&&(state.warnPreload=!1,alert("You need to enable Preload Tab Content in settings for script to work")),void setTimeout(mainAutoEvolveScript,100);if(!$.ui){let e=document.createElement("script");return e.src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js",e.onload=mainAutoEvolveScript,e.onerror=()=>alert("Can't load jQuery UI. Check browser console for details."),void document.body.appendChild(e)}(needSandboxBypass="object"==typeof unsafeWindow&&"function"==typeof cloneInto&&"function"==typeof exportFunction&&unsafeWindow!==window)||(poly.adjustCosts=game.adjustCosts,poly.loc=game.loc,poly.messageQueue=game.messageQueue,poly.shipCosts=game.shipCosts),KeyManager.init(),initialiseState(),initialiseRaces(),initialiseScript(),updateOverrides();const setCallback=e=>needSandboxBypass?exportFunction(e,unsafeWindow):e;let e=game.breakdown;Object.defineProperty(game,"breakdown",{get:setCallback((()=>e)),set:setCallback((t=>{e=t,state.gameTicked=!0,settings.tickSchedule?setTimeout(automate):automate()}))}),setInterval(automateLab,2500)}function updateDebugData(){state.forcedUpdate=!0,game.updateDebugData(),state.forcedUpdate=!1}function removeScriptSettings(){$("#script_settings").remove()}function buildScriptSettings(){let e=document.documentElement.scrollTop||document.body.scrollTop,t=$("#script_settings");if(0!==t.length)return;t=$('<div id="script_settings" style="margin-top: 30px;"></div>'),$(".settings").append(t),buildImportExport(),buildPrestigeSettings(t,""),buildGeneralSettings(),buildGovernmentSettings(t,""),buildEvolutionSettings(),buildPlanetSettings(),buildTraitSettings(),buildTriggerSettings(),buildResearchSettings(),buildWarSettings(t,""),buildHellSettings(t,""),buildMechSettings(),buildFleetSettings(t,""),buildEjectorSettings(),buildMarketSettings(),buildStorageSettings(),buildMagicSettings(),buildProductionSettings(),buildJobSettings(),buildBuildingSettings(),buildWeightingSettings(),buildProjectSettings(),buildLoggingSettings(t,"");let i=document.querySelectorAll("#script_settings .script-collapsible");for(let a=0;a<i.length;a++)i[a].addEventListener("click",(function(){this.classList.toggle("script-contentactive");let e=this.nextElementSibling;if("block"===e.style.display){settingsRaw[i[a].id]=!0,e.style.display="none";let t=e.getElementsByClassName("script-searchsettings");t.length>0&&(t[0].value="",filterBuildingSettingsTable())}else settingsRaw[i[a].id]=!1,e.style.display="block";updateSettingsFromState()}));document.documentElement.scrollTop=document.body.scrollTop=e}function buildImportExport(){let e=$(".importExport").last();if(null===e)return;if(null!==document.getElementById("script_importExportButtons"))return;let t=$('<div id="script_importExportButtons" style="margin-top: 6px">');e.after(t),t.append(' <button id="script_settingsImport" class="button">Import Script Settings</button>'),$("#script_settingsImport").on("click",(()=>{if($("#importExport").val().length>0){let e=JSON.parse($("#importExport").val());if(e&&"object"==typeof e&&("TMVictor"===e.scriptName||$.isEmptyObject(e))){let t=[];if(Object.values(e.overrides??[]).forEach((e=>e.forEach((e=>{"Eval"===e.type1&&t.push(e.arg1),"Eval"===e.type2&&t.push(e.arg2)})))),(e.triggers??[]).forEach((e=>{"Eval"===e.requirementType&&t.push(e.requirementId)})),Object.values(e.overrides?.log_prestige_format??[]).forEach((e=>{e.ret.includes("{eval:")&&t.push(e.ret)})),(e.log_prestige_format??"").includes("{eval:")&&t.push(e.log_prestige_format),t.length>0&&!confirm("Warning! Imported settings includes evaluated code, which will have full access to browser page, and can be potentially dangerous.\nOnly continue if you trust the source. Injected code:\n"+t.join("\n")))return;console.log("Importing script settings"),settingsRaw=e,updateStandAloneSettings(),updateStateFromSettings(),updateSettingsFromState(),removeScriptSettings(),removeMechInfo(),removeStorageToggles(),removeMarketToggles(),removeArpaToggles(),removeCraftToggles(),removeBuildingToggles(),removeEjectToggles(),removeSupplyToggles(),$("#autoScriptContainer").remove(),updateUI(),buildFilterRegExp(),$("#importExport").val("")}}})),t.append(' <button id="script_settingsExport" class="button">Export Script Settings</button>'),$("#script_settingsExport").on("click",(()=>{console.log("Exporting script settings"),$("#importExport").val(JSON.stringify(settingsRaw)),$("#importExport").select(),document.execCommand("copy")})),t.append(' <button id="script_settingsFile" class="button">Script Settings as File</button>'),$("#script_settingsFile").on("click",(()=>{triggerFileDownload(JSON.stringify(settingsRaw,undefined,2),settings.scriptSettingsExportFilename)}))}function buildSettingsSection(e,t,i,a){if($("#script_settings").append(`\n          <div id="script_${e}Settings" style="margin-top: 10px;">\n            <h3 id="${e}SettingsCollapsed" class="script-collapsible text-center has-text-success">${t} Settings</h3>\n            <div class="script-content">\n              <div style="margin-top: 10px;"><button id="script_reset${e}" class="button">Reset ${t} Settings</button></div>\n              <div style="margin-top: 10px; margin-bottom: 10px;" id="script_${e}Content"></div>\n            </div>\n          </div>`),a(),!settingsRaw[e+"SettingsCollapsed"]){let t=document.getElementById(e+"SettingsCollapsed");t.classList.toggle("script-contentactive"),t.nextElementSibling.style.display="block"}$("#script_reset"+e).on("click",genericResetFunction.bind(null,i,t))}function buildSettingsSection2(e,t,i,a,r,n){if(""!==t)e.append(`<div style="margin-top: 10px; margin-bottom: 10px;" id="script_${t+i}Content"></div>`);else{if(e.append(`\n              <div id="script_${i}Settings" style="margin-top: 10px;">\n                <h3 id="${i}SettingsCollapsed" class="script-collapsible text-center has-text-success">${a} Settings</h3>\n                <div class="script-content">\n                  <div style="margin-top: 10px;"><button id="script_reset${i}" class="button">Reset ${a} Settings</button></div>\n                  <div style="margin-top: 10px; margin-bottom: 10px;" id="script_${i}Content"></div>\n                </div>\n              </div>`),!settingsRaw[i+"SettingsCollapsed"]){let e=document.getElementById(i+"SettingsCollapsed");e.classList.toggle("script-contentactive"),e.nextElementSibling.style.display="block"}$("#script_reset"+i).on("click",genericResetFunction.bind(null,r,a))}n(t)}function genericResetFunction(e,t){confirm("Are you sure you wish to reset "+t+" Settings?")&&e()}function addStandardHeading(e,t){e.append(`<div style="margin-top: 5px; width: 600px; text-align: left;"><span class="has-text-danger" style="margin-left: 10px;">${t}</span></div>`)}function addSettingsHeader1(e,t){e.append(`<div style="margin: 4px; width: 100%; display: inline-block; text-align: left;"><span class="has-text-success" style="font-weight: bold;">${t}</span></div>`)}function addSettingsHeader2(e,t){e.append(`<div style="margin: 2px; width: 90%; display: inline-block; text-align: left;"><span class="has-text-caution">${t}</span></div>`)}function _(e,t){return checkTypes[e].fn(t)}function openOverrideModal(e){e[overrideKey]&&(e.preventDefault(),openOptionsModal(e.data.label,(t=>{t.append(`<div style="margin-top: 10px; margin-bottom: 10px;" id="script_${e.data.name}Modal"></div>`),$(".script-modal-content").addClass("override-modal"),buildOverrideSettings(e.data.name,e.data.type,e.data.options)})))}function buildOverrideSettings(e,t,i){const rebuild=()=>buildOverrideSettings(e,t,i);let a=settingsRaw.overrides[e]??[],r=$(`#script_${e}Modal`);r.empty().off("*"),r.append(`\n          <table style="width:100%; text-align: left">\n            <tr>\n              <th class="has-text-warning" colspan="2">Variable 1</th>\n              <th class="has-text-warning" colspan="1">Check</th>\n              <th class="has-text-warning" colspan="2">Variable 2</th>\n              <th class="has-text-warning" colspan="3">Result</th>\n            </tr>\n            <tr>\n              <th class="has-text-warning" style="width:16%">Type</th>\n              <th class="has-text-warning" style="width:16%">Value</th>\n              <th class="has-text-warning" style="width:10%"></th>\n              <th class="has-text-warning" style="width:16%">Type</th>\n              <th class="has-text-warning" style="width:16%">Value</th>\n              <th class="has-text-warning" style="width:14%"></th>\n              <th style="width:12%"></th>\n            </tr>\n            <tbody id="script_${e}ModalTable"></tbody>\n          </table>`);let n="";for(let c=0;c<a.length;c++)n+=`<tr id="script_${e}_o${c}" value="${c}" class="script-draggable"><td style="width:16%"></td><td style="width:16%"></td><td style="width:10%"></td><td style="width:16%"></td><td style="width:16%"></td><td style="width:14%"></td><td style="width:12%"><span class="script-lastcolumn"></span></td></tr>`;let o="object"==typeof settingsRaw[e],l="The current value:";n+=`\n          <tr id="script_${e}_d" class="unsortable">\n            <td style="width:74%" colspan="5">${o?"All values passed checks will be added or removed from list":"First value passed check will be used. Default value:"}</td>\n            <td style="width:14%"></td>\n            <td style="width:12%"><a class="button is-small" style="width: 26px; height: 26px"><span>+</span></a></td>\n          </tr>\n          <tr id="script_override_true_value" class="unsortable" value="${e}" type="${t}">\n            ${o?`<td style="width:32%" colspan="2">${l}</td>\n          <td style="width:56%" colspan="4"></td>`:`<td style="width:74%" colspan="5">${l}</td>\n          <td style="width:14%"></td>`}\n            <td style="width:12%"></td>\n          </tr>`;let u=$(`#script_${e}ModalTable`);u.append($(n)),o||$(`#script_${e}_d td:eq(1)`).append(buildInputNode(t,i,settingsRaw[e],(t=>{settingsRaw[e]=t,updateSettingsFromState();let i="boolean"==typeof t?"checked":"value";$(".script_"+e).prop(i,settingsRaw[e])}))),$("#script_override_true_value td:eq(1)").append(buildInputNodeForDisplay(t,i,settings[e])),$(`#script_${e}_d a`).on("click",(()=>{settingsRaw.overrides[e]||(settingsRaw.overrides[e]=[],$(".script_bg_"+e).addClass("inactive-row")),settingsRaw.overrides[e].push({type1:"Boolean",arg1:!0,type2:"Boolean",arg2:!1,cmp:"==",ret:settingsRaw[e]}),updateSettingsFromState(),rebuild()}));for(let c=0;c<a.length;c++){let r=a[c],n=$(`#script_${e}_o${c}`).children().eq(0);n.append(buildConditionType(r,1,rebuild)),n=n.next(),n.append(buildConditionArg(r,1)),n=n.next(),n.append(buildConditionComparator(r,rebuild)),n=n.next(),n.append(buildConditionType(r,2,rebuild)),n=n.next(),n.append(buildConditionArg(r,2)),n=n.next(),checkCustom[r.cmp]||n.append(buildConditionRet(r,t,i)),n=n.next(),n.append(buildConditionRemove(e,c,rebuild)),n.append(buildConditionDuplicate(e,c,rebuild)),n.append(buildConditionEvalize(e,c,rebuild))}u.sortable({items:"tr:not(.unsortable)",helper:sorterHelper,update:()=>{let t=u.sortable("toArray",{attribute:"value"});settingsRaw.overrides[e]=t.map((t=>settingsRaw.overrides[e][t])),updateSettingsFromState(),rebuild()}})}function buildInputNode(e,t,i,a){switch(e){case"string":return $('\n                  <input type="text" class="input is-small" style="height: 22px; width:100%"/>').val(i).on("change",(function(){a(this.value)}));case"number":return $('\n                  <input type="text" class="input is-small" style="height: 22px; width:100%"/>').val(i).on("change",(function(){let e=getRealNumber(this.value);isNaN(e)&&(e=i),this.value=e,a(e)}));case"boolean":return $('\n                  <label tabindex="0" class="switch" style="position:absolute; margin-top: 8px; margin-left: 10px;">\n                    <input type="checkbox">\n                    <span class="check" style="height:5px; max-width:15px"></span><span style="margin-left: 20px;"></span>\n                  </label>').find("input").prop("checked",i).on("change",(function(){a(this.checked)})).end();case"select":return $(`\n                  <select style="width: 100%">${t}</select>`).val(i).on("change",(function(){a(this.value)}));case"select_cb":return $(`\n                  <select style="width: 100%">${buildSelectOptions(t())}</select>`).val(i).on("change",(function(){a(this.value)}));case"list":return buildObjectListInput(t.list,t.name,t.id,i,a);case"list_cb":return buildObjectListInput(t(),"name","id",i,a);default:return""}}function buildInputNodeForDisplay(e,t,i){switch(e){case"string":case"number":return $('\n                  <input type="text" class="input is-small" style="height: 22px; width:100%" disabled="disabled"/>').val(i);case"boolean":return $('\n                  <label tabindex="0" disabled="disabled" class="switch is-disabled" style="position:absolute; margin-top: 8px; margin-left: 10px;">\n                    <input type="checkbox"  disabled="disabled">\n                    <span class="check" style="height:5px; max-width:15px"></span><span style="margin-left: 20px;"></span>\n                  </label>').find("input").prop("checked",i).end();case"select":return $(`\n                  <select style="width: 100%"  disabled="disabled" class="dropdown is-disabled">${t}</select>`).val(i);case"list":return $("\n                  <span></span>").text(i.map((e=>t.list[e].name)).join(", "));default:return $("\n                  <span></span>").text(JSON.stringify(i))}}function changeDisplayInputNode(e){let t=e.attr("type"),i=e.attr("value"),a=settings[e.attr("value")],r=e.find("td:eq(1)>*:first-child");switch(t){case"string":case"number":case"select":return r.val(a);case"boolean":return r.find("input").prop("checked",a);case"list":if("researchIgnore"===i)return r.text(a.map((e=>techIds[e].name)).join(", "));default:return r.text(JSON.stringify(a))}}function buildConditionType(e,t,i){let a=Object.entries(checkTypes).map((([e,t])=>`<option value="${e}" title="${t.desc}">${e.replace(/([A-Z])/g," $1").trim()}</option>`)).join();return $(`<select style="width: 100%">${a}</select>`).val(e["type"+t]).on("change",(function(){e["type"+t]=this.value,e["arg"+t]=checkTypes[this.value].def,updateSettingsFromState(),i()}))}function buildConditionArg(e,t){let i=checkTypes[e["type"+t]];return i?buildInputNode(i.arg,i.options,e["arg"+t],(i=>{e["arg"+t]=i,updateSettingsFromState()})):""}function buildConditionComparator(e,t){let i=Object.entries(checkCompare).map((([e,t])=>`<option value="${e}" title="${checkCustom[e]??t.toString().substr(10)}">${e}</option>`)).join();return $(`<select style="width: 100%">${i}</select>`).val(e.cmp).on("change",(function(){e.cmp=this.value,updateSettingsFromState(),t()}))}function buildConditionRemove(e,t,i){return $('<a class="button is-small" style="width: 26px; height: 26px"><span>-</span></a>').on("click",(()=>{settingsRaw.overrides[e].splice(t,1),0===settingsRaw.overrides[e].length&&(delete settingsRaw.overrides[e],$(".script_bg_"+e).removeClass("inactive-row")),updateSettingsFromState(),i()}))}function buildConditionDuplicate(e,t,i){return $('<a class="button is-small" style="width: 26px; height: 26px"><span style="font-size: 1.2rem;">&#9282;</span></a>').on("click",(()=>{settingsRaw.overrides[e].splice(t,0,{...settingsRaw.overrides[e][t]}),updateSettingsFromState(),i()}))}function buildConditionEvalize(e,t,i){return $('<a class="button is-small" style="width: 26px; height: 26px"><span style="font-size: 0.9rem;">E</span></a>').on("click",(()=>{let i=settingsRaw.overrides[e][t],a=checkCompare[i.cmp].toString().substr(10).replace(/([ab])/g,((e,t)=>{let a="a"===t?1:2;switch(i["type"+a]){case"Number":case"Boolean":return i["arg"+a];case"Eval":return`(${i["arg"+a]})`;case"String":return JSON.stringify(i["arg"+a]);default:return`_("${i["type"+a]}",${JSON.stringify(i["arg"+a])})`}}));win.prompt("Eval of this condition:",a)}))}function buildConditionRet(e,t,i){return buildInputNode(t,i,e.ret,(t=>{e.ret=t,updateSettingsFromState()}))}function buildObjectListInput(e,t,i,a,r){let n=$('<input type="text" style="width:100%"></input>'),onChange=function(n,o){if(n.preventDefault(),null===o.item){let a=Object.values(e).find((e=>e[t]===this.value));a!==undefined&&(o.item={label:this.value,value:a[i]})}null!==o.item&&Object.values(e).some((e=>e[i]===o.item.value))?(this.value=o.item.label,r(o.item.value)):e.hasOwnProperty(a)?(this.value=e[a][t],r(a)):(this.value="",r(null))};return n.autocomplete({minLength:2,delay:0,source:(a,r)=>{let n=new RegExp($.ui.autocomplete.escapeRegex(a.term),"i");r(Object.values(e).filter((e=>n.test(e[t]))).map((e=>({label:e[t],value:e[i]}))))},select:onChange,focus:onChange,change:onChange}),Object.values(e).some((e=>e[i]===a))&&n.val(e[a][t]),n}function addSettingsToggle(e,t,i,a,r,n){return $(`\n          <div class="script_bg_${t}" style="margin-top: 5px; width: 90%; display: inline-block; text-align: left;">\n            <label title="${a}" tabindex="0" class="switch">\n              <input class="script_${t}" type="checkbox" ${settingsRaw[t]?" checked":""}><span class="check"></span>\n              <span style="margin-left: 10px;">${i}</span>\n            </label>\n          </div>`).toggleClass("inactive-row",Boolean(settingsRaw.overrides[t])).on("change","input",(function(){settingsRaw[t]=this.checked,updateSettingsFromState(),$(".script_"+t).prop("checked",settingsRaw[t]),settingsRaw[t]&&r&&r(),!settingsRaw[t]&&n&&n()})).on("click",{label:`${i} (${t})`,name:t,type:"boolean"},openOverrideModal).appendTo(e)}function addSettingsNumber(e,t,i,a){return $(`\n          <div class="script_bg_${t}" style="margin-top: 5px; display: inline-block; width: 90%; text-align: left;">\n            <label title="${a}" tabindex="0">\n              <span>${i}</span>\n              <input class="script_${t}" type="text" style="text-align: right; height: 18px; width: 150px; float: right;" value="${settingsRaw[t]}"></input>\n            </label>\n          </div>`).toggleClass("inactive-row",Boolean(settingsRaw.overrides[t])).on("change","input",(function(){let e=getRealNumber(this.value);isNaN(e)||(settingsRaw[t]=e,updateSettingsFromState()),$(".script_"+t).val(settingsRaw[t])})).on("click",{label:`${i} (${t})`,name:t,type:"number"},openOverrideModal).appendTo(e)}function addSettingsString(e,t,i,a){return $(`\n          <div class="script_bg_${t}" style="margin-top: 5px; display: inline-block; width: 90%; text-align: left;">\n            <label title="${a}" tabindex="0">\n              <span>${i}</span>\n              <input class="script_${t}" type="text" style="text-align: right; height: 18px; width: 70%; float: right;" value="${settingsRaw[t]}"></input>\n            </label>\n          </div>`).toggleClass("inactive-row",Boolean(settingsRaw.overrides[t])).on("change","input",(function(){settingsRaw[t]=this.value,updateSettingsFromState(),$(".script_"+t).val(settingsRaw[t])})).on("click",{label:`${i} (${t})`,name:t,type:"string"},openOverrideModal).appendTo(e)}function buildSelectOptions(e){return e.map((e=>`<option value="${e.val}" title="${e.hint??""}">${e.label}</option>`)).join()}function addSettingsSelect(e,t,i,a,r){let n=buildSelectOptions(r);return $(`\n          <div class="script_bg_${t}" style="margin-top: 5px; display: inline-block; width: 90%; text-align: left;">\n            <label title="${a}" tabindex="0">\n              <span>${i}</span>\n              <select class="script_${t}" style="width: 150px; float: right;">\n                ${n}\n              </select>\n            </label>\n          </div>`).toggleClass("inactive-row",Boolean(settingsRaw.overrides[t])).find("select").val(settingsRaw[t]).on("change",(function(){settingsRaw[t]=this.value,updateSettingsFromState(),$(".script_"+t).val(settingsRaw[t])})).end().on("click",{label:`${i} (${t})`,name:t,type:"select",options:n},openOverrideModal).appendTo(e)}function addSettingsList(e,t,i,a,r){let n=$(`\n          <div class="script_bg_${t}" style="display: inline-block; width: 90%; margin-top: 6px;">\n            <label title="${a}" tabindex="0">\n              <span>${i}</span>\n              <input type="text" style="height: 25px; width: 150px; float: right;" placeholder="Research...">\n              <button class="button" style="height: 25px; float: right; margin-right: 4px; margin-left: 4px;">Remove</button>\n              <button class="button" style="height: 25px; float: right;">Add</button>\n            </label>\n            <br>\n            <textarea class="script_${t} textarea" style="margin-top: 12px" readonly></textarea>\n          </div>`).toggleClass("inactive-row",Boolean(settingsRaw.overrides[t])).on("click",{label:`Add or Remove (${t})`,name:t,type:"list",options:{list:r,name:"name",id:"_vueBinding"}},openOverrideModal).appendTo(e),o="",updateList=()=>{let e=settingsRaw[t].map((e=>Object.values(r).find((t=>t._vueBinding===e)).name)).join(", ");$(".script_"+t).val(e)},onChange=function(e,t){if(e.preventDefault(),null===t.item){let e=Object.values(r).find((e=>e.name===this.value));e!==undefined&&(t.item={label:this.value,value:e._vueBinding})}null!==t.item&&r.hasOwnProperty(t.item.value)?(this.value=t.item.label,o=t.item.value):(this.value="",o=null)};n.find("input").autocomplete({minLength:2,delay:0,source:(e,t)=>{let i=new RegExp($.ui.autocomplete.escapeRegex(e.term),"i");t(Object.values(r).filter((e=>i.test(e.name))).map((e=>({label:e.name,value:e._vueBinding}))))},select:onChange,focus:onChange,change:onChange}),n.on("click","button:eq(1)",(()=>{o&&!settingsRaw[t].includes(o)&&(settingsRaw[t].push(o),settingsRaw[t].sort(),updateSettingsFromState(),updateList())})),n.on("click","button:eq(0)",(()=>{o&&settingsRaw[t].includes(o)&&(settingsRaw[t].splice(settingsRaw[t].indexOf(o),1),settingsRaw[t].sort(),updateSettingsFromState(),updateList())})),updateList()}function addInputCallbacks(e,t){return e.on("change",(function(){let e=getRealNumber(this.value);isNaN(e)||(settingsRaw[t]=e,updateSettingsFromState()),$(".script_"+t).val(settingsRaw[t])})).on("click",{label:`Number (${t})`,name:t,type:"number"},openOverrideModal)}function addTableInput(e,t){e.addClass("script_bg_"+t+(settingsRaw.overrides[t]?" inactive-row":"")).append(addInputCallbacks($(`<input class="script_${t}" type="text" class="input is-small" style="height: 25px; width:100%" value="${settingsRaw[t]}"/>`),t))}function addToggleCallbacks(e,t){return e.on("change","input",(function(){settingsRaw[t]=this.checked,updateSettingsFromState(),$(".script_"+t).prop("checked",settingsRaw[t])})).on("click",{label:`Toggle (${t})`,name:t,type:"boolean"},openOverrideModal)}function addTableToggle(e,t){e.addClass("script_bg_"+t+(settingsRaw.overrides[t]?" inactive-row":"")).append(addToggleCallbacks($(`\n          <label tabindex="0" class="switch" style="position:absolute; margin-top: 8px; margin-left: 10px;">\n            <input class="script_${t}" type="checkbox"${settingsRaw[t]?" checked":""}>\n            <span class="check" style="height:5px; max-width:15px"></span>\n            <span style="margin-left: 20px;"></span>\n          </label>`),t))}function buildTableLabel(e,t="",i="has-text-info"){return $(`<span class="${i}" title="${t}" >${e}</span>`)}function resetCheckbox(){Array.from(arguments).forEach((e=>$(".script_"+e).prop("checked",settingsRaw[e])))}function buildGeneralSettings(){buildSettingsSection("general","General",(()=>{resetGeneralSettings(!0),updateSettingsFromState(),updateGeneralSettingsContent(),removeActiveTargetsUI(),removePrestigeFromTopBar(),resetCheckbox("masterScriptToggle","showSettings","autoPrestige","displayPrestigeTypeInTopBar","displayTotalDaysTypeInTopBar")}),updateGeneralSettingsContent),buildActiveTargetsUI()}function updateGeneralSettingsContent(){let e=document.documentElement.scrollTop||document.body.scrollTop,t=$("#script_generalContent");t.empty().off("*"),addSettingsNumber(t,"tickRate","Script tick rate","Script runs once per this amount of game ticks. Game tick every 250ms, thus with rate 4 script will run once per second. You can set it lower to make script act faster, or increase it if you have performance issues. Tick rate should be a positive integer."),addSettingsToggle(t,"tickSchedule","Schedule script ticks","When enabled script will schedule its ticks to run after game ticks, instead of executing both at once. Splitting of long task allows browser to update UI in between of game and script ticks, making game run smoother, but less throttling-proof - that can make tick rate float inconsistently."),addSettingsHeader1(t,"Prioritization");let i=[{val:"ignore",label:"Ignore",hint:"Does nothing"},{val:"save",label:"Save",hint:"Missing resources preserved from using."},{val:"req",label:"Request",hint:"Production and buying of missing resources will be prioritized."},{val:"savereq",label:"Request & Save",hint:"Missing resources will be prioritized, and preserved from using."}];addSettingsToggle(t,"useDemanded","Allow using prioritized resources for crafting","When disabled script won't make craftables out of prioritized resources in foundry and factory."),addSettingsToggle(t,"researchRequest","Prioritize resources for Pre-MAD researches","Readjust trade routes and production to resources required for unlocked and affordable researches. Works only with no active triggers, or queue. Missing resources will have 100 priority where applicable(autoMarket, autoGalaxyMarket, autoFactory, autoMiningDroid), or just 'top priority' where not(autoTax, autoCraft, autoCraftsmen, autoQuarry, autoMine, autoExtractor, autoSmelter)."),addSettingsToggle(t,"researchRequestSpace","Prioritize resources for Space+ researches","Readjust trade routes and production to resources required for unlocked and affordable researches. Works only with no active triggers, or queue. Missing resources will have 100 priority where applicable(autoMarket, autoGalaxyMarket, autoFactory, autoMiningDroid), or just 'top priority' where not(autoTax, autoCraft, autoCraftsmen, autoQuarry, autoMine, autoExtractor, autoSmelter)."),addSettingsToggle(t,"missionRequest","Prioritize resources for missions","Readjust trade routes and production to resources required for unlocked and affordable missions. Missing resources will have 100 priority where applicable(autoMarket, autoGalaxyMarket, autoFactory, autoMiningDroid), or just 'top priority' where not(autoTax, autoCraft, autoCraftsmen, autoQuarry, autoMine, autoExtractor, autoSmelter)."),addSettingsSelect(t,"prioritizeQueue","Queue","Alter script behaviour to speed up queued items, prioritizing missing resources.",i),addSettingsSelect(t,"prioritizeTriggers","Triggers","Alter script behaviour to speed up triggers, prioritizing missing resources.",i),addSettingsSelect(t,"prioritizeUnify","Unification","Alter script behaviour to speed up unification, prioritizing money required to purchase foreign cities.",i),addSettingsSelect(t,"prioritizeOuterFleet","Ship Yard Blueprint (The True Path)","Alter script behaviour to assist fleet building, prioritizing resources required for current design of ship.",i),addSettingsHeader1(t,"Auto clicker"),addSettingsToggle(t,"buildingAlwaysClick","Always autoclick resources","By default script will click only during early stage of autoBuild, to bootstrap production. With this toggled on it will continue clicking forever"),addSettingsNumber(t,"buildingClickPerTick","Maximum clicks per tick","Number of clicks performed at once, each script tick. Will not ever click more than needed to fill storage."),addSettingsHeader1(t,"Additional UI"),addSettingsToggle(t,"activeTargetsUI","Display detailed queue","Add UI in right column to display currently active queued buildings, technologies, and triggers and their resources.",buildActiveTargetsUI,removeActiveTargetsUI),addSettingsToggle(t,"displayPrestigeTypeInTopBar","Display prestige type in top bar","Show the currently selected prestige type in the top bar",updatePrestigeInTopBar,updatePrestigeInTopBar),addSettingsToggle(t,"displayTotalDaysTypeInTopBar","Display total days in top bar","Show the total days next to this year's days",updateTotalDaysInTopBar,updateTotalDaysInTopBar),addSettingsHeader1(t,"Misc"),addSettingsString(t,"scriptSettingsExportFilename","Export Filename","Configures the filename used when using the 'Script Settings as File' button. This is useful if you keep multiple different profiles around."),addSettingsHeader1(t,"Experimental"),addSettingsToggle(t,"performanceHackAvoidDrawTech","Enable performance hack: drawTech avoidance","Enables very experimental and potentially buggy performance hacks designed to avoid excessive redraws of the research tab, which appears to be very CPU-intensive to redraw. This improves game performance when buying lots of buildings, but also causes potentially limitless amounts of bugs as important game code may be skipped."),document.documentElement.scrollTop=document.body.scrollTop=e}function buildPrestigeSettings(e,t){buildSettingsSection2(e,t,"prestige","Prestige",(()=>{resetPrestigeSettings(!0),updateSettingsFromState(),updatePrestigeSettingsContent(t)}),updatePrestigeSettingsContent)}function updatePrestigeSettingsContent(e){let t=document.documentElement.scrollTop||document.body.scrollTop,i=$(`#script_${e}prestigeContent`);i.empty().off("*"),i.append(`\n          <div style="display: inline-block; width: 90%; text-align: left; margin-bottom: 10px;">\n            <label>\n              <span>Prestige Type</span>\n              <select class="script_prestigeType" style="height: 18px; width: 150px; float: right;">\n                ${prestigeOptions}\n              </select>\n            </label>\n          </div>`),i.find(".script_prestigeType").val(settingsRaw.prestigeType).on("change",(function(){if(isPrestigeAllowed()){let e="";"mad"===this.value&&haveTech("mad")?e="MAD has already been researched.":"bioseed"===this.value&&isBioseederPrestigeAvailable()?e="Required probes are built, and bioseeder ship is ready to launch.":"cataclysm"===this.value&&isCataclysmPrestigeAvailable()?e="Dial It To 11 is unlocked. You may prestige immediately.":"whitehole"===this.value&&isWhiteholePrestigeAvailable()?e="Required mass is reached, and exotic infusion is unlocked.":"apocalypse"===this.value&&isApocalypsePrestigeAvailable()?e="Protocol 66 is unlocked.":"ascension"===this.value&&(game.global.race.witch_hunter?isWitchAscensionPrestigeAvailable():isAscensionPrestigeAvailable())?e=game.global.race.witch_hunter?"Absorption Chamber is built and ready.":"Ascension machine is built and powered.":"demonic"===this.value&&(game.global.race.witch_hunter?isWitchAscensionPrestigeAvailable(!0):isDemonicPrestigeAvailable())?e=game.global.race.witch_hunter?"Absorption Chamber is built and ready.":"Required floor is reached, and demon lord is already dead.":"terraform"===this.value&&buildings.RedTerraform.isUnlocked()?e="Terraformer is built and powered.":"matrix"===this.value&&buildings.TauStarBluePill.isUnlocked()?e="Matrix is built and powered.":"retire"===this.value&&buildings.TauGas2MatrioshkaBrain.count>=1e3&&buildings.TauGas2IgniteGasGiant.isUnlocked()&&buildings.TauGas2IgniteGasGiant.isAffordable()?e="Ignition Device is built and ready.":"eden"===this.value&&buildings.TauStarEden.isUnlocked()&&buildings.TauStarEden.isAffordable()&&(e="Garden Of Eden is ready to build."),""!==e&&(e+=" You may prestige immediately. Are you sure you want to toggle this prestige?",confirm(e)||(this.value="none"))}settingsRaw.prestigeType=this.value,$(".script_prestigeType").val(settingsRaw.prestigeType),state.goal="Standard",updateSettingsFromState()})).on("click",{label:"Prestige Type (prestigeType)",name:"prestigeType",type:"select",options:prestigeOptions},openOverrideModal),addSettingsToggle(i,"prestigeWaitAT","Disable prestiging under Accelerated Time","Delay reset until all accelerated time will be used, to avoid wasting it"),addSettingsToggle(i,"prestigeMADIgnoreArpa","Ignore early game A.R.P.A.","Disables building any A.R.P.A. projects until MAD is researched, or rival have appeared"),addSettingsToggle(i,"prestigeBioseedConstruct","Ignore useless buildings","Space Dock, Bioseeder Ship and Probes will be constructed only when Bioseed prestige enabled. World Collider won't be constructed during Bioseed. Jump Ship won't be constructed during Whitehole. Stellar Engine won't be constucted during Vacuum Collapse. Mana Syphon won't be constructed during Witch Hunter's Ascension and Demonic Infusion."),addSettingsHeader1(i,"Mutual Assured Destruction"),addSettingsToggle(i,"prestigeMADWait","Wait for maximum population","Wait for maximum population and soldiers to maximize plasmids gain"),addSettingsNumber(i,"prestigeMADPopulation","Required population","Required number of workers and soldiers before performing MAD reset"),addSettingsHeader1(i,"Bioseed"),addSettingsNumber(i,"prestigeBioseedProbes","Required probes","Required number of probes before launching bioseeder ship"),addSettingsNumber(i,"prestigeGECK","Required G.E.C.K","Required number of G.E.C.K. for Bioseed. Unlike any other buildings G.E.C.K. won't ever be constructed during inappropriate runs, or above this number. To prevent losing plasmids. It can, however, be built with triggers - you should not build G.E.C.K with triggers, unless you absolutely sure you know what you're doing."),addSettingsHeader1(i,"Whitehole"),addSettingsToggle(i,"prestigeWhiteholeSaveGems","Save up Soul Gems for reset","Save up enough Soul Gems for reset, only excess gems will be used. This option does not affect triggers."),addSettingsNumber(i,"prestigeWhiteholeMinMass","Minimum solar mass for reset","Required minimum solar mass of blackhole before prestiging. Script do not stabilize on blackhole run, this number will need to be reached naturally"),addSettingsHeader1(i,"Ascension"),addSettingsToggle(i,"prestigeAscensionPillar","Wait for Pillar","Wait for Pillar before ascending, unless it was done earlier"),addSettingsHeader1(i,"Demonic Infusion"),addSettingsNumber(i,"prestigeDemonicFloor","Minimum spire floor for reset","Perform reset after climbing up to this spire floor"),addSettingsNumber(i,"prestigeDemonicPotential","Maximum mech potential for reset","Perform reset only if current mech team potential below given amount. Full bay of best mechs will have `1` potential. This allows to postpone reset if your team is still good after reaching target floor, and can quickly clear another floor"),addSettingsToggle(i,"prestigeDemonicBomb","Use Dark Energy Bomb","Kill Demon Lord with Dark Energy Bomb"),addSettingsHeader1(i,"Matrix"),addSettingsSelect(i,"prestigeVaxStrat","Vaccination Strategy","Alter script behaviour to speed up queued items, prioritizing missing resources.",[{val:"none",label:"None",hint:"Do not select strategy"},{val:"strat1",label:game.loc("tech_vax_strat1"),hint:game.loc("tech_vax_strat1_effect")},{val:"strat2",label:game.loc("tech_vax_strat2"),hint:game.loc("tech_vax_strat2_effect")},{val:"strat3",label:game.loc("tech_vax_strat3"),hint:game.loc("tech_vax_strat3_effect")},{val:"strat4",label:game.loc("tech_vax_strat4"),hint:game.loc("tech_vax_strat4_effect")}]),document.documentElement.scrollTop=document.body.scrollTop=t}function buildGovernmentSettings(e,t){buildSettingsSection2(e,t,"government","Government",(()=>{resetGovernmentSettings(!0),updateSettingsFromState(),updateGovernmentSettingsContent(t),resetCheckbox("autoTax","autoGovernment")}),updateGovernmentSettingsContent)}function updateGovernmentSettingsContent(e){let t=document.documentElement.scrollTop||document.body.scrollTop,i=$(`#script_${e}governmentContent`);i.empty().off("*"),addSettingsNumber(i,"generalRequestedTaxRate","Forced tax rate","Set tax rate as close to this value as possible, ignores morale. Set to -1 to disable this option"),addSettingsNumber(i,"generalMinimumTaxRate","Minimum allowed tax rate","Minimum tax rate for autoTax. Will still go below this amount if money storage is full"),addSettingsNumber(i,"generalMinimumMorale","Minimum allowed morale","Use this to set a minimum allowed morale. Remember that less than 100% can cause riots and weather can cause sudden swings"),addSettingsNumber(i,"generalMaximumMorale","Maximum allowed morale","Use this to set a maximum allowed morale. The tax rate will be raised to lower morale to this maximum");let a=[{val:"none",label:"None",hint:"Do not select government"},...Object.keys(GovernmentManager.Types).filter((e=>"anarchy"!==e)).map((e=>({val:e,label:game.loc(`govern_${e}`),hint:game.loc(`govern_${e}_desc`)})))];addSettingsSelect(i,"govInterim","Interim Government","Temporary low tier government until you research other governments",a),addSettingsSelect(i,"govFinal","Second Government","Second government choice, chosen once becomes available. Can be the same as above",a),addSettingsSelect(i,"govSpace","Space Government","Government for bioseed+. Chosen once you researched Quantum Manufacturing. Can be the same as above",a),addSettingsSelect(i,"govGovernor","Governor","Chosen governor will be appointed.",[{val:"none",label:"None",hint:"Do not select governor"},...governors.map((e=>({val:e,label:game.loc(`governor_${e}`),hint:game.loc(`governor_${e}_desc`)})))]),document.documentElement.scrollTop=document.body.scrollTop=t}function buildEvolutionSettings(){buildSettingsSection("evolution","Evolution",(()=>{resetEvolutionSettings(!0),updateSettingsFromState(),updateEvolutionSettingsContent(),resetCheckbox("autoEvolution")}),updateEvolutionSettingsContent)}function updateRaceWarning(){let e=races[settingsRaw.userEvolutionTarget];if(e&&""!==e.getCondition()){let t=e.getHabitability();1===t?$("#script_race_warning").html(`<span class="has-text-success">This race have special requirements: ${e.getCondition()}. This condition is met.</span>`):0===t?$("#script_race_warning").html(`<span class="has-text-danger">Warning! This race have special requirements: ${e.getCondition()}. This condition is not met.</span>`):$("#script_race_warning").html(`<span class="has-text-warning">Warning! This race have special requirements: ${e.getCondition()}. This condition is bypassed. Race will have ${100-100*t}% penalty.</span>`)}else $("#script_race_warning").empty()}function updateEvolutionSettingsContent(){let e=document.documentElement.scrollTop||document.body.scrollTop,t=$("#script_evolutionContent");t.empty().off("*"),addSettingsSelect(t,"userUniverseTargetName","Target Universe","Chosen universe will be automatically selected after appropriate reset",[{val:"none",label:"None",hint:"Wait for user selection"},...universes.map((e=>({val:e,label:game.loc(`universe_${e}`),hint:game.loc(`universe_${e}_desc`)})))]),addSettingsSelect(t,"userPlanetTargetName","Target Planet","Chosen planet will be automatically selected after appropriate reset. Warning! Script ignores changes made by G.E.C.K., you need to select planet manually after using it.",[{val:"none",label:"None",hint:"Wait for user selection"},{val:"habitable",label:"Most habitable",hint:"Picks most habitable planet, based on biome and trait"},{val:"achieve",label:"Most achievements",hint:"Picks planet with most unearned achievements. Takes in account extinction achievements for planet exclusive races, and greatness achievements for planet biome, trait, and exclusive genus."},{val:"weighting",label:"Highest weighting",hint:"Picks planet with highest weighting. Should be configured in Planet Weighting Settings section."}]),addSettingsSelect(t,"userEvolutionTarget","Target Race","Chosen race will be automatically selected during next evolution",[{val:"auto",label:"Auto Achievements",hint:"Picks race giving most achievements upon completing run. Tracks all achievements limited to specific races and resets. Races unique to current planet biome are prioritized, when available."},...Object.values(races).map((e=>({val:e.id,label:e.name,hint:e.desc})))]).on("change","select",(()=>{state.evolutionTarget=null,updateRaceWarning()})),t.append('<div><span id="script_race_warning"></span></div>'),updateRaceWarning(),addSettingsToggle(t,"evolutionAutoUnbound","Allow unbound races","Allow Auto Achievement to pick biome restricted races on unsuited biomes, after getting unbound."),addSettingsToggle(t,"evolutionBackup","Soft Reset","Perform soft resets until you'll get chosen race. Has no effect after getting mass extinction perk.");for(let a=0;a<challenges.length;a++){let e=challenges[a];addSettingsToggle(t,`challenge_${e[0].id}`,e.map((e=>game.loc(`evo_challenge_${e.id}`))).join(" | "),e.map((e=>game.loc(`evo_challenge_${e.id}_effect`))).join("&#xA;"))}addStandardHeading(t,"Evolution Queue"),addSettingsToggle(t,"evolutionQueueEnabled","Queue Enabled","When enabled script with evolve with queued settings, from top to bottom. During that script settings will be overriden with settings stored in queue. Queued target will be removed from list after evolution."),addSettingsToggle(t,"evolutionQueueRepeat","Repeat Queue","When enabled applied evolution targets will be moved to the end of queue, instead of being removed"),t.append(`\n          <div style="margin-top: 5px; display: inline-block; width: 90%; text-align: left;">\n            <label for="script_evolution_prestige">Prestige for new evolutions:</label>\n            <select id="script_evolution_prestige" style="height: 18px; width: 150px; float: right;">\n              <option value = "auto" title = "Inherited from current Prestige Settings">Current Prestige</option>\n              ${prestigeOptions}\n            </select>\n          </div>\n          <div style="margin-top: 10px;">\n            <button id="script_evlution_add" class="button">Add New Evolution</button>\n          </div>`),$("#script_evlution_add").on("click",addEvolutionSetting),t.append('\n          <table style="width:100%">\n            <tr>\n              <th class="has-text-warning" style="width:25%">Race</th>\n              <th class="has-text-warning" style="width:70%" title="Settings applied before evolution. Changed settings not limited to initial template, you can manually add any script options to JSON.">Settings</th>\n              <th style="width:5%"></th>\n            </tr>\n            <tbody id="script_evolutionQueueTable"></tbody>\n          </table>');let i=$("#script_evolutionQueueTable");for(let a=0;a<settingsRaw.evolutionQueue.length;a++)i.append(buildEvolutionQueueItem(a));i.sortable({items:"tr:not(.unsortable)",helper:sorterHelper,update:()=>{let e=i.sortable("toArray",{attribute:"value"});settingsRaw.evolutionQueue=e.map((e=>settingsRaw.evolutionQueue[e])),updateSettingsFromState(),updateEvolutionSettingsContent()}}),document.documentElement.scrollTop=document.body.scrollTop=e}function buildEvolutionQueueItem(e){let t=settingsRaw.evolutionQueue[e],i="",a="",r="",n="",o=races[t.userEvolutionTarget],l=t.challenge_junker||o===races.junker,u=t.challenge_sludge||o===races.sludge;const getRaceColor=e=>{let t=e.getHabitability();return 1===t?"has-text-info":0===t?"has-text-danger":"has-text-warning"};l&&u?(i="Valdi and Sludge can not be combined!",a="has-text-danger"):l||u?(i=`${l?races.junker.name:races.sludge.name}, `,o&&o!==races.junker&&o!==races.sludge?(i+=game.loc(`genelab_genus_${o.genus}`),a=getRaceColor(o)):(i+=game.loc("genelab_genus_fungi"),a=getRaceColor(races.shroomi))):"auto"===t.userEvolutionTarget?(i="Auto Achievements",a="has-text-advanced"):o?(i=o.name,a=getRaceColor(o)):(i="Unrecognized race!",a="has-text-danger");let c=$(`#settings a.dropdown-item:contains("${game.loc(game.global.settings.icon)}") svg`).clone();if(c.removeClass(),c.addClass("star"+getStarLevel(t)),"none"!==t.prestigeType){let e=prestigeTypes.find((e=>e.val===t.prestigeType));e?(r=`(${e.short_label??e.label})`,n="has-text-info"):(r="Unrecognized prestige!",n="has-text-danger")}let g=$(`\n          <tr id="script_evolution_${e}" value="${e}" class="script-draggable">\n            <td style="width:25%"><span class="${a}">${i}</span> <span class="${n}">${r}</span> ${c.prop("outerHTML")??getStarLevel(t)-1+"*"}</td>\n            <td style="width:70%"><textarea class="textarea">${JSON.stringify(t,null,4)}</textarea></td>\n            <td style="width:5%"><a class="button is-dark is-small" style="width: 26px; height: 26px"><span>X</span></a></td>\n          </tr>`);return g.find(".button").on("click",(()=>{settingsRaw.evolutionQueue.splice(e,1),updateSettingsFromState(),updateEvolutionSettingsContent()})),g.find(".textarea").on("change",(function(){try{let t=JSON.parse(this.value);settingsRaw.evolutionQueue[e]=t,updateSettingsFromState(),updateEvolutionSettingsContent()}catch(t){g.find("td:eq(0)").html(`<span class="has-text-danger">${t}</span>`)}})),g}function addEvolutionSetting(){let e={};for(let a=0;a<evolutionSettingsToStore.length;a++){let t=evolutionSettingsToStore[a],i=settingsRaw[t];e[t]=i}let t=$("#script_evolution_prestige").first().val();t&&"auto"!==t&&(e.prestigeType=t);let i=settingsRaw.evolutionQueue.push(e);updateSettingsFromState(),$("#script_evolutionQueueTable").append(buildEvolutionQueueItem(i-1))}function buildPlanetSettings(){buildSettingsSection("planet","Planet Weighting",(()=>{resetPlanetSettings(!0),updateSettingsFromState(),updatePlanetSettingsContent()}),updatePlanetSettingsContent)}function updatePlanetSettingsContent(){let e=document.documentElement.scrollTop||document.body.scrollTop,t=$("#script_planetContent");t.empty().off("*"),t.append('\n          <span>Planet Weighting = Biome Weighting + Trait Weighting + (Extras Intensity * Extras Weightings)</span>\n          <table style="width:100%">\n            <tr>\n              <th class="has-text-warning" style="width:20%">Biome</th>\n              <th class="has-text-warning" style="width:calc(40% / 3)">Weighting</th>\n              <th class="has-text-warning" style="width:20%">Trait</th>\n              <th class="has-text-warning" style="width:calc(40% / 3)">Weighting</th>\n              <th class="has-text-warning" style="width:20%">Extra</th>\n              <th class="has-text-warning" style="width:calc(40% / 3)">Weighting</th>\n            </tr>\n            <tbody id="script_planetTableBody"></tbody>\n          </table>');let i=$("#script_planetTableBody"),a="",r=Math.max(biomeList.length,traitList.length,extraList.length);for(let n=0;n<r;n++)a+=`<tr><td id="script_planet_${n}" style="width:20%"></td><td style="width:calc(40% / 3);border-right-width:1px"></td><td style="width:20%"></td><td style="width:calc(40% / 3);border-right-width:1px"></td><td style="width:20%"></td><td style="width:calc(40% / 3)"></td>/tr>`;i.append($(a));for(let n=0;n<r;n++){let e=$("#script_planet_"+n);n<biomeList.length?(e.append(buildTableLabel(game.loc("biome_"+biomeList[n]+"_name"))),e=e.next(),addTableInput(e,"biome_w_"+biomeList[n])):e=e.next(),e=e.next(),n<traitList.length?(e.append(buildTableLabel(0==n?"None":game.loc("planet_"+traitList[n]))),e=e.next(),addTableInput(e,"trait_w_"+traitList[n])):e=e.next(),e=e.next(),n<extraList.length&&(e.append(buildTableLabel(extraList[n])),e=e.next(),addTableInput(e,"extra_w_"+extraList[n]))}document.documentElement.scrollTop=document.body.scrollTop=e}function buildTriggerSettings(){buildSettingsSection("trigger","Trigger",(()=>{resetTriggerSettings(!0),updateSettingsFromState(),updateTriggerSettingsContent(),resetCheckbox("autoTrigger")}),updateTriggerSettingsContent)}function updateTriggerSettingsContent(){let e=document.documentElement.scrollTop||document.body.scrollTop,t=$("#script_triggerContent");t.empty().off("*"),t.append('<div style="margin-top: 10px;"><button id="script_trigger_add" class="button">Add New Trigger</button></div>'),$("#script_trigger_add").on("click",addTriggerSetting),t.append('\n          <table style="width:100%">\n            <tr>\n              <th class="has-text-warning" colspan="3">Requirement</th>\n              <th class="has-text-warning" colspan="5">Action</th>\n            </tr>\n            <tr>\n              <th class="has-text-warning" style="width:16%">Type</th>\n              <th class="has-text-warning" style="width:18%">Value</th>\n              <th class="has-text-warning" style="width:11%" title="Numerical variables compared to this value using \'>=\', boolean variables - using \'==\'. String variables not currently supported by triggers.">Result</th>\n              <th class="has-text-warning" style="width:16%">Type</th>\n              <th class="has-text-warning" style="width:18%">Id</th>\n              <th class="has-text-warning" style="width:11%">Count</th>\n              <th style="width:5%"></th>\n              <th style="width:5%"></th>\n            </tr>\n            <tbody id="script_triggerTableBody"></tbody>\n          </table>');let i=$("#script_triggerTableBody"),a="";for(let r=0;r<TriggerManager.priorityList.length;r++){const e=TriggerManager.priorityList[r];a+=`<tr id="script_trigger_${e.seq}" value="${e.seq}" class="script-draggable"><td style="width:16%"></td><td style="width:18%"></td><td style="width:11%"></td><td style="width:16%"></td><td style="width:18%"></td><td style="width:11%"></td><td style="width:5%"></td><td style="width:5%"><span class="script-lastcolumn"></span></td></tr>`}i.append($(a));for(let r=0;r<TriggerManager.priorityList.length;r++){const e=TriggerManager.priorityList[r];buildTriggerRequirementType(e),buildTriggerRequirementId(e),buildTriggerRequirementCount(e),buildTriggerActionType(e),buildTriggerActionId(e),buildTriggerActionCount(e),buildTriggerSettingsColumn(e)}i.sortable({items:"tr:not(.unsortable)",helper:sorterHelper,update:()=>{let e=i.sortable("toArray",{attribute:"value"});for(let t=0;t<e.length;t++)TriggerManager.getTrigger(parseInt(e[t])).priority=t;TriggerManager.sortByPriority(),updateSettingsFromState()}}),document.documentElement.scrollTop=document.body.scrollTop=e}function addTriggerSetting(){let e=TriggerManager.AddTrigger("ResearchUnlocked","tech-club",1,"research","tech-club",0);updateSettingsFromState();let t=$("#script_triggerTableBody"),i="";i+=`<tr id="script_trigger_${e.seq}" value="${e.seq}" class="script-draggable"><td style="width:16%"></td><td style="width:18%"></td><td style="width:11%"></td><td style="width:16%"></td><td style="width:18%"></td><td style="width:11%"></td><td style="width:5%"></td><td style="width:5%"><span class="script-lastcolumn"></span></td></tr>`,t.append($(i)),buildTriggerRequirementType(e),buildTriggerRequirementId(e),buildTriggerRequirementCount(e),buildTriggerActionType(e),buildTriggerActionId(e),buildTriggerActionCount(e),buildTriggerSettingsColumn(e)}function buildTriggerRequirementType(e){let t=$("#script_trigger_"+e.seq).children().eq(0);t.empty().off("*");let i=Object.entries(checkTypes).filter((t=>!overrideOnlyChecks.includes(t[0])||e.requirementType===t[0])).map((([e,t])=>`<option value="${e}" title="${t.desc}">${e.replace(/([A-Z])/g," $1").trim()}</option>`)).join(),a=$(`\n          <select style="width: 100%">\n            <option value = "chain" title = "This condition is met when above trigger is complete, always true for first trigger in list">Chain</option>\n            ${i}\n          </select>`);a.val(e.requirementType),t.append(a),a.on("change",(function(){e.updateRequirementType(this.value),buildTriggerRequirementId(e),buildTriggerRequirementCount(e),updateSettingsFromState()}))}function buildTriggerRequirementId(e){let t=$("#script_trigger_"+e.seq).children().eq(1);t.empty().off("*");let i=checkTypes[e.requirementType];i&&t.append(buildInputNode(i.arg,i.options,e.requirementId,(t=>{e.requirementId=t,e.complete=!1,updateSettingsFromState()})))}function buildTriggerRequirementCount(e){let t=$("#script_trigger_"+e.seq).children().eq(2);if(t.empty().off("*"),checkTypes[e.requirementType]){let i=retBools.includes(e.requirementType)?"boolean":"number";t.append(buildInputNode(i,null,e.requirementCount,(t=>{e.requirementCount=Number(t),e.complete=!1,updateSettingsFromState()})))}}function buildTriggerActionType(e){let t=$("#script_trigger_"+e.seq).children().eq(3);t.empty().off("*");let i=$('\n          <select style="width: 100%">\n            <option value = "research" title = "Research technology">Research</option>\n            <option value = "build" title = "Build buildings up to \'count\' amount">Build</option>\n            <option value = "arpa" title = "Build projects up to \'count\' amount">A.R.P.A.</option>\n          </select>');i.val(e.actionType),t.append(i),i.on("change",(function(){e.updateActionType(this.value),buildTriggerActionId(e),buildTriggerActionCount(e),updateSettingsFromState()}))}function buildTriggerActionId(e){let t=$("#script_trigger_"+e.seq).children().eq(4);t.empty().off("*");let i="research"===e.actionType?argType.research:"build"===e.actionType?argType.building:"arpa"===e.actionType?argType.project:null;i&&t.append(buildInputNode(i.arg,i.options,e.actionId,(t=>{e.actionId=t,e.complete=!1,updateSettingsFromState()})))}function buildTriggerActionCount(e){let t=$("#script_trigger_"+e.seq).children().eq(5);t.empty().off("*"),"build"!==e.actionType&&"arpa"!==e.actionType||t.append(buildInputNode("number",null,e.actionCount,(t=>{e.actionCount=Number(t),e.complete=!1,updateSettingsFromState()})))}function buildTriggerSettingsColumn(e){let t=$("#script_trigger_"+e.seq).children().eq(6);t.empty().off("*");let i=$('<a class="button is-dark is-small" style="width: 26px; height: 26px"><span>X</span></a>');t.append(i),i.on("click",(()=>{TriggerManager.RemoveTrigger(e.seq),updateSettingsFromState(),updateTriggerSettingsContent()}))}function buildActiveTargetsUI(){settingsRaw.activeTargetsUI&&!$("#active_targets-wrapper").length&&($("#buildQueue").before('\n                <div id="active_targets-wrapper" class="bldQueue vscroll right">\n                    <h2 class="has-text-success">Detailed Queue</h2>\n                    <div id="active_targets">\n                        <div class="target-type-box triggers" style="display: none;">\n                            <h2>Triggers</h2>\n                            <ul class="active_targets-list triggers"></ul>\n                        </div>\n                        <div class="target-type-box buildings" style="display: none;">\n                            <h2>Buildings</h2>\n                            <ul class="active_targets-list buildings"></ul>\n                        </div>\n                        <div class="target-type-box research" style="display: none;">\n                            <h2>Research</h2>\n                            <ul class="active_targets-list research"></ul>\n                        </div>\n                        <div class="target-type-box arpa" style="display: none;">\n                            <h2>A.R.P.A.</h2>\n                            <ul class="active_targets-list arpa"></ul>\n                        </div>\n                    </div>\n                </div>'),"function"==typeof ResizeObserver)&&new ResizeObserver((e=>{for(const t of e)if(t.borderBoxSize){const e=`${t.borderBoxSize[0].blockSize+$("#buildQueue").outerHeight()}px`;$("#msgQueue").css("max-height",`calc((100vh - ${e}) - 6rem)`)}})).observe($("#active_targets-wrapper")[0])}function removeActiveTargetsUI(){$("#active_targets-wrapper").remove()}function buildResearchSettings(){buildSettingsSection("research","Research",(()=>{resetResearchSettings(!0),updateSettingsFromState(),updateResearchSettingsContent(),resetCheckbox("autoResearch")}),updateResearchSettingsContent)}function updateResearchSettingsContent(){let e=document.documentElement.scrollTop||document.body.scrollTop,t=$("#script_researchContent");t.empty().off("*"),addSettingsSelect(t,"userResearchTheology_1","Target Theology 1","Theology 1 technology to research, have no effect after getting Transcendence perk",[{val:"auto",label:"Script Managed",hint:"Picks Anthropology for MAD prestige, and Fanaticism for others. Achieve-worthy combos are exception, on such runs Fanaticism will be always picked."},{val:"tech-anthropology",label:game.loc("tech_anthropology"),hint:game.loc("tech_anthropology_effect")},{val:"tech-fanaticism",label:game.loc("tech_fanaticism"),hint:game.loc("tech_fanaticism_effect")}]),addSettingsSelect(t,"userResearchTheology_2","Target Theology 2","Theology 2 technology to research",[{val:"auto",label:"Script Managed",hint:"Picks Deify for Ascension, Demonic Infusion, AI Apocalypse, Terraform, Matrix, Retirement and Eden prestiges, or Study for others prestiges"},{val:"tech-study",label:game.loc("tech_study"),hint:game.loc("tech_study_desc")},{val:"tech-deify",label:game.loc("tech_deify"),hint:game.loc("tech_deify_desc")}]),addSettingsList(t,"researchIgnore","Ignored researches","Listed researches won't be purchased without manual input, or user defined trigger. On top of this list script will also ignore some other special techs, such as Limit Collider, Dark Energy Bomb, Exotic Infusion, etc.",techIds),document.documentElement.scrollTop=document.body.scrollTop=e}function buildWarSettings(e,t){buildSettingsSection2(e,t,"war","Foreign Affairs",(()=>{resetWarSettings(!0),updateSettingsFromState(),updateWarSettingsContent(t),resetCheckbox("autoFight")}),updateWarSettingsContent)}function updateWarSettingsContent(e){let t=document.documentElement.scrollTop||document.body.scrollTop,i=$(`#script_${e}warContent`);i.empty().off("*"),addSettingsHeader1(i,"Foreign Powers"),addSettingsToggle(i,"foreignPacifist","Pacifist","Turns attacks off and on"),addSettingsToggle(i,"foreignUnification","Perform unification","Perform unification once all three powers are controlled. autoResearch should be enabled for this to work."),addSettingsToggle(i,"foreignOccupyLast","Occupy last foreign power","Occupy last foreign power once other two are controlled, and unification is researched to speed up unification. Disable if you want annex\\purchase achievements."),addSettingsToggle(i,"foreignForceSabotage","Sabotage foreign power when useful","Perform sabotage against current target if it's useful(power above 50), regardless of required power, and default action defined above"),addSettingsToggle(i,"foreignTrainSpy","Train spies","Train spies to use against foreign powers"),addSettingsNumber(i,"foreignSpyMax","Maximum spies","Maximum spies per foreign power"),addSettingsNumber(i,"foreignPowerRequired","Military Power to switch target","Switches to attack next foreign power once its power lowered down to this number. When exact numbers not know script tries to approximate it.");let a=[{val:"Ignore",label:"Ignore",hint:""},...Object.entries(SpyManager.Types).map((([e,t])=>({val:e,label:game.loc("civics_spy_"+t.id),hint:""}))),{val:"Occupy",label:"Occupy",hint:""}];addSettingsSelect(i,"foreignPolicyInferior","Inferior Power","Perform this against inferior foreign power, with military power equal or below given threshold. Complex actions includes required preparation - Annex and Purchase will incite and influence, Occupy will sabotage, until said options will be available.",a),addSettingsSelect(i,"foreignPolicySuperior","Superior Power","Perform this against superior foreign power, with military power above given threshold. Complex actions includes required preparation - Annex and Purchase will incite and influence, Occupy will sabotage, until said options will be available.",a),addSettingsSelect(i,"foreignPolicyRival","Rival Power (The True Path)","Perform this against rival foreign power.",[{val:"Ignore",label:"Ignore",hint:"Does nothing"},{val:"Influence",label:"Alliance",hint:"Influence rival up to best relations"},{val:"Sabotage",label:"War",hint:"Sabotage and plunder rival"},{val:"Betrayal",label:"Betrayal",hint:"Influence rival up to best relations, and start sabotaging. Once military power reached minimum - start plundering it"}]),addSettingsHeader1(i,"Campaigns"),addSettingsNumber(i,"foreignAttackLivingSoldiersPercent","Minimum percentage of alive soldiers for attack","Only attacks if you ALSO have the target battalion size of healthy soldiers available, so this setting will only take effect if your battalion does not include all of your soldiers"),addSettingsNumber(i,"foreignAttackHealthySoldiersPercent","Minimum percentage of healthy soldiers for attack","Set to less than 100 to take advantage of being able to heal more soldiers in a game day than get wounded in a typical attack"),addSettingsNumber(i,"foreignHireMercMoneyStoragePercent","Hire mercenary if money storage greater than percent","Hire a mercenary if remaining money after purchase will be greater than this percent"),addSettingsNumber(i,"foreignHireMercCostLowerThanIncome","OR if cost lower than money earned in X seconds","Combines with the money storage percent setting to determine when to hire mercenaries"),addSettingsNumber(i,"foreignHireMercDeadSoldiers","AND amount of dead soldiers above this number","Hire a mercenary only when current amount of dead soldiers above given number"),addSettingsNumber(i,"foreignMinAdvantage","Minimum advantage","Minimum advantage to launch campaign, ignored during ambushes. 100% chance to win will be reached at approximately(influenced by traits and selected campaign) 75% advantage."),addSettingsNumber(i,"foreignMaxAdvantage","Maximum advantage","Once campaign is selected, your battalion will be limited in size down to this advantage, reducing potential loses"),addSettingsNumber(i,"foreignMaxSiegeBattalion","Maximum siege battalion","Maximum battalion for siege campaign. Only try to siege if it's possible with up to given amount of soldiers. Siege is expensive, if you'll be doing it with too big battalion it might be less profitable than other combat campaigns. This option does not applied to unifying sieges, it affect only looting."),addSettingsSelect(i,"foreignProtect","Protect soldiers","Configures safety of attacks. This option does not applies to unifying sieges, it affect only looting.",[{val:"never",label:"Never",hint:"No additional limits to battalion size. Always send maximum soldiers allowed with current Max Advantage."},{val:"always",label:"Always",hint:"Limit battalions to sizes which will neven suffer any casualties in successful fights. You still will lose soldiers after failures, increasing minimum advantage can improve winning odds. This option designed to use with armored races favoring frequent attacks, with no approppriate build it may prevent any attacks from happening."},{val:"auto",label:"Auto",hint:"Tries to maximize total number of attacks, alternating between full and safe attacks based on soldiers condition, to get most from both healing and recruiting."}]),document.documentElement.scrollTop=document.body.scrollTop=t}function buildHellSettings(e,t){buildSettingsSection2(e,t,"hell","Hell",(()=>{resetHellSettings(!0),updateSettingsFromState(),updateHellSettingsContent(t),resetCheckbox("autoHell")}),updateHellSettingsContent)}function updateHellSettingsContent(e){let t=document.documentElement.scrollTop||document.body.scrollTop,i=$(`#script_${e}hellContent`);i.empty().off("*"),addSettingsHeader1(i,"Entering Hell"),addSettingsNumber(i,"hellHomeGarrison","Soldiers to stay out of hell","Home garrison maximum"),addSettingsNumber(i,"hellMinSoldiers","Minimum soldiers to be available for hell (pull out if below)","Don't enter hell if not enough soldiers, or get out if already in"),addSettingsNumber(i,"hellMinSoldiersPercent","Alive soldier percentage for entering hell","Don't enter hell if too many soldiers are dead, but don't get out"),addSettingsHeader1(i,"Hell Garrison"),addSettingsToggle(i,"hellAssaultReserve","Always reserve hell troops to Secure the Pit","With this option enabled hell soldiers will be put to fortress once Secure the Pit is unlocked, to fulfil its costs. It makes saving resources and setting triggers for it easier, at cost of less efficient use of manpower."),addSettingsNumber(i,"hellTargetFortressDamage","Target wall damage per siege (overestimates threat)","Actual damage will usually be lower due to patrols and drones"),addSettingsNumber(i,"hellLowWallsMulti","Garrison bolster factor for damaged walls","Multiplies target defense rating by this when close to 0 wall integrity, half as much increase at half integrity"),addSettingsHeader1(i,"Patrol Size"),addSettingsToggle(i,"hellHandlePatrolSize","Automatically adjust patrol size","Sets patrol attack rating based on current threat, lowers it depending on buildings, increases it to the minimum rating, and finally increases it based on dead soldiers. Handling patrol count has to be turned on."),addSettingsNumber(i,"hellPatrolMinRating","Minimum patrol attack rating","Will never go below this"),addSettingsNumber(i,"hellPatrolThreatPercent","Percent of current threat as base patrol rating","Demon encounters have a rating of 2 to 10 percent of current threat"),addSettingsNumber(i,"hellPatrolDroneMod","&emsp;Lower Rating for each active Predator Drone by","Predators reduce threat before patrols fight"),addSettingsNumber(i,"hellPatrolDroidMod","&emsp;Lower Rating for each active War Droid by","War Droids boost patrol attack rating by 1 or 2 soldiers depending on tech"),addSettingsNumber(i,"hellPatrolBootcampMod","&emsp;Lower Rating for each Bootcamp by","Bootcamps help regenerate soldiers faster"),addSettingsNumber(i,"hellBolsterPatrolRating","Increase patrol rating by up to this when soldiers die","Larger patrols are less effective, but also have fewer deaths"),addSettingsNumber(i,"hellBolsterPatrolPercentTop","&emsp;Start increasing patrol rating at this home garrison fill percent","This is the higher number"),addSettingsNumber(i,"hellBolsterPatrolPercentBottom","&emsp;Full patrol rating increase below this home garrison fill percent","This is the lower number"),addSettingsHeader1(i,"Attractors"),addSettingsNumber(i,"hellAttractorBottomThreat","&emsp;All Attractors on below this threat","Turn more and more attractors off when getting nearer to the top threat. Auto Power needs to be on for this to work."),addSettingsNumber(i,"hellAttractorTopThreat","&emsp;All Attractors off above this threat","Turn more and more attractors off when getting nearer to the top threat. Auto Power needs to be on for this to work."),document.documentElement.scrollTop=document.body.scrollTop=t}function buildFleetSettings(e,t){buildSettingsSection2(e,t,"fleet","Fleet",(()=>{resetFleetSettings(!0),updateSettingsFromState(),updateFleetSettingsContent(t),resetCheckbox("autoFleet")}),updateFleetSettingsContent)}function updateFleetSettingsContent(e){let t=document.documentElement.scrollTop||document.body.scrollTop,i=$(`#script_${e}fleetContent`);i.empty().off("*"),updateFleetAndromeda(i,e),updateFleetOuter(i,e),document.documentElement.scrollTop=document.body.scrollTop=t}function updateFleetOuter(e,t){addStandardHeading(e,"Outer Solar"),addSettingsSelect(e,"fleetOuterShips","Ships to build","Once avalable and affordable script will build ship of selected design, and send it to region with most piracy * weighting",[{val:"none",label:"None",hint:"Ship building disabled"},{val:"user",label:"Current design",hint:"Build whatever currently set in Ship Yard"},{val:"manual",label:"Manual mode",hint:"Assists accumulating resources needed for current blueprint, without building or deploying anything. It also might need tweaking prioritization settings to work."},{val:"custom",label:"Presets",hint:"Build ships with components configured below. All components need to be unlocked, and resulting design should have enough power"}]),addSettingsNumber(e,"fleetOuterCrew","Minimum idle soldiers","Only build ships when amount of idle soldiers above give number"),addSettingsToggle(e,"fleetExploreTau","Explore Tau Ceti","Send explorer to Tau Ceti"),addSettingsHeader1(e,"Fighter");for(let[r,n]of Object.entries(FleetManagerOuter.ShipConfig)){let t=n.map((e=>({val:e,label:game.loc(`outer_shipyard_${r}_${e}`)})));addSettingsSelect(e,`fleet_outer_${r}`,game.loc(`outer_shipyard_${r}`),"Preset ship component",t)}addSettingsHeader1(e,"Scout");for(let[r,n]of Object.entries(FleetManagerOuter.ShipConfig)){let t=n.map((e=>({val:e,label:game.loc(`outer_shipyard_${r}_${e}`)})));addSettingsSelect(e,`fleet_scout_${r}`,game.loc(`outer_shipyard_${r}`),"Preset ship component",t)}e.append(`\n          <table style="width:100%; text-align: left">\n            <tr>\n              <th class="has-text-warning" style="width:35%">Region</th>\n              <th class="has-text-warning" style="width:20%" title="Weighting determines order of ships dispatching, regions with higher weighting will be get ships sooner">Weighting</th>\n              <th class="has-text-warning" style="width:20%" title="Desired protection from syndicate, trying to reach 100%(1.0) defense with full uptime might be wasteful due to excesses and fluctuations">Defend</th>\n              <th class="has-text-warning" style="width:20%" title="Amounts of scouts to dispatch">Scouts</th>\n              <th style="width:5%"></th>\n            </tr>\n            <tbody id="script_${t}fleetOuterTable"></tbody>\n          </table>`);let i=$(`#script_${t}fleetOuterTable`),a="";for(let r of FleetManagerOuter.Regions)a+=`<tr><td id="script_${t}fleet_${r}" style="width:35%"></td><td style="width:20%"></td><td style="width:20%"></td><td style="width:20%"></td><td style="width:5%"></td></tr>`;i.append($(a));for(let r of FleetManagerOuter.Regions){let e=$(`#script_${t}fleet_${r}`),i=game.actions.space[r].info.name,a="function"==typeof i?i():i,n=r.split("_").slice(1).map((e=>e.charAt(0).toUpperCase()+e.slice(1))).join(" ");n!==a&&(n+=` (${a})`),e.append(buildTableLabel(n)),e=e.next(),addTableInput(e,"fleet_outer_pr_"+r),e=e.next(),addTableInput(e,"fleet_outer_def_"+r),e=e.next(),addTableInput(e,"fleet_outer_sc_"+r)}}function updateFleetAndromeda(e,t){addStandardHeading(e,"Andromeda"),addSettingsToggle(e,"fleetMaxCover","Maximize protection of prioritized systems","Adjusts ships distribution to fully supress piracy in prioritized regions. Some potential defense will be wasted, as it will use big ships to cover small holes, when it doesn't have anything fitting better. This option is not required: all your dreadnoughts still will be used even without this option."),addSettingsNumber(e,"fleetEmbassyKnowledge","Minimum knowledge for Embassy","Building Embassy increases maximum piracy up to 100, script won't Auto Build it until this knowledge cap is reached."),addSettingsNumber(e,"fleetAlienGiftKnowledge","Minimum knowledge for Alien Gift","Researching Alien Gift increases maximum piracy up to 250, script won't Auto Research it until this knowledge cap is reached."),addSettingsNumber(e,"fleetAlien2Knowledge","Minimum knowledge for Alien 2 Assault","Assaulting Alien 2 increases maximum piracy up to 500, script won't do it until this knowledge cap is reached. Regardless of set value it won't ever try to assault until you have big enough fleet to do it without loses."),addSettingsSelect(e,"fleetAlien2Loses","Alien 2 Mission","Assault Alien 2 when chosen outcome is achievable. You should really keep the default, unless you're speed running and want to take it out ASAP with losses.",[{val:"none",label:"No Losses",hint:"Min fleet strength 650. No losses."},{val:"suicide",label:"Suicide Mission",hint:"Attack as soon as we hit 400 fleet rating. There will be losses."}]),addSettingsSelect(e,"fleetChthonianLoses","Chthonian Mission","Assault Chthonian when chosen outcome is achievable. Mixed fleet formed to clear mission with minimum possible wasted ships, e.g. for low causlities it can sacriface 8 scouts, or 2 corvettes and 2 scouts, or frigate, and such. Whatever will be first available. It also takes in account perks and challenges, adjusting fleet accordingly.",[{val:"ignore",label:"Manual assault",hint:"Won't ever launch assault mission on Chthonian"},{val:"high",label:"High casualties",hint:"Unlock Chthonian using mixed fleet, high casualties (1250+ total fleet power, 500 will be lost)"},{val:"avg",label:"Average casualties",hint:"Unlock Chthonian using mixed fleet, average casualties (2500+ total fleet power, 160 will be lost)"},{val:"low",label:"Low casualties",hint:"Unlock Chthonian using mixed fleet, low casualties (4500+ total fleet power, 80 will be lost)"},{val:"frigate",label:"Frigate",hint:"Unlock Chthonian loosing Frigate ship(s) (4500+ total fleet power, suboptimal for banana\\instinct runs)"},{val:"dread",label:"Dreadnought",hint:"Unlock Chthonian with Dreadnought suicide mission"}]),e.append(`\n          <table style="width:100%; text-align: left">\n            <tr>\n              <th class="has-text-warning" style="width:95%">Region</th>\n              <th style="width:5%"></th>\n            </tr>\n            <tbody id="script_${t}fleetTableBody"></tbody>\n          </table>`);let i=$(`#script_${t}fleetTableBody`),a="",r=galaxyRegions.slice().sort(((e,t)=>settingsRaw["fleet_pr_"+e]-settingsRaw["fleet_pr_"+t]));for(let n=0;n<r.length;n++)a+=`<tr value="${r[n]}" class="script-draggable"><td id="script_${t}fleet_${r[n]}" style="width:95%"><td style="width:5%"><span class="script-lastcolumn"></span></td></tr>`;i.append($(a));for(let n=0;n<galaxyRegions.length;n++){let e=$(`#script_${t}fleet_${galaxyRegions[n]}`),i="gxy_alien1"===galaxyRegions[n]?"Alien 1 System":"gxy_alien2"===galaxyRegions[n]?"Alien 2 System":game.actions.galaxy[galaxyRegions[n]].info.name;e.append(buildTableLabel("function"==typeof i?i():i))}i.sortable({items:"tr:not(.unsortable)",helper:sorterHelper,update:()=>{let e=i.sortable("toArray",{attribute:"value"});for(let t=0;t<e.length;t++)settingsRaw["fleet_pr_"+e[t]]=t;updateSettingsFromState(),settings.showSettings&&t&&updateFleetSettingsContent("")}})}function buildMechSettings(){buildSettingsSection("mech","Mech & Spire",(()=>{resetMechSettings(!0),updateSettingsFromState(),updateMechSettingsContent(),resetCheckbox("autoMech"),removeMechInfo()}),updateMechSettingsContent)}function updateMechSettingsContent(){let e=document.documentElement.scrollTop||document.body.scrollTop,t=$("#script_mechContent");t.empty().off("*"),addSettingsSelect(t,"mechScrap","Scrap mechs","Configures what will be scrapped. Infernal mechs won't ever be scrapped.",[{val:"none",label:"None",hint:"Nothing will be scrapped automatically"},{val:"single",label:"Full bay",hint:"Scrap mechs only when mech bay is full, and script need more room to build mechs"},{val:"all",label:"All inefficient",hint:"Scrap all inefficient mechs immediately, using refounded resources to build better ones"},{val:"mixed",label:"Excess inefficient",hint:"Scrap as much inefficient mechs as possible, trying to preserve just enough of old mechs to fill bay to max by the time when next floor will be reached, calculating threshold based on progress speed and resources incomes"}]),addSettingsNumber(t,"mechScrapEfficiency","Scrap efficiency","Scrap mechs only when '((OldMechRefund / NewMechCost) / (OldMechDamage / NewMechDamage))' more than given number.&#xA;For the cases when exchanged mechs have same size(1/3 refund) it means that with 1 eff. script allowed to scrap mechs under 33.3%. 1.5 eff. - under 22.2%, 2 eff. - under 16.6%, 0.5 eff. - under 66.6%, 0 eff. - under 100%, etc.&#xA;Efficiency below '1' is not recommended, unless scrap set to 'Full bay', as it's a breakpoint when refunded resources can immidiately compensate lost damage, resulting with best damage growth rate.&#xA;Efficiency above '1' is useful to save resources for more desperate times, or to compensate low soul gems income."),addSettingsNumber(t,"mechCollectorValue","Collector value","Collectors can't be directly compared with combat mechs, having no firepower. Script will assume that one collector/size is equal to this amount of scout/size. If you feel that script is too reluctant to scrap old collectors - you can decrease this value. Or increase, to make them more persistant. 1 value - 50% collector equial to 50% scout, 0.5 value - 50% collector equial to 25% scout, 2 value - 50% collector equial to 100% scout, etc."),addSettingsSelect(t,"mechBuild","Build mechs","Configures what will be built. Infernal mechs won't ever be built.",[{val:"none",label:"None",hint:"Nothing will be build automatically"},{val:"random",label:"Random good",hint:"Build random mech with size chosen below, and best possible efficiency"},{val:"user",label:"Current design",hint:"Build whatever currently set in Mech Lab"}]);let i=[{val:"auto",label:"Damage Per Size",hint:"Select affordable mech with most damage per size on current floor"},{val:"gems",label:"Damage Per Gems",hint:"Select affordable mech with most damage per gems on current floor"},{val:"supply",label:"Damage Per Supply",hint:"Select affordable mech with most damage per supply on current floor"},...MechManager.Size.map((e=>({val:e,label:game.loc(`portal_mech_size_${e}`),hint:game.loc(`portal_mech_size_${e}_desc`)})))];addSettingsSelect(t,"mechSize","Preferred mech size","Size of random mechs",i),addSettingsSelect(t,"mechSizeGravity","Gravity mech size","Override preferred size with this on floors with high gravity",i),addSettingsSelect(t,"mechSpecial","Special mechs","Configures special equip",[{val:"always",label:"Always",hint:"Add special equipment to all mechs"},{val:"prefered",label:"Preferred",hint:"Add special equipment when it doesn't reduce efficiency for current floor"},{val:"random",label:"Random",hint:"Special equipment will have same chance to be added as all others"},{val:"never",label:"Never",hint:"Never add special equipment"}]),addSettingsNumber(t,"mechWaygatePotential","Maximum mech potential for Waygate","Fight Demon Lord only when current mech team potential below given amount. Full bay of best mechs will have `1` potential. Damage against Demon Lord does not affected by floor modifiers, all mechs always does 100% damage to him. Thus it's most time-efficient to fight him at times when mechs can't make good progress against regular monsters, and waiting for rebuilding. Auto Power needs to be on for this to work."),addSettingsNumber(t,"mechMinSupply","Minimum supply income","Build collectors if current supply income below given number"),addSettingsNumber(t,"mechMaxCollectors","Maximum collectors ratio","Limiter for above option, maximum space used by collectors. 0.5 means up to 50% of total bay capacity will be dedicated to collectors, and such."),addSettingsNumber(t,"mechSaveSupplyRatio","Save up supplies for next floor","Ratio of supplies to save up for next floor. Script will stop spending supplies on new mechs when it estimates that by the time when floor will be cleared you'll be under this supply ratio. That allows build bunch of new mechs suited for next enemy right after entering new floor. With 1 value script will try to start new floors with full supplies, 0.5 - with half, 0 - any, effectively disabling this option, etc."),addSettingsNumber(t,"mechScouts","Minimum scouts ratio","Scouts compensate terrain penalty of suboptimal mechs. Build them up to this ratio."),addSettingsToggle(t,"mechInfernalCollector","Build infernal collectors","Infernal collectors have incresed supply cost, and payback time, but becomes more profitable after ~30 minutes of uptime."),addSettingsToggle(t,"mechScoutsRebuild","Rebuild scouts","Scouts provides full bonus to other mechs even being infficient, this option prevent rebuilding them saving resources."),addSettingsToggle(t,"mechFillBay","Build smaller mechs when preferred not available","Build smaller mechs when preferred size can't be used due to low remaining bay space, or supplies cap"),addSettingsToggle(t,"buildingMechsFirst","Build spire buildings only with full bay","Fill mech bays up to current limit before spending resources on additional spire buildings"),addSettingsToggle(t,"mechBaysFirst","Scrap mechs only after building maximum bays","Scrap old mechs only when no new bays and purifiers can be builded"),addStandardHeading(t,"Mech Stats");let a=$('<div style="margin-top: 5px; display: inline-flex;"></div>');Object.entries({Compact:!0,Efficient:!0,Special:!0,Gravity:!1}).forEach((([e,t])=>{a.append(`\n              <label class="switch" title="This switch have no ingame effect, and used to configure calculator below">\n                <input id="script_mechStats${e}" type="checkbox"${t?" checked":""}>\n                <span class="check"></span><span style="margin-left: 10px;">${e}</span>\n              </label>`)})),a.append('\n          <label class="switch" title="This input have no ingame effect, and used to configure calculator below">\n            <input id="script_mechStatsScouts" class="input is-small" style="height: 25px; width: 50px" type="text" value="0">\n            <span style="margin-left: 10px;">Scouts</span>\n          </label>'),a.on("input",calculateMechStats),t.append(a),t.append('<table class="selectable"><tbody id="script_mechStatsTable"><tbody></table>'),calculateMechStats(),document.documentElement.scrollTop=document.body.scrollTop=e}function calculateMechStats(){let e='<td><span class="has-text-advanced">',t="</span></td>",i="",a=document.getElementById("script_mechStatsSpecial").checked,r=document.getElementById("script_mechStatsGravity").checked,n=document.getElementById("script_mechStatsEfficient").checked,o=parseInt(document.getElementById("script_mechStatsScouts").value)||0,l=document.getElementById("script_mechStatsCompact").checked?2:0,u=n?1:average(Object.values(MechManager.SmallChassisMod).reduce(((e,t)=>e.concat(Object.values(t))),[])),c=n?1:average(Object.values(MechManager.LargeChassisMod).reduce(((e,t)=>e.concat(Object.values(t))),[])),g=n?1:average(Object.values(poly.monsters).reduce(((e,t)=>e.concat(Object.values(t.weapon))),[])),d=[[""],["Damage Per Size"],["Damage Per Supply (New)"],["Damage Per Gems (New)"],["Damage Per Supply (Rebuild)"],["Damage Per Gems (Rebuild)"]];for(let p=0;p<MechManager.Size.length-1;p++){let e={size:MechManager.Size[p],equip:a?["special"]:[]},t=MechManager.getSizeMod(e,!1)*(r?MechManager.StatusMod.gravity(e):1)*poly.terrainRating(e,p<2?u:c,r?["gravity"]:[],o)*poly.weaponPower(e,g)*MechManager.SizeWeapons[e.size],[i,n,h]=MechManager.getMechCost(e,l),[b,y]=MechManager.getMechRefund(e,l);d[0].push(game.loc("portal_mech_size_"+e.size)),d[1].push((t/h*100).toFixed(4)),d[2].push((t/(n/1e5)*100).toFixed(4)),d[3].push((t/i*100).toFixed(4)),d[4].push((t/((n-y)/1e5)*100).toFixed(4)),d[5].push((t/(i-b)*100).toFixed(4))}d.forEach(((a,r)=>i+="<tr>"+(0===r?'<td><span class="has-text-warning">':e)+a.join("&nbsp;"+t+(0===r?e:'<td><span class="has-text-info">'))+t+"</tr>")),$("#script_mechStatsTable").html(i)}function buildEjectorSettings(){buildSettingsSection("ejector","Ejector, Supply & Nanite",(()=>{resetEjectorSettings(!0),updateSettingsFromState(),updateEjectorSettingsContent(),resetCheckbox("autoEject","autoSupply","autoNanite"),removeEjectToggles(),removeSupplyToggles()}),updateEjectorSettingsContent)}function updateEjectorSettingsContent(){let e=document.documentElement.scrollTop||document.body.scrollTop,t=$("#script_ejectorContent");t.empty().off("*");let i=[{val:"cap",label:"Capped",hint:"Use capped resources"},{val:"excess",label:"Excess",hint:"Use excess resources"},{val:"all",label:"All",hint:"Use all resources. This option can prevent script from progressing, and intended to use with additional conditions."},{val:"mixed",label:"Capped > Excess",hint:"Use capped resources first, switching to excess resources when capped alone is not enough."},{val:"full",label:"Capped > Excess > All",hint:"Use capped first, then excess, then everything else. Same as 'All' option can be potentialy dungerous."}],a="Configures threshold when script will be allowed to use resources. With any option script will try to use most expensive of allowed resources within selected group. Craftables, when enabled, always use excess amount as threshold, having no cap.";addSettingsSelect(t,"ejectMode","Eject mode",a,i),addSettingsSelect(t,"supplyMode","Supply mode",a,i),addSettingsSelect(t,"naniteMode","Nanite mode",a,i),addSettingsToggle(t,"prestigeWhiteholeStabiliseMass","Stabilize blackhole","Stabilizes the blackhole with exotic materials, disabled on whitehole runs"),addSettingsNumber(t,"prestigeWhiteholeStabiliseCooldown","Cooldown between stabilizes","Waits this many seconds between stabilizes. Stabilizing too frequently may cause significant lag in late game due to frequent full page redraws. Set to 0 to disable cooldown."),t.append('\n          <table style="width:100%">\n            <tr>\n              <th class="has-text-warning" style="width:20%">Resource</th>\n              <th class="has-text-warning" style="width:20%">Atomic Mass</th>\n              <th class="has-text-warning" style="width:10%">Eject</th>\n              <th class="has-text-warning" style="width:10%">Nanite</th>\n              <th class="has-text-warning" style="width:30%">Supply Value</th>\n              <th class="has-text-warning" style="width:10%">Supply</th>\n            </tr>\n            <tbody id="script_ejectorTableBody"></tbody>\n          </table>');let r=$("#script_ejectorTableBody"),n="",o=[];for(let l in resources){let e=resources[l];(EjectManager.isConsumable(e)||SupplyManager.isConsumable(e)||NaniteManager.isConsumable(e))&&(o.push(e),n+=`<tr><td id="script_eject_${e.id}" style="width:20%"></td><td style="width:20%"></td><td style="width:10%"></td><td style="width:10%"></td><td style="width:30%"></td><td style="width:10%"></td></tr>`)}r.append($(n));for(let l=0;l<o.length;l++){let e=o[l],t=$("#script_eject_"+e.id),i=e===resources.Elerium||e===resources.Infernite?"has-text-caution":e.isCraftable()?"has-text-danger":e.is.tradable?"has-text-info":"has-text-advanced";t.append(buildTableLabel(e.name,"",i)),t=t.next(),e.atomicMass>0&&t.append(`<span class="mass"><span class="has-text-warning">${e.atomicMass}</span> kt</span>`),t=t.next(),EjectManager.isConsumable(e)&&addTableToggle(t,"res_eject"+e.id),t=t.next(),NaniteManager.isConsumable(e)&&addTableToggle(t,"res_nanite"+e.id),SupplyManager.isConsumable(e)&&(t=t.next(),t.append(`<span class="mass">Export <span class="has-text-caution">${SupplyManager.supplyOut(e.id)}</span>, Gain <span class="has-text-success">${SupplyManager.supplyIn(e.id)}</span></span>`),t=t.next(),addTableToggle(t,"res_supply"+e.id))}document.documentElement.scrollTop=document.body.scrollTop=e}function buildMarketSettings(){buildSettingsSection("market","Market",(()=>{resetMarketSettings(!0),updateSettingsFromState(),updateMarketSettingsContent(),resetCheckbox("autoMarket","autoGalaxyMarket"),removeMarketToggles()}),updateMarketSettingsContent)}function updateMarketSettingsContent(){let e=document.documentElement.scrollTop||document.body.scrollTop,t=$("#script_marketContent");t.empty().off("*"),addSettingsNumber(t,"minimumMoney","Manual trade minimum money","Minimum money to keep after bulk buying"),addSettingsNumber(t,"minimumMoneyPercentage","Manual trade minimum money percentage","Minimum percentage of money to keep after bulk buying"),addSettingsNumber(t,"tradeRouteMinimumMoneyPerSecond","Trade minimum money /s","Uses the highest per second amount of these two values. Will trade for resources until this minimum money per second amount is hit"),addSettingsNumber(t,"tradeRouteMinimumMoneyPercentage","Trade minimum money percentage /s","Uses the highest per second amount of these two values. Will trade for resources until this percentage of your money per second amount is hit"),addSettingsToggle(t,"tradeRouteSellExcess","Sell excess resources","With this option enabled script will be allowed to sell resources above amounts needed for constructions or researches, without it script sell only capped resources. As side effect boughts will also be limited to that amounts, to avoid 'buy up to cap -> sell excess' loops."),t.append('\n          <table style="width:100%">\n            <tr>\n              <th class="has-text-warning" colspan="1"></th>\n              <th class="has-text-warning" colspan="4">Manual Trades</th>\n              <th class="has-text-warning" colspan="4">Trade Routes</th>\n              <th class="has-text-warning" colspan="1"></th>\n            </tr>\n            <tr>\n              <th class="has-text-warning" style="width:15%">Resource</th>\n              <th class="has-text-warning" style="width:10%">Buy</th>\n              <th class="has-text-warning" style="width:10%">Ratio</th>\n              <th class="has-text-warning" style="width:10%">Sell</th>\n              <th class="has-text-warning" style="width:10%">Ratio</th>\n              <th class="has-text-warning" style="width:10%">In</th>\n              <th class="has-text-warning" style="width:10%">Away</th>\n              <th class="has-text-warning" style="width:10%">Weighting</th>\n              <th class="has-text-warning" style="width:10%">Priority</th>\n              <th style="width:5%"></th>\n            </tr>\n            <tbody id="script_marketTableBody"></tbody>\n          </table>');let i=$("#script_marketTableBody"),a="";for(let r=0;r<MarketManager.priorityList.length;r++){const e=MarketManager.priorityList[r];a+=`<tr value="${e.id}" class="script-draggable"><td id="script_market_${e.id}" style="width:15%"></td><td style="width:10%"></td><td style="width:10%"></td><td style="width:10%"></td><td style="width:10%;border-right-width:1px"></td><td style="width:10%"></td><td style="width:10%"></td><td style="width:10%"></td><td style="width:10%"></td><td style="width:5%"><span class="script-lastcolumn"></span></td></tr>`}i.append($(a));for(let r=0;r<MarketManager.priorityList.length;r++){const e=MarketManager.priorityList[r];let t=$("#script_market_"+e.id);t.append(buildTableLabel(e.name)),t=t.next(),addTableToggle(t,"buy"+e.id),t=t.next(),addTableInput(t,"res_buy_r_"+e.id),t=t.next(),addTableToggle(t,"sell"+e.id),t=t.next(),addTableInput(t,"res_sell_r_"+e.id),t=t.next(),addTableToggle(t,"res_trade_buy_"+e.id),t=t.next(),addTableToggle(t,"res_trade_sell_"+e.id),t=t.next(),addTableInput(t,"res_trade_w_"+e.id),t=t.next(),addTableInput(t,"res_trade_p_"+e.id)}i.sortable({items:"tr:not(.unsortable)",helper:sorterHelper,update:()=>{let e=i.sortable("toArray",{attribute:"value"});for(let t=0;t<e.length;t++)settingsRaw["res_buy_p_"+e[t]]=t;MarketManager.sortByPriority(),updateSettingsFromState()}}),addStandardHeading(t,"Galaxy Trades"),addSettingsNumber(t,"marketMinIngredients","Minimum materials to preserve","Galaxy Market will buy resources only when all selling materials above given ratio"),t.append('\n          <table style="width:100%">\n            <tr>\n              <th class="has-text-warning" style="width:30%">Buy</th>\n              <th class="has-text-warning" style="width:30%">Sell</th>\n              <th class="has-text-warning" style="width:20%">Weighting</th>\n              <th class="has-text-warning" style="width:20%">Priority</th>\n            </tr>\n            <tbody id="script_marketGalaxyTableBody"></tbody>\n          </table>'),i=$("#script_marketGalaxyTableBody"),a="";for(let r=0;r<poly.galaxyOffers.length;r++)a+=`<tr><td id="script_market_galaxy_${r}" style="width:30%"><td style="width:30%"></td></td><td style="width:20%"></td><td style="width:20%"></td></tr>`;i.append($(a));for(let r=0;r<poly.galaxyOffers.length;r++){let e=poly.galaxyOffers[r],t=resources[e.buy.res],i=resources[e.sell.res],a=$("#script_market_galaxy_"+r);a.append(buildTableLabel(t.name,"has-text-success")),a=a.next(),a.append(buildTableLabel(i.name,"has-text-danger")),a=a.next(),addTableInput(a,"res_galaxy_w_"+t.id),a=a.next(),addTableInput(a,"res_galaxy_p_"+t.id)}document.documentElement.scrollTop=document.body.scrollTop=e}function buildStorageSettings(){buildSettingsSection("storage","Storage",(()=>{resetStorageSettings(!0),updateSettingsFromState(),updateStorageSettingsContent(),resetCheckbox("autoStorage"),removeStorageToggles()}),updateStorageSettingsContent)}function updateStorageSettingsContent(){let e=document.documentElement.scrollTop||document.body.scrollTop,t=$("#script_storageContent");t.empty().off("*"),addSettingsToggle(t,"storageLimitPreMad","Limit Pre-MAD Storage","Saves resources and shortens run time by limiting storage pre-MAD"),addSettingsToggle(t,"storageSafeReassign","Reassign only empty storages","Wait until storage is empty before reassigning containers to another resource, to prevent overflowing and wasting resources"),addSettingsToggle(t,"storageAssignExtra","Assign buffer storage","Assigns 3% extra strorage above required amounts, ensuring that required quantity will be actually reached, even if other part of script trying to sell\\eject\\switch production, etc. When manual trades enabled applies additional adjust derieved from selling threshold."),addSettingsToggle(t,"storageAssignPart","Assign partial storage","When enabled script will be allowed to assign some crates and containers even if resulting storage space won't be enough to build new building. It allows to pre-build stock of resources for further use, but can be potentially dungerous.\nIf script not allowed to reassign non-empty storage it can lock storage in position when stored resources can't be used.\nIf script is allowed to reassign non-empty storage it might waste time producing materials which might need to be disposed."),t.append('\n          <table style="width:100%">\n            <tr>\n              <th class="has-text-warning" style="width:35%">Resource</th>\n              <th class="has-text-warning" style="width:15%">Enabled</th>\n              <th class="has-text-warning" style="width:15%">Store Overflow</th>\n              <th class="has-text-warning" style="width:15%">Min Storage</th>\n              <th class="has-text-warning" style="width:15%">Max Storage</th>\n              <th style="width:5%"></th>\n            </tr>\n            <tbody id="script_storageTableBody"></tbody>\n          </table>');let i=$("#script_storageTableBody"),a="";for(let r=0;r<StorageManager.priorityList.length;r++){const e=StorageManager.priorityList[r];a+=`<tr value="${e.id}" class="script-draggable"><td id="script_storage_${e.id}" style="width:35%"></td><td style="width:15%"></td><td style="width:15%"></td><td style="width:15%"></td><td style="width:15%"></td><td style="width:5%"><span class="script-lastcolumn"></span></td></tr>`}i.append($(a));for(let r=0;r<StorageManager.priorityList.length;r++){const e=StorageManager.priorityList[r];let t=$("#script_storage_"+e.id);t.append(buildTableLabel(e.name)),t=t.next(),addTableToggle(t,"res_storage"+e.id),t=t.next(),addTableToggle(t,"res_storage_o_"+e.id),t=t.next(),addTableInput(t,"res_min_store"+e.id),t=t.next(),addTableInput(t,"res_max_store"+e.id)}i.sortable({items:"tr:not(.unsortable)",helper:sorterHelper,update:()=>{let e=i.sortable("toArray",{attribute:"value"});for(let t=0;t<e.length;t++)settingsRaw["res_storage_p_"+e[t]]=t;StorageManager.sortByPriority(),updateSettingsFromState()}}),document.documentElement.scrollTop=document.body.scrollTop=e}function buildTraitSettings(){buildSettingsSection("trait","Traits",(()=>{resetMinorTraitSettings(!0),resetMutableTraitSettings(!0),updateSettingsFromState(),updateTraitSettingsContent(),resetCheckbox("autoMinorTrait","autoMutateTraits","autoGenetics")}),updateTraitSettingsContent)}function updateImitateWarning(){let e=races[settingsRaw.imitateRace];e?e&&game.global.stats.synth[e.id]?$("#script_imitate_warning").html('<span class="has-text-success">You have completed an AI Apocalypse with this race and can imitate it.</span>'):$("#script_imitate_warning").html('<span class="has-text-danger">Warning! You have NOT completed an AI Apocalypse with this race, and cannot imitate it.</span>'):$("#script_imitate_warning").empty()}function updateTraitSettingsContent(){let e=document.documentElement.scrollTop||document.body.scrollTop,t=$("#script_traitContent");t.empty().off("*"),addStandardHeading(t,"Major Traits"),addSettingsSelect(t,"shifterGenus","Mimic genus","Mimic selected genus, if avaialble. If you want to add some conditional overrides to this setting, keep in mind changing genus redraws game page, frequent changes can drastically harm game performance.",[{val:"ignore",label:"Ignore",hint:"Do not shift genus"},{val:"none",label:game.loc("genelab_genus_none")},...Object.values(game.races).map((e=>e.type)).filter(((e,t,i)=>e&&"organism"!==e&&"synthetic"!==e&&i.indexOf(e)===t)).map((e=>({val:e,label:game.loc(`genelab_genus_${e}`)})))]),addSettingsSelect(t,"imitateRace","Imitate race","Imitate selected race, if available.",[{val:"ignore",label:"Ignore",hint:"Do not imitate race. IMPORTANT: script will stall at evolution if none selected"},...Object.values(races).map((e=>{const t=game.global.stats.synth[e.id]?e.name:`--${e.name}--`;return{val:e.id,label:t,hint:e.desc}}))]).on("change","select",(()=>{state.evolutionTarget=null,updateImitateWarning()})),t.append('<div><span id="script_imitate_warning"></span></div>'),updateImitateWarning(),addSettingsSelect(t,"buildingShrineType","Magnificent shrine","Auto Build shrines only at moons of chosen shrine",[{val:"any",label:"Any",hint:"Build any Shrines, whenever have resources for it"},{val:"equally",label:"Equally",hint:"Build all Shrines equally"},{val:"morale",label:"Morale",hint:"Build only Morale Shrines"},{val:"metal",label:"Metal",hint:"Build only Metal Shrines"},{val:"know",label:"Knowledge",hint:"Build only Knowledge Shrines"},{val:"tax",label:"Tax",hint:"Build only Tax Shrines"}]),addSettingsNumber(t,"slaveIncome","Minimum income to buy slave","Script will use Slave Market only when money is capped, or have income above given number"),addSettingsSelect(t,"psychicPower","Psychic Powers","Activates selected power with full energy. 10 murders required to research advanced powers will be performed automatically, if needed.",[{val:"none",label:"Ignore",hint:"Psychic Powers ignored by script"},{val:"auto",label:"Script Managed",hint:"Performs one of available actions in this order: Capture, Mind Break, Boost Profits, Boost Resource, Boost Attack Power."},...["boost","murder","assault","profit","stun","mind_break"].map((e=>({val:e,label:game.loc(`psychic_${e}_title`),hint:game.loc(`psychic_${e}_desc`)})))]),addSettingsSelect(t,"psychicBoostRes","Boosted Resource","Resource for Boost Resource Production psychic power.",[{val:"auto",label:"Script Managed",hint:"Resource selected by looking for highest income among ones having enough free storage room."},...Object.values(resources).filter((e=>e.atomicMass>0)).map((e=>({val:e.id,label:e.title})))]),addSettingsToggle(t,"jobScalePop","High Pop job scale","Auto Job will automatically scaly breakpoints to match population increase"),addStandardHeading(t,"Minor Traits"),addSettingsSelect(t,"geneticsSequence","Sequencer","Manages genome decoding, and mutations",[{val:"none",label:"Ignore",hint:"Ignored by script, managed by game and player"},{val:"enabled",label:"Enable",hint:"Sequencer enabled"},{val:"disabled",label:"Disable",hint:"Sequencer disabled"},{val:"decode",label:"Decode",hint:"Decode genome only, with no further mutations"}]),addSettingsSelect(t,"geneticsBoost","Sequence Booster","Manages sequencer booster",[{val:"none",label:"Ignore",hint:"Ignored by script, managed by game and player"},{val:"enabled",label:"Enable",hint:"Booster enabled"},{val:"disabled",label:"Disable",hint:"Booster disabled"}]),addSettingsSelect(t,"geneticsAssemble","Auto Sequence","Manages genome decoding, and mutations",[{val:"none",label:"Ignore",hint:"Ignored by script, managed by game and player"},{val:"enabled",label:"Enable",hint:"Auto Sequencer enable"},{val:"disabled",label:"Disable",hint:"Auto Sequencer disable"},{val:"auto",label:"Script Managed",hint:"Gene assembling managed by script, allowing to dump excess knowledge at faster rate, matching income"}]),t.append('\n          <table style="width:100%">\n            <tr>\n              <th class="has-text-warning" style="width:20%">Minor Trait</th>\n              <th class="has-text-warning" style="width:20%">Enabled</th>\n              <th class="has-text-warning" style="width:20%">Weighting</th>\n              <th class="has-text-warning" style="width:40%"></th>\n            </tr>\n            <tbody id="script_minorTraitTableBody"></tbody>\n          </table>');let i=$("#script_minorTraitTableBody"),a="";for(let n=0;n<MinorTraitManager.priorityList.length;n++){const e=MinorTraitManager.priorityList[n];a+=`<tr value="${e.traitName}" class="script-draggable"><td id="script_minorTrait_${e.traitName}" style="width:20%"></td><td style="width:20%"></td><td style="width:20%"></td><td style="width:40%"><span class="script-lastcolumn"></span></td></tr>`}i.append($(a));for(let n=0;n<MinorTraitManager.priorityList.length;n++){const e=MinorTraitManager.priorityList[n];let t=$("#script_minorTrait_"+e.traitName);t.append(buildTableLabel(game.loc("trait_"+e.traitName+"_name"),game.loc("trait_"+e.traitName))),t=t.next(),addTableToggle(t,"mTrait_"+e.traitName),t=t.next(),addTableInput(t,"mTrait_w_"+e.traitName)}i.sortable({items:"tr:not(.unsortable)",helper:sorterHelper,update:()=>{let e=i.sortable("toArray",{attribute:"value"});for(let t=0;t<e.length;t++)settingsRaw["mTrait_p_"+e[t]]=t;MinorTraitManager.sortByPriority(),updateSettingsFromState()}}),addStandardHeading(t,"Trait Mutation"),addSettingsToggle(t,"doNotGoBelowPlasmidSoftcap","Do not go below Plasmid softcap","Script will not mutate if the number of remaining plasmids or anti plamids would be lower than the softcap (250 + Phage)"),addSettingsNumber(t,"minimumPlasmidsToPreserve","Minimum Plasmids / Anti-Plasmids to preserve","Script will not mutate if the number of remaining plasmids or anti plamids would be lower than this value"),t.append('\n        <table style="width:100%">\n        <tr>\n            <th class="has-text-warning" style="width:30%">Species / Genus</th>\n            <th class="has-text-warning" style="width:25%">Trait</th>\n            <th class="has-text-warning" style="width:10%">Cost</th>\n            <th class="has-text-warning" style="width:10%">Add</th>\n            <th class="has-text-warning" style="width:10%">Remove</th>\n            <th class="has-text-warning" style="width:10%">Reset</th>\n            <th class="has-text-warning" style="width:5%"></th>\n        </tr>\n        <tbody id="script_mutateTraitTableBody"></tbody>\n        </table>');let r=$("#script_mutateTraitTableBody");a="";for(let n=0;n<MutableTraitManager.priorityList.length;n++){const e=MutableTraitManager.priorityList[n];a+=`<tr value="${e.traitName}" class="script-draggable"><td id="script_mutableTrait_${e.traitName}" style="width:30%"></td><td style="width:25%"></td><td style="width:10%"></td><td style="width:10%"></td><td style="width:10%"></td><td style="width:10%"></td><td style="width:5%"><span class="script-lastcolumn"></span></td></tr>`}r.append($(a));for(let n=0;n<MutableTraitManager.priorityList.length;n++){const e=MutableTraitManager.priorityList[n];let t=$("#script_mutableTrait_"+e.traitName);t.append(buildTableLabel(""===e.source?"-":game.loc(("major"===e.type?"race_":"genelab_genus_")+e.source),"major"===e.type?"Major":"Genus","genus"===e.type?"has-text-special":"has-text")),t=t.next(),t.append(buildTableLabel(e.name,game.loc("trait_"+e.traitName),e.isPositive?"has-text-success":"has-text-danger")),t=t.next(),t.append(buildTableLabel(""+5*e.baseCost,`${5*e.baseCost*mutationCostMultipliers.custom.gain} for Custom${"ooze"!==e.traitName?" and Sludge":""}`)),t=t.next(),e.isGainable()&&addTableToggle(t,"mutableTrait_gain_"+e.traitName),t=t.next(),addTableToggle(t,"mutableTrait_purge_"+e.traitName),e.isGainable()&&makeToggleSwitchesMutuallyExclusive($(".script_mutableTrait_gain_"+e.traitName),"mutableTrait_gain_"+e.traitName,$(".script_mutableTrait_purge_"+e.traitName),"mutableTrait_purge_"+e.traitName),t=t.next(),poly.neg_roll_traits.includes(e.traitName)&&addTableToggle(t,"mutableTrait_reset_"+e.traitName)}r.sortable({items:"tr:not(.unsortable)",helper:sorterHelper,update:()=>{let e=r.sortable("toArray",{attribute:"value"});for(let t=0;t<e.length;t++)settingsRaw["mutableTrait_p_"+e[t]]=t;MutableTraitManager.sortByPriority(),updateSettingsFromState()}}),document.documentElement.scrollTop=document.body.scrollTop=e}function makeToggleSwitchesMutuallyExclusive(e,t,i,a){e.on("change",(()=>{e.prop("checked")&&i.prop("checked")&&(i.prop("checked",!1),settingsRaw[a]=!1,updateSettingsFromState())})),i.on("change",(()=>{e.prop("checked")&&i.prop("checked")&&(e.prop("checked",!1),settingsRaw[t]=!1,updateSettingsFromState())}))}function buildMagicSettings(){buildSettingsSection("magic","Magic",(()=>{resetMagicSettings(!0),updateSettingsFromState(),updateMagicSettingsContent(),resetCheckbox("autoAlchemy","autoPylon")}),updateMagicSettingsContent)}function updateMagicSettingsContent(){let e=document.documentElement.scrollTop||document.body.scrollTop,t=$("#script_magicContent");t.empty().off("*"),updateMagicAlchemy(t),updateMagicPylon(t),document.documentElement.scrollTop=document.body.scrollTop=e}function updateMagicAlchemy(e){addStandardHeading(e,"Alchemy"),addSettingsNumber(e,"magicAlchemyManaUse","Mana income used","Income portion to use on alchemy. Setting to 1 is not recommended, leftover mana will be used for rituals."),e.append('\n          <table style="width:100%">\n            <tr>\n              <th class="has-text-warning" style="width:20%">Resource</th>\n              <th class="has-text-warning" style="width:20%">Enabled</th>\n              <th class="has-text-warning" style="width:20%">Weighting</th>\n              <th class="has-text-warning" style="width:40%"></th>\n            </tr>\n            <tbody id="script_alchemyTableBody"></tbody>\n          </table>');let t=$("#script_alchemyTableBody"),i="";for(let a of AlchemyManager.priorityList)i+=`<tr><td id="script_alchemy_${a.id}" style="width:20%"></td><td style="width:20%"></td><td style="width:20%"></td><td style="width:40%"></td></tr>`;t.append($(i));for(let a of AlchemyManager.priorityList){let e=$("#script_alchemy_"+a.id),t=AlchemyManager.transmuteTier(a)>1?"has-text-advanced":"has-text-info";e.append(buildTableLabel(a.name,"",t)),e=e.next(),addTableToggle(e,"res_alchemy_"+a.id),e=e.next(),addTableInput(e,"res_alchemy_w_"+a.id)}}function buildProductionSettings(){buildSettingsSection("production","Production",(()=>{resetProductionSettings(!0),updateSettingsFromState(),updateProductionSettingsContent(),resetCheckbox("autoQuarry","autoMine","autoExtractor","autoGraphenePlant","autoSmelter","autoCraft","autoFactory","autoMiningDroid","autoReplicator"),removeCraftToggles()}),updateProductionSettingsContent)}function updateProductionSettingsContent(){let e=document.documentElement.scrollTop||document.body.scrollTop,t=$("#script_productionContent");t.empty().off("*"),addSettingsNumber(t,"productionChrysotileWeight","Chrysotile weighting (Quarry, Smoldering)","Chrysotile weighting for autoQuarry, applies after adjusting to difference between current amounts of Stone and Chrysotile"),addSettingsNumber(t,"productionAdamantiteWeight","Adamantite weighting (Mine, The True Path)","Adamantite weighting for autoMine, applies after adjusting to difference between current amounts of Aluminium and Adamantite"),addSettingsNumber(t,"productionExtWeight_common","Aluminium weighting (Extractor Ship, The True Path)","Aluminium weighting for autoExtractor, applies after adjusting to difference between current amounts of Iron and Aluminium"),addSettingsNumber(t,"productionExtWeight_uncommon","Neutronium weighting (Extractor Ship, The True Path)","Neutronium weighting for autoExtractor, applies after adjusting to difference between current amounts of Iridium and Neutronium"),addSettingsNumber(t,"productionExtWeight_rare","Elerium weighting (Extractor Ship, The True Path)","Elerium weighting for autoExtractor, applies after adjusting to difference between current amounts of Orichalcum and Elerium"),updateProductionTableSmelter(t),updateProductionTableFoundry(t),updateProductionTableFactory(t),updateProductionTableMiningDrone(t),updateProductionTableReplicator(t),document.documentElement.scrollTop=document.body.scrollTop=e}function updateProductionTableSmelter(e){addStandardHeading(e,"Smelter"),addSettingsSelect(e,"productionSmelting","Smelters production","Distribution of smelters between iron and steel",[{val:"iron",label:"Prioritize Iron",hint:"Produce only Iron, untill storage capped, and switch to Steel after that"},{val:"steel",label:"Prioritize Steel",hint:"Produce as much Steel as possible, untill storage capped, and switch to Iron after that"},{val:"storage",label:"Up to full storages",hint:"Produce both Iron and Steel at ratio which will fill both storages at same time for both"},{val:"required",label:"Up to required amounts",hint:"Produce both Iron and Steel at ratio which will produce maximum amount of resources required for buildings at same time for both"}]),addSettingsNumber(e,"productionSmeltingIridium","Iridium ratio","Share of smelters dedicated to Iridium"),e.append('\n          <table style="width:100%">\n            <tr>\n              <th class="has-text-warning" style="width:95%">Fuel</th>\n              <th style="width:5%"></th>\n            </tr>\n            <tbody id="script_productionTableBodySmelter"></tbody>\n          </table>');let t=$("#script_productionTableBodySmelter"),i="",a=SmelterManager.managedFuelPriorityList();for(let r=0;r<a.length;r++){let e=a[r];i+=`<tr value="${e.id}" class="script-draggable"><td id="script_smelter_${e.id}" style="width:95%"></td><td style="width:5%"><span class="script-lastcolumn"></span></td></tr>`}t.append($(i));for(let r=0;r<a.length;r++){let e=a[r];$("#script_smelter_"+e.id).append(buildTableLabel(e.id))}t.sortable({items:"tr:not(.unsortable)",helper:sorterHelper,update:()=>{let e=t.sortable("toArray",{attribute:"value"});for(let t=0;t<e.length;t++)settingsRaw["smelter_fuel_p_"+e[t]]=t;updateSettingsFromState()}})}function updateProductionTableFactory(e){addStandardHeading(e,"Factory"),addSettingsNumber(e,"productionFactoryMinIngredients","Minimum materials to preserve","Factory will craft resources only when all required materials above given ratio"),e.append('\n          <table style="width:100%">\n            <tr>\n              <th class="has-text-warning" style="width:35%">Resource</th>\n              <th class="has-text-warning" style="width:20%">Enabled</th>\n              <th class="has-text-warning" style="width:20%">Weighting</th>\n              <th class="has-text-warning" style="width:20%">Priority</th>\n              <th style="width:5%"></th>\n            </tr>\n            <tbody id="script_productionTableBodyFactory"></tbody>\n          </table>');let t=$("#script_productionTableBodyFactory"),i="",a=Object.values(FactoryManager.Productions);for(let r=0;r<a.length;r++)i+=`<tr><td id="script_factory_${a[r].resource.id}" style="width:35%"></td><td style="width:20%"></td><td style="width:20%"></td><td style="width:20%"></td><td style="width:5%"></td></tr>`;t.append($(i));for(let r=0;r<a.length;r++){let e=a[r],t=$("#script_factory_"+e.resource.id);t.append(buildTableLabel(e.resource.name)),t=t.next(),addTableToggle(t,"production_"+e.resource.id),t=t.next(),addTableInput(t,"production_w_"+e.resource.id),t=t.next(),addTableInput(t,"production_p_"+e.resource.id)}}function updateProductionTableFoundry(e){addStandardHeading(e,"Foundry"),addSettingsSelect(e,"productionFoundryWeighting","Weightings adjustments","Configures how exactly craftables will be weighted against each other",[{val:"none",label:"None",hint:"Use configured weightings with no additional adjustments, craftables with x2 weighting will be crafted two times more intense than with x1, etc."},{val:"demanded",label:"Prioritize demanded",hint:"Ignore craftables once stored amount surpass cost of most expensive building, until all missing resources will be crafted. After that works as with 'none' adjustments."},{val:"buildings",label:"Buildings weightings",hint:"Uses weightings of buildings which are waiting for craftables, as multipliers to craftables weighting. This option requires autoBuild."}]),addSettingsSelect(e,"productionCraftsmen","Assign craftsmen","Configures when workers should be assigned to crafting jobs",[{val:"always",label:"Always",hint:"Always assign all craftsmens"},{val:"nocraft",label:"No Manual Crafting",hint:"Assign workers only manual crafting is not possible, servants still always will be assigned"},{val:"advanced",label:"Advanced",hint:"Assign workers only to advanced craftables(Scarletite, Quantium), basic craftables will be crafted by servants"},{val:"servants",label:"Servants",hint:"Assign only servants"}]),e.append('\n          <table style="width:100%">\n            <tr>\n              <th class="has-text-warning" style="width:21%" title="Resource name">Resource</th>\n              <th class="has-text-warning" style="width:17%" title="Resource won\'t ever be crafted with this option disabled">Enabled</th>\n              <th class="has-text-warning" style="width:17%" title="Resource won\'t use foundry workers for craft with this option disabled">Craftsmen</th>\n              <th class="has-text-warning" style="width:20%" title="Ratio between resources. Script assign craftsmans to resource with lowest \'amount / weighting\'. Ignored by manual crafting.">Weighting</th>\n              <th class="has-text-warning" style="width:20%" title="Only craft resource when storage ratio of all required materials above given number. E.g. bricks with 0.1 min materials will be crafted only when cement storage at least 10% filled.">Min Materials</th>\n              <th style="width:5%"></th>\n            </tr>\n            <tbody id="script_productionTableBodyFoundry"></tbody>\n          </table>');let t=$("#script_productionTableBodyFoundry"),i="";for(let a=0;a<craftablesList.length;a++)i+=`<tr><td id="script_foundry_${craftablesList[a].id}" style="width:21%"></td><td style="width:17%"></td><td style="width:17%"></td><td style="width:20%"></td><td style="width:20%"></td><td style="width:5%"></td></tr>`;t.append($(i));for(let a=0;a<craftablesList.length;a++){let e=craftablesList[a],t=$("#script_foundry_"+e.id);t.append(buildTableLabel(e.name)),t=t.next(),addTableToggle(t,"craft"+e.id),t=t.next(),addTableToggle(t,"job_"+e.id),t=t.next(),e===resources.Scarletite||e===resources.Quantium?t.append("<span>Managed</span>"):addTableInput(t,"foundry_w_"+e.id),t=t.next(),addTableInput(t,"foundry_p_"+e.id)}}function updateProductionTableMiningDrone(e){addStandardHeading(e,"Mining Droid"),e.append('\n          <table style="width:100%">\n            <tr>\n              <th class="has-text-warning" style="width:35%">Resource</th>\n              <th class="has-text-warning" style="width:20%"></th>\n              <th class="has-text-warning" style="width:20%">Weighting</th>\n              <th class="has-text-warning" style="width:20%">Priority</th>\n              <th style="width:5%"></th>\n            </tr>\n            <tbody id="script_productionTableBodyMiningDrone"></tbody>\n          </table>');let t=$("#script_productionTableBodyMiningDrone"),i="",a=Object.values(DroidManager.Productions);for(let r=0;r<a.length;r++)i+=`<tr><td id="script_droid_${a[r].resource.id}" style="width:35%"><td style="width:20%"></td><td style="width:20%"></td></td><td style="width:20%"></td><td style="width:5%"></td></tr>`;t.append($(i));for(let r=0;r<a.length;r++){let e=a[r],t=$("#script_droid_"+e.resource.id);t.append(buildTableLabel(e.resource.name)),t=t.next().next(),addTableInput(t,"droid_w_"+e.resource.id),t=t.next(),addTableInput(t,"droid_pr_"+e.resource.id)}}function updateProductionTableReplicator(e){addStandardHeading(e,"Replicator"),addSettingsToggle(e,"replicatorAssignGovernorTask","Assign governor task","If active, the replicator scheduler governor task will be set, the power adjustment will be enabled."),e.append('\n        <table style="width:100%">\n          <tr>\n            <th class="has-text-warning" style="width:35%">Resource</th>\n            <th class="has-text-warning" style="width:20%">Enabled</th>\n            <th class="has-text-warning" style="width:20%">Weighting</th>\n            <th class="has-text-warning" style="width:20%">Priority</th>\n            <th style="width:5%"></th>\n          </tr>\n          <tbody id="script_productionTableBodyReplicator"></tbody>\n        </table>');let t=$("#script_productionTableBodyReplicator"),i="",a=Object.values(ReplicatorManager.Productions);for(let r=0;r<a.length;r++)i+=`<tr><td id="script_replicator_${a[r].resource.id}" style="width:35%"></td><td style="width:20%"></td><td style="width:20%"></td><td style="width:20%"></td><td style="width:5%"></td></tr>`;t.append($(i));for(let r=0;r<a.length;r++){let e=a[r],t=$("#script_replicator_"+e.resource.id);t.append(buildTableLabel(e.resource.name)),t=t.next(),addTableToggle(t,"replicator_"+e.resource.id),t=t.next(),addTableInput(t,"replicator_w_"+e.resource.id),t=t.next(),addTableInput(t,"replicator_p_"+e.resource.id)}}function updateMagicPylon(e){addStandardHeading(e,"Pylon"),addSettingsNumber(e,"productionRitualManaUse","Mana income used","Income portion to use on rituals. Setting to 1 is not recommended, as it will halt mana regeneration. Applied only when mana not capped - with capped mana script will always use all income."),addSettingsToggle(e,"productionRitualSafe","Safe rituals","Limit max rituals to safe, unsuspicious amount. Have no effect out of Witch Hunter scenario."),e.append('\n          <table style="width:100%">\n            <tr>\n              <th class="has-text-warning" style="width:55%">Ritual</th>\n              <th class="has-text-warning" style="width:20%">Weighting</th>\n              <th style="width:25%"></th>\n            </tr>\n            <tbody id="script_magicTableBodyPylon"></tbody>\n          </table>');let t=$("#script_magicTableBodyPylon"),i="",a=Object.values(RitualManager.Productions);for(let r=0;r<a.length;r++)i+=`<tr><td id="script_pylon_${a[r].id}" style="width:55%"></td><td style="width:20%"></td><td style="width:25%"></td></tr>`;t.append($(i));for(let r=0;r<a.length;r++){let e=a[r],t=$("#script_pylon_"+e.id);t.append(buildTableLabel(game.loc(`modal_pylon_spell_${e.id}`))),t=t.next(),addTableInput(t,"spell_w_"+e.id)}}function buildJobSettings(){buildSettingsSection("job","Job",(()=>{resetJobSettings(!0),updateSettingsFromState(),updateJobSettingsContent(),resetCheckbox("autoJobs","autoCraftsmen")}),updateJobSettingsContent)}function updateJobSettingsContent(){let e=document.documentElement.scrollTop||document.body.scrollTop,t=$("#script_jobContent");t.empty().off("*"),addSettingsToggle(t,"jobSetDefault","Set default job","Automatically sets the default job in order of Quarry Worker -> Lumberjack -> Crystal Miner -> Scavenger -> Hunter -> Farmer -> Unemployed"),addSettingsToggle(t,"jobManageServants","Manage Servants","Automatically manage servants, they will be used as substitute of regular workers, sharing same breakpoints and priorities, i.e. for breakpoint 10 script might assign 8 workers and 2 servants, and such."),addSettingsNumber(t,"jobLumberWeighting","Final Lumberjack Weighting","AFTER allocating breakpoints this weighting will be used to split weighted jobs"),addSettingsNumber(t,"jobQuarryWeighting","Final Quarry Worker Weighting","AFTER allocating breakpoints this weighting will be used to split weighted jobs"),addSettingsNumber(t,"jobCrystalWeighting","Final Crystal Miner Weighting","AFTER allocating breakpoints this weighting will be used to split weighted jobs"),addSettingsNumber(t,"jobScavengerWeighting","Final Scavenger Weighting","AFTER allocating breakpoints this weighting will be used to split weighted jobs"),addSettingsNumber(t,"jobRaiderWeighting","Final Raider Weighting","AFTER allocating breakpoints this weighting will be used to split weighted jobs"),addSettingsToggle(t,"jobDisableMiners","Disable miners in Andromeda","Disable Miners and Coal Miners after reaching Andromeda"),t.append('\n          <table style="width:100%">\n            <tr>\n              <th class="has-text-warning" style="width:35%">Job</th>\n              <th class="has-text-warning" style="width:17%">1st Pass</th>\n              <th class="has-text-warning" style="width:17%">2nd Pass</th>\n              <th class="has-text-warning" style="width:17%">3rd Pass</th>\n              <th class="has-text-warning" style="width:9%" title="When enabled script will limit amount of assigned workers down to maximum useful quantity, moving idling workers to other jobs">Smart</th>\n              <td style="width:5%"><span id="script_resetJobsPriority" class="script-refresh"></span></td>\n            </tr>\n            <tbody id="script_jobTableBody"></tbody>\n          </table>'),$("#script_resetJobsPriority").on("click",(()=>{if(confirm("Are you sure you wish to reset jobs priority?")){JobManager.priorityList=Object.values(jobs);for(let e=0;e<JobManager.priorityList.length;e++){let t=JobManager.priorityList[e]._originalId;settingsRaw["job_p_"+t]=e}updateSettingsFromState(),updateJobSettingsContent()}}));let i=$("#script_jobTableBody"),a="";for(let r=0;r<JobManager.priorityList.length;r++){const e=JobManager.priorityList[r];a+=`<tr value="${e._originalId}" class="script-draggable"><td id="script_${e._originalId}" style="width:35%"></td><td style="width:17%"></td><td style="width:17%"></td><td style="width:17%"></td><td style="width:9%"></td><td style="width:5%"></td></tr>`}i.append($(a));for(let r=0;r<JobManager.priorityList.length;r++){const e=JobManager.priorityList[r];let t=$("#script_"+e._originalId);buildJobSettingsToggle(t,e),t=t.next(),buildJobSettingsInput(t,e,1),t=t.next(),buildJobSettingsInput(t,e,2),t=t.next(),buildJobSettingsInput(t,e,3),t=t.next(),e.is.smart&&addTableToggle(t,"job_s_"+e._originalId),t=t.next(),t.append($('<span class="script-lastcolumn"></span>'))}i.sortable({items:"tr:not(.unsortable)",helper:sorterHelper,update:()=>{let e=i.sortable("toArray",{attribute:"value"});for(let t=0;t<e.length;t++)settingsRaw["job_p_"+e[t]]=t;JobManager.sortByPriority(),updateSettingsFromState()}}),document.documentElement.scrollTop=document.body.scrollTop=e}function buildJobSettingsToggle(e,t){let i="job_"+t._originalId,a=t===jobs.Unemployed?"warning":t instanceof CraftingJob?"danger":t instanceof BasicJob?"info":"advanced";e.addClass("script_bg_"+i+(settingsRaw.overrides[i]?" inactive-row":"")).append(addToggleCallbacks($(`\n          <label tabindex="0" class="switch" style="margin-top:4px; margin-left:10px;">\n            <input class="script_${i}" type="checkbox"${settingsRaw[i]?" checked":""}>\n            <span class="check" style="height:5px; max-width:15px"></span>\n            <span class="has-text-${a}" style="margin-left: 20px;">${t._originalName}</span>\n          </label>`),i))}function buildJobSettingsInput(e,t,i){t instanceof CraftingJob?e.append("<span>Managed</span>"):3===i&&t.is.split?e.append("<span>Weighted</span>"):addTableInput(e,`job_b${i}_${t._originalId}`)}function buildWeightingSettings(){buildSettingsSection("weighting","AutoBuild Weighting",(()=>{resetWeightingSettings(!0),updateSettingsFromState(),updateWeightingSettingsContent()}),updateWeightingSettingsContent)}function updateWeightingSettingsContent(){let e=document.documentElement.scrollTop||document.body.scrollTop,t=$("#script_weightingContent");t.empty().off("*"),addSettingsToggle(t,"buildingBuildIfStorageFull","Ignore weighting and build if any storage is full","Ignore weighting and immediately construct building if it uses any capped resource, preventing wasting them by overflowing. Weight still need to be positive(above zero) for this to happen."),t.append('\n          <table style="width:100%">\n            <tr>\n              <th class="has-text-warning" style="width:30%">Target</th>\n              <th class="has-text-warning" style="width:60%">Condition</th>\n              <th class="has-text-warning" style="width:10%">Multiplier</th>\n            </tr>\n            <tbody id="script_weightingTableBody"></tbody>\n          </table>');let i=$("#script_weightingTableBody");addWeightingRule(i,"Any","New building","buildingWeightingNew"),addWeightingRule(i,"Powered building","Low available energy","buildingWeightingUnderpowered"),addWeightingRule(i,"Power plant","Low available energy","buildingWeightingNeedfulPowerPlant"),addWeightingRule(i,"Power plant","Producing more energy than required","buildingWeightingUselessPowerPlant"),addWeightingRule(i,"Knowledge storage","Have unlocked unafforable researches","buildingWeightingNeedfulKnowledge"),addWeightingRule(i,"Knowledge storage","All unlocked researches already affordable","buildingWeightingUselessKnowledge"),addWeightingRule(i,"Building with state (city)","Some instances of this building are not working","buildingWeightingNonOperatingCity"),addWeightingRule(i,"Building with state (space)","Some instances of this building are not working","buildingWeightingNonOperating"),addWeightingRule(i,"Building with consumption","Missing consumables to operate","buildingWeightingMissingSupply"),addWeightingRule(i,"Support consumer","Missing support to operate","buildingWeightingMissingSupport"),addWeightingRule(i,"Support provider","Provided support not currently needed","buildingWeightingUselessSupport"),addWeightingRule(i,"All fuel depots","Missing Oil or Helium for techs and missions","buildingWeightingMissingFuel"),addWeightingRule(i,"Not housing, barrack, oil derrick, or knowledge building","MAD prestige enabled, and affordable","buildingWeightingMADUseless"),addWeightingRule(i,"Mass Ejector","Existed ejectors not fully utilized","buildingWeightingUnusedEjectors"),addWeightingRule(i,"Freight Yard, Container Port, Munitions Depot","Have unused crates or containers","buildingWeightingCrateUseless"),addWeightingRule(i,"Horseshoes","No more Horseshoes needed","buildingWeightingHorseshoeUseless"),addWeightingRule(i,"Meditation Chamber","No more Meditation Space needed","buildingWeightingZenUseless"),addWeightingRule(i,"Gate Turret","Gate demons fully supressed","buildingWeightingGateTurret"),addWeightingRule(i,"Warehouses, Garage, Cargo Yard, Storehouse","Need more storage","buildingWeightingNeedStorage"),addWeightingRule(i,"Housing","Less than 90% of houses are used","buildingWeightingUselessHousing"),addWeightingRule(i,"Orbital Decay","City and Moon buildings","buildingWeightingTemporal"),addWeightingRule(i,"The True Path","Solar buildings after reaching Tau Ceti","buildingWeightingSolar"),addWeightingRule(i,"Womlings Missions","Womlings unlock actions conflicting with Overlord","buildingWeightingOverlord"),document.documentElement.scrollTop=document.body.scrollTop=e}function addWeightingRule(e,t,i,a){let r=$(`\n          <tr>\n            <td style="width:30%"><span class="has-text-info">${t}</span></td>\n            <td style="width:60%"><span class="has-text-info">${i}</span></td>\n            <td style="width:10%"></td>\n          </tr>`);addTableInput(r.find("td:eq(2)"),a),e.append(r)}function buildBuildingSettings(){buildSettingsSection("building","Building",(()=>{resetBuildingSettings(!0),updateSettingsFromState(),updateBuildingSettingsContent(),resetCheckbox("autoBuild","autoPower"),removeBuildingToggles()}),updateBuildingSettingsContent)}function updateBuildingSettingsContent(){let e=document.documentElement.scrollTop||document.body.scrollTop,t=$("#script_buildingContent");t.empty().off("*"),addSettingsToggle(t,"buildingsIgnoreZeroRate","Do not wait for resources without income","Weighting checks will ignore resources without positive income(craftables, inactive factory goods, etc), buildings with such resources will not delay other buildings."),addSettingsToggle(t,"buildingsLimitPowered","Limit amount of powered buildings","With this option enabled Max Build will prevent powering extra building. Can be useful to disable buildings with overrided settings."),addSettingsToggle(t,"buildingsTransportGem","Build cheapest Supplies transport","By default script chooses between Lake Transport and Lake Bireme Warship comparing their 'Supplies Per Support', with this option enabled it will compare 'Supplies Per Soulgems' instead."),addSettingsToggle(t,"buildingsBestFreighter","Build most efficient freighters","With this option enabled script will compare 'Money Storage per Crew' of Freighter and Super Freighter, and only build the best one. Without this option no restrictions will be applied. Works only when both ships are buildable."),addSettingsToggle(t,"buildingsUseMultiClick","Bulk build multi-segmented buildings","With this option enabled, the script will build as many segments as are affordable at once, instead of one per tick."),addSettingsNumber(t,"buildingTowerSuppression","Minimum suppression for Towers","East Tower and West Tower won't be built until minimum suppression is reached"),addSettingsSelect(t,"buildingConsumptionCheck","Behavior when building support/upkeep-using building","By default, the script only buys one building with support or upkeep requirement per tick, to allow automatic weightings to work optimally.",[{val:"onePerTick",label:"Default",hint:"Script will stop building buildings for one tick after buying building with support/upkeep. (Example: 1 Living Quarters stops processing of all buildings until next script tick.)"},{val:"perResource",label:"Non-conflicting only",hint:"During a tick, the script will only buy at most one building using a given support/upkeep type, but non-conflicting ones are allowed. Should be safe in most cases. (Example: 1 Living Quarters stops building the other buildings using Red Planet support for that tick, but it can still build on other planets.)"},{val:"unlimited",label:"Unlimited",hint:"Do not pay attention to support/upkeep requirements. This will cause bugs and undesirable behavior as it can easily exceed the maximum support. But, at extremely high prestige levels, this may be required. (Example: Can buy 1 Living Quarters + 1 Mine + 1 Fabrication + 1 Biodome in a single tick even if there is only 2 support left.)"}]),t.append('\n          <div><input id="script_buildingSearch" class="script-searchsettings" type="text" placeholder="Search for buildings..."></div>\n          <table style="width:100%">\n            <tr>\n              <th class="has-text-warning" style="width:35%">Building</th>\n              <th class="has-text-warning" style="width:15%" title="Enables auto building. Triggers ignores this option, allowing to build disabled things.">Auto Build</th>\n              <th class="has-text-warning" style="width:15%" title="Maximum amount of buildings to build. Triggers ignores this option, allowing to build above limit. Can be also used to limit amount of enabled buildings, with respective option above.">Max Build</th>\n              <th class="has-text-warning" style="width:15%" title="Script will try to spend 2x amount of resources on building having 2x weighting, and such.">Weighting</th>\n              <th class="has-text-warning" style="width:20%" title="First toggle enables basic automation based on priority, power, support, and consumption. Second enables logic made specially for particlular building, their effects are different, but generally it tries to behave smarter than just staying enabled all the time.">Auto Power</th>\n            </tr>\n            <tbody id="script_buildingTableBody"></tbody>\n          </table>');let i=$("#script_buildingTableBody");$("#script_buildingSearch").on("keyup",filterBuildingSettingsTable);let a='<tr value="All" class="unsortable"><td id="script_bldallToggle" style="width:35%"></td><td style="width:15%"></td><td style="width:15%"></td><td style="width:15%"></td><td style="width:20%"><span id="script_resetBuildingsPriority" class="script-refresh"></span></td></tr>';for(let n=0;n<BuildingManager.priorityList.length;n++){let e=BuildingManager.priorityList[n];a+=`<tr value="${e._vueBinding}" class="script-draggable"><td id="script_${e._vueBinding}" style="width:35%"></td><td style="width:15%"></td><td style="width:15%"></td><td style="width:15%"></td><td style="width:20%"></td></tr>`}i.append($(a));let r=$("#script_bldallToggle");r.append('<span class="has-text-warning" style="margin-left: 20px;">All Buildings</span>'),r=r.next(),r.append(buildAllBuildingEnabledSettingsToggle()),r=r.next().next().next(),r.append(buildAllBuildingStateSettingsToggle()),$("#script_resetBuildingsPriority").on("click",(()=>{if(confirm("Are you sure you wish to reset buildings priority?")){initBuildingState();for(let e=0;e<BuildingManager.priorityList.length;e++){let t=BuildingManager.priorityList[e]._vueBinding;settingsRaw["bld_p_"+t]=e}updateSettingsFromState(),updateBuildingSettingsContent()}}));for(let n=0;n<BuildingManager.priorityList.length;n++){let e=BuildingManager.priorityList[n],t=$("#script_"+e._vueBinding),i="space"===e._tab||"starDock"===e._tab?"has-text-danger":"galaxy"===e._tab?"has-text-advanced":"interstellar"===e._tab?"has-text-special":"portal"===e._tab||"tauceti"===e._tab?"has-text-warning":"has-text-info";t.append(buildTableLabel(e.name,"",i)),t=t.next(),addTableToggle(t,"bat"+e._vueBinding),t=t.next(),addTableInput(t,"bld_m_"+e._vueBinding),t=t.next(),addTableInput(t,"bld_w_"+e._vueBinding),t=t.next(),buildBuildingStateSettingsToggle(t,e)}i.sortable({items:"tr:not(.unsortable)",helper:sorterHelper,update:()=>{let e=i.sortable("toArray",{attribute:"value"});for(let t=0;t<e.length;t++)settingsRaw["bld_p_"+e[t]]=t;BuildingManager.sortByPriority(),updateSettingsFromState()}}),document.documentElement.scrollTop=document.body.scrollTop=e}function filterBuildingSettingsTable(){let e=document.getElementById("script_buildingSearch").value.toUpperCase(),t=document.getElementById("script_buildingTableBody").getElementsByTagName("tr"),i=null,a=e.match(/^(.+)(<=|>=|===|==|<|>|!==|!=)(.+)$/);if(4===a?.length){let e=null;switch(a[1].trim()){case"BUILD":case"AUTOBUILD":e=e=>e.autoBuildEnabled;break;case"POWER":case"AUTOPOWER":e=e=>e.autoStateEnabled;break;case"WEIGHT":case"WEIGHTING":e=e=>e._weighting;break;case"MAX":case"MAXBUILD":e=e=>e._autoMax;break;case"POWERED":e=e=>e.powered;break;case"KNOW":case"KNOWLEDGE":e=e=>e.is.knowledge;break;default:e=e=>Object.entries(e.cost).find((([e,t])=>resources[e].title.toUpperCase().indexOf(a[1].trim())>-1))?.[1]??0}let t=null;switch(a[3].trim()){case"ON":case"TRUE":t=!0;break;case"OFF":case"FALSE":t=!1;break;default:t=getRealNumber(a[3].trim())}i=i=>checkCompare[a[2]](e(i),t)}for(let r=0;r<t.length;r++){let a=t[r].getElementsByTagName("td")[0];if(a)if(i){let e=buildingIds[a.id.match(/^script_(.*)$/)[1]];e&&i(e)?t[r].style.display="":t[r].style.display="none"}else a.textContent.toUpperCase().indexOf(e)>-1?t[r].style.display="":t[r].style.display="none"}}function buildAllBuildingEnabledSettingsToggle(){return $(`\n          <label tabindex="0" class="switch" style="position:absolute; margin-top: 8px; margin-left: 10px;">\n            <input class="script_buildingEnabledAll" type="checkbox"${settingsRaw.buildingEnabledAll?" checked":""}>\n            <span class="check" style="height:5px; max-width:15px"></span>\n            <span style="margin-left: 20px;"></span>\n          </label>`).on("change","input",(function(){settingsRaw.buildingEnabledAll=this.checked;for(let e=0;e<BuildingManager.priorityList.length;e++){let t=BuildingManager.priorityList[e]._vueBinding;settingsRaw["bat"+t]=this.checked}$('[class^="script_bat"]').prop("checked",this.checked),updateSettingsFromState()})).on("click",(e=>{e[overrideKey]&&e.preventDefault()}))}function buildBuildingStateSettingsToggle(e,t){let i="bld_s_"+t._vueBinding,a="bld_s2_"+t._vueBinding;if(t.isSwitchable()&&(addToggleCallbacks($(`\n              <label tabindex="0" class="switch" style="position:absolute; margin-top: 8px; margin-left: 10px;">\n                <input class="script_${i}" type="checkbox"${settingsRaw[i]?" checked":""}>\n                <span class="check" style="height:5px; max-width:15px"></span>\n                <span style="margin-left: 20px;"></span>\n              </label>`),i).appendTo(e),e.addClass("script_bg_"+i)),t.is.smart){let i=$(`\n              <label tabindex="0" class="switch" style="position:absolute; margin-top: 8px; margin-left: 35px;">\n                <input class="script_${a}" type="checkbox"${settingsRaw[a]?" checked":""}>\n                <span class="check" style="height:5px; max-width:15px"></span>\n                <span style="margin-left: 20px;"></span>\n              </label>`),r=linkedBuildings.find((e=>e.includes(t)));r?i.on("change","input",(function(){r.forEach((e=>{let t="bld_s2_"+e._vueBinding;settingsRaw[t]=this.checked,$(".script_"+t).prop("checked",this.checked)})),updateSettingsFromState()})):addToggleCallbacks(i,a),e.append(i),e.addClass("script_bg_"+a)}e.append('<span class="script-lastcolumn"></span>'),e.toggleClass("inactive-row",Boolean(settingsRaw.overrides[i]||settingsRaw.overrides[a]))}function buildAllBuildingStateSettingsToggle(){return $(`\n          <label tabindex="0" class="switch" style="position:absolute; margin-top: 8px; margin-left: 10px;">\n            <input class="script_buildingStateAll" type="checkbox"${settingsRaw.buildingStateAll?" checked":""}>\n            <span class="check" style="height:5px; max-width:15px"></span>\n            <span style="margin-left: 20px;"></span>\n          </label>`).on("change","input",(function(e){settingsRaw.buildingStateAll=this.checked;for(let t=0;t<BuildingManager.priorityList.length;t++){let e=BuildingManager.priorityList[t]._vueBinding;settingsRaw["bld_s_"+e]=this.checked}$('[class^="script_bld_s_"]').prop("checked",this.checked),updateSettingsFromState()})).on("click",(e=>{e[overrideKey]&&e.preventDefault()}))}function buildProjectSettings(){buildSettingsSection("project","A.R.P.A.",(()=>{resetProjectSettings(!0),updateSettingsFromState(),updateProjectSettingsContent(),resetCheckbox("autoARPA")}),updateProjectSettingsContent)}function updateProjectSettingsContent(){let e=document.documentElement.scrollTop||document.body.scrollTop,t=$("#script_projectContent");t.empty().off("*"),addSettingsToggle(t,"arpaScaleWeighting","Scale weighting with progress","Projects weighting scales  with current progress, making script more eager to spend resources on finishing nearly constructed projects."),addSettingsNumber(t,"arpaStep","Preferred progress step","Projects will be weighted and build in this steps. Increasing number can speed up constructing. Step will be adjusted down when preferred step above remaining amount, or surpass storage caps. Weightings below will be multiplied by current step. Projects builded by triggers will always have maximum possible step."),t.append('\n          <table style="width:100%">\n            <tr>\n              <th class="has-text-warning" style="width:25%">Project</th>\n              <th class="has-text-warning" style="width:25%">Auto Build</th>\n              <th class="has-text-warning" style="width:25%">Max Build</th>\n              <th class="has-text-warning" style="width:25%">Weighting</th>\n            </tr>\n            <tbody id="script_projectTableBody"></tbody>\n          </table>');let i=$("#script_projectTableBody"),a="";for(let r=0;r<ProjectManager.priorityList.length;r++){const e=ProjectManager.priorityList[r];a+=`<tr value="${e.id}" class="script-draggable"><td id="script_${e.id}" style="width:25%"></td><td style="width:25%"></td><td style="width:25%"></td><td style="width:25%"></td><td style="width:25%"></td></tr>`}i.append($(a));for(let r=0;r<ProjectManager.priorityList.length;r++){const e=ProjectManager.priorityList[r];let t=$("#script_"+e.id);t.append(buildTableLabel(e.name)),t=t.next(),addTableToggle(t,"arpa_"+e.id),t=t.next(),addTableInput(t,"arpa_m_"+e.id),t=t.next(),addTableInput(t,"arpa_w_"+e.id)}i.sortable({items:"tr:not(.unsortable)",helper:sorterHelper,update:()=>{let e=i.sortable("toArray",{attribute:"value"});for(let t=0;t<e.length;t++)settingsRaw["arpa_p_"+e[t]]=t;ProjectManager.sortByPriority(),updateSettingsFromState()}}),document.documentElement.scrollTop=document.body.scrollTop=e}function buildLoggingSettings(e,t){buildSettingsSection2(e,t,"logging","Logging",(()=>{resetLoggingSettings(!0),updateSettingsFromState(),updateLoggingSettingsContent(t),buildFilterRegExp()}),updateLoggingSettingsContent)}function updateLoggingSettingsContent(e){let t=document.documentElement.scrollTop||document.body.scrollTop,i=$(`#script_${e}loggingContent`);i.empty().off("*"),addSettingsHeader1(i,"Script Messages"),addSettingsToggle(i,"logEnabled","Enable logging","Master switch to enable logging of script actions in the game message queue"),Object.entries(GameLog.Types).forEach((([e,t])=>addSettingsToggle(i,"log_"+e,t,`If logging is enabled then logs ${t} actions`))),addSettingsString(i,"log_prestige_format","Prestige Log Format","Available placeholders: {resetType}, {species}, {timestamp} (in game days). Use {eval: XXX } to log custom information"),addSettingsHeader1(i,"Game Messages"),addSettingsToggle(i,"hellTurnOffLogMessages","Turn off patrol and surveyor log messages","Automatically turns off the hell patrol and surveyor log messages");let a=`strings/strings${"en-US"===game.global.settings.locale?"":"."+game.global.settings.locale}.json`;i.append(`\n          <div>\n            <span>List of message IDs to filter, all game messages can be found <a href="${a}" target="_blank">here</a>.</span><br>\n            <textarea id="script_logFilter" class="textarea" style="margin-top: 4px;">${settingsRaw.logFilter}</textarea>\n          </div>`),$("#script_logFilter").on("change",(function(){settingsRaw.logFilter=this.value,buildFilterRegExp(),this.value=settingsRaw.logFilter,updateSettingsFromState()})),document.documentElement.scrollTop=document.body.scrollTop=t}function createQuickOptions(e,t,i,a){let r=$(`<div style="cursor: pointer;" id="${t}">${i} Options</div>`);e.append(r),addOptionUI(t+"_btn",`#${t}`,i,a),r.on("click",(()=>{openOptionsModal(i,a)}))}function createSettingToggle(e,t,i,a,r){let n=$(`\n          <label class="switch script_bg_${t}" tabindex="0" title="${i}">\n            <input class="script_${t}" type="checkbox"${settingsRaw[t]?" checked":""}/>\n            <span class="check"></span><span>${t}</span>\n          </label><br>`).toggleClass("inactive-row",Boolean(settingsRaw.overrides[t]));settingsRaw[t]&&a&&a(),n.on("change","input",(function(){settingsRaw[t]=this.checked,updateSettingsFromState(),settingsRaw[t]&&a&&a(),!settingsRaw[t]&&r&&r()})),n.on("click",{label:`Toggle (${t})`,name:t,type:"boolean"},openOverrideModal),e.append(n)}function updateOptionsUI(){addOptionUI("s-government-options","#government .tabs ul","Government",buildGovernmentSettings),addOptionUI("s-foreign-options","#garrison div h2","Foreign Affairs",buildWarSettings),addOptionUI("s-foreign-options2","#c_garrison div h2","Foreign Affairs",buildWarSettings),addOptionUI("s-hell-options","#gFort div h3","Hell",buildHellSettings),addOptionUI("s-hell-options2","#prtl_fortress div h3","Hell",buildHellSettings),addOptionUI("s-fleet-options","#hfleet h3","Fleet",buildFleetSettings)}function addOptionUI(e,t,i,a){if(null!==document.getElementById(e))return;let r=$(t);if(0===r.length)return;let n=$(`<span id="${e}" class="s-options-button has-text-success" style="margin-right:0px">+</span>`);r.prepend(n),n.on("click",(()=>{openOptionsModal(i,a)}))}function openOptionsModal(e,t){let i=$("#scriptModalHeader");i.empty().off("*"),i.append(`<span style="user-select: text">${e}</span>`);let a=$("#scriptModalBody");a.empty().off("*"),t(a,"c_");let r=document.getElementById("scriptModal");$("html").css("overflow","hidden"),r.style.display="block"}function createOptionsModal(){null===document.getElementById("scriptModal")&&($(document.body).append('\n          <div id="scriptModal" class="script-modal content">\n            <span id="scriptModalClose" class="script-modal-close">&times;</span>\n            <div class="script-modal-content">\n              <div id="scriptModalHeader" class="script-modal-header has-text-warning">\n                <p>You should never see this modal header...</p>\n              </div>\n              <div id="scriptModalBody" class="script-modal-body">\n                <p>You should never see this modal body...</p>\n              </div>\n            </div>\n          </div>'),$("#scriptModalClose").on("click",(()=>{$("#scriptModal").css("display","none"),$(".script-modal-content").removeClass("override-modal"),$("html").css("overflow-y","scroll")})),$(window).on("click",(e=>{"scriptModal"===e.target.id&&($("#scriptModal").css("display","none"),$(".script-modal-content").removeClass("override-modal"),$("html").css("overflow-y","scroll"))})))}function updatePrestigeInTopBar(){settings.displayPrestigeTypeInTopBar?addPrestigeToTopBar():removePrestigeFromTopBar();let e=document.getElementById("s-prestige-type");if(null==e)return;let t=prestigeTypes.find((e=>e.val===settings.prestigeType));e.title=t.hint,e.textContent=t.label}function addPrestigeToTopBar(){if(null!==document.getElementById("s-prestige-type"))return;let e=$("#topBar .planetWrap");0!==e.length&&e.append($('<span id="s-prestige-type" style="border-left: 1px solid; margin-left: 1rem; padding-left: 1rem;" ></span>'))}function removePrestigeFromTopBar(){let e=document.getElementById("s-prestige-type");null!=e&&e.remove()}function updateTotalDaysInTopBar(){settings.displayTotalDaysTypeInTopBar?addTotalDaysToTopBar():removeTotalDaysFromTopBar();const e=document.getElementById("s-total-days-count");null!=e&&(e.textContent=game.global.stats.days)}function addTotalDaysToTopBar(){if(null!==document.getElementById("s-total-days"))return;const e=$("#topBar .calendar");0!==e.length&&e.find(".day").after($('<span id="s-total-days" class="has-text-warning" style="padding-left: 3px;">(<span id="s-total-days-count"></span>)</span>'))}function removeTotalDaysFromTopBar(){let e=document.getElementById("s-total-days");null!=e&&e.remove()}function updateUI(){let e=!1,t=document.documentElement.scrollTop||document.body.scrollTop;createOptionsModal(),updateOptionsUI(),updatePrestigeInTopBar();let i=$("#autoScriptContainer");if(0===i.length){e=!0,$("#resources").append(`\n              <div id="autoScriptContainer" style="margin-top: 10px;">\n                <h3 id="toggleSettingsCollapsed" class="script-collapsible text-center has-text-success">Automation</h3>\n                <div id="scriptToggles">\n                  <label>More script options available in Settings tab<br>${overrideKeyLabel}+click options to open <span class="inactive-row">advanced configuration</span></label><br>\n                </div>\n              </div>`);let t=$("#toggleSettingsCollapsed"),i=$("#scriptToggles");t.toggleClass("script-contentactive",!settingsRaw.toggleSettingsCollapsed),i.css("display",settingsRaw.toggleSettingsCollapsed?"none":"block"),t.on("click",(()=>{settingsRaw.toggleSettingsCollapsed=!settingsRaw.toggleSettingsCollapsed,t.toggleClass("script-contentactive",!settingsRaw.toggleSettingsCollapsed),i.css("display",settingsRaw.toggleSettingsCollapsed?"none":"block"),updateSettingsFromState()})),createSettingToggle(i,"masterScriptToggle","Stop taking any actions on behalf of the player."),createSettingToggle(i,"showSettings","You can disable rendering of settings UI once you've done with configuring script, if you experiencing performance issues. It can help a little.",buildScriptSettings,removeScriptSettings),createSettingToggle(i,"autoPrestige","Allows script to finish current run after reaching configured goal. Prestige Type is recommended to be set even with manual resetting, as script uses that to make various decisions such as picking theology techs, or skipping buildings leading in wrong direction."),createSettingToggle(i,"autoEvolution","Runs through the evolution part of the game through to founding a settlement. In Auto Achievements mode will target races that you don't have extinction\\greatness achievements for yet."),createSettingToggle(i,"autoFight","Manage spies, and sends troops to battle whenever Soldiers are full and there are no wounded. Adds to your offensive battalion and switches attack type when offensive rating is greater than the rating cutoff for that attack type. Will not manage spies when Spy Operator governor task is active."),createSettingToggle(i,"autoHell","Sends soldiers to hell and sends them out on patrols. Adjusts maximum number of powered attractors based on threat."),createSettingToggle(i,"autoMech","Builds most effective large mechs for current spire floor. Least effective will be scrapped to make room for new ones. Will not build or scrap anything when Mech Constructor governor task is active.",createMechInfo,removeMechInfo),createSettingToggle(i,"autoFleet","Manages Andromeda fleet to supress piracy"),createSettingToggle(i,"autoTax","Adjusts tax rates if your current morale is greater than your maximum allowed morale. Will always keep morale above 100%. Disabled when Tax-Morale Balance governor task is active."),createSettingToggle(i,"autoGovernment","Manage changes of government and governor when they becomes available. Governor will be selected once, and won't be reassigned, unless manually fired."),createSettingToggle(i,"autoCraft","Automatically produce craftable resources, thresholds when it happens depends on current demands and stocks.",createCraftToggles,removeCraftToggles),createSettingToggle(i,"autoTrigger","Purchase triggered buildings, projects, and researches once conditions met"),createSettingToggle(i,"autoBuild","Construct buildings based on their weightings(user configured), and various rules(e.g. it won't build building which have no support to run)",createBuildingToggles,removeBuildingToggles),createSettingToggle(i,"autoARPA","Builds ARPA projects if user enables them to be built.",createArpaToggles,removeArpaToggles),createSettingToggle(i,"autoPower","Manages power based on a priority order of buildings. Also disables currently useless buildings to save up resources."),createSettingToggle(i,"autoStorage","Assigns crates and containers to resources needed for buildings enabled for Auto Build, queued buildings, researches, and enabled projects. Disabled when Crate/Container Manager governor task is active.",createStorageToggles,removeStorageToggles),createSettingToggle(i,"autoMarket","Allows for automatic buying and selling of resources once specific ratios are met. Also allows setting up trade routes until a minimum specified money per second is reached. The will trade in and out in an attempt to maximize your trade routes.",createMarketToggles,removeMarketToggles),createSettingToggle(i,"autoGalaxyMarket","Manages galaxy trade routes"),createSettingToggle(i,"autoResearch","Performs research when minimum requirements are met."),createSettingToggle(i,"autoJobs","Assigns jobs in a priority order with multiple breakpoints. Starts with a few jobs each and works up from there. Will try to put a minimum number on lumber / stone then fill up capped jobs first."),createSettingToggle(i,"autoCraftsmen","Manage foundry workers, switching between resources at given ratio."),createSettingToggle(i,"autoAlchemy","Manages alchemic transmutations"),createSettingToggle(i,"autoPylon","Manages pylon rituals"),createSettingToggle(i,"autoQuarry","Manages rock quarry stone to chrysotile ratio for smoldering races"),createSettingToggle(i,"autoMine","Manages titan mine aluminium to adamantite ratio in true path"),createSettingToggle(i,"autoExtractor","Manages extractor ship mining ratios in true path"),createSettingToggle(i,"autoSmelter","Manages smelter fuel and production."),createSettingToggle(i,"autoFactory","Manages factory production."),createSettingToggle(i,"autoMiningDroid","Manages mining droid production."),createSettingToggle(i,"autoGraphenePlant","Manages graphene plant. Not user configurable - just uses least demanded resource for fuel."),createSettingToggle(i,"autoGenetics","Managed genetics settings, and automatically assembles genes more optimally than ingame sequencer"),createSettingToggle(i,"autoMinorTrait","Purchase minor traits using genes according to their weighting settings. Also manages Mimic genus, and Psychic powers."),createSettingToggle(i,"autoMutateTraits","Mutate in or out major and genus traits. WARNING: This will spend spend Plasmids and Anti-Plasmids."),createSettingToggle(i,"autoEject","Eject excess resources to black hole. Normal resources ejected when they close to storage cap, craftables - when above requirements. Disabled when Mass Ejector Optimizer governor task is active.",createEjectToggles,removeEjectToggles),createSettingToggle(i,"autoSupply","Send excess resources to Spire. Normal resources sent when they close to storage cap, craftables - when above requirements. Takes priority over ejector.",createSupplyToggles,removeSupplyToggles),createSettingToggle(i,"autoNanite","Consume resources to produce Nanite. Normal resources sent when they close to storage cap, craftables - when above requirements. Takes priority over supplies and ejector."),createSettingToggle(i,"autoReplicator","Use excess power to replicate resources."),createQuickOptions(i,"s-quick-prestige-options","Prestige",buildPrestigeSettings),i.append('<a class="button is-dark is-small" id="bulk-sell"><span>Bulk Sell</span></a>'),$("#bulk-sell").on("mouseup",(()=>{updateDebugData(),updateScriptData(),finalizeScriptData(),autoMarket(!0,!0)}))}if(i.next().length&&(e=!0,i.parent().append(i)),settingsRaw.showSettings&&0===$("#script_settings").length&&buildScriptSettings(),settingsRaw.autoCraft&&0===$("#resources .ea-craft-toggle").length&&createCraftToggles(),settingsRaw.autoBuild){let e=$("#mTabCivil .ea-building-toggle").length;0!==e&&e===state.buildingToggles||createBuildingToggles()}if(settingsRaw.autoStorage&&game.global.settings.showStorage&&0===$("#resStorage .ea-storage-toggle").length&&createStorageToggles(),settingsRaw.autoMarket&&game.global.settings.showMarket&&0===$("#market .ea-market-toggle").length&&createMarketToggles(),settingsRaw.autoEject&&game.global.settings.showEjector&&0===$("#resEjector .ea-eject-toggle").length&&createEjectToggles(),settingsRaw.autoSupply&&game.global.settings.showCargo&&0===$("#resCargo .ea-supply-toggle").length&&createSupplyToggles(),settingsRaw.autoARPA&&game.global.settings.showGenetics&&0===$("#arpaPhysics .ea-arpa-toggle").length&&createArpaToggles(),settingsRaw.autoMech&&game.global.settings.showMechLab&&$("#mechList .ea-mech-info").length<$("#mechList .mechRow").length&&createMechInfo(),settings.hellTurnOffLogMessages&&("Yes"===game.global.portal.fortress?.notify&&$("#fort .b-checkbox").eq(0).click(),"Yes"===game.global.portal.fortress?.s_ntfy&&$("#fort .b-checkbox").eq(1).click()),resources.Soul_Gem.isUnlocked()){let e=Math.floor(state.scriptTick/4);resources.Soul_Gem.currentQuantity>state.soulGemLast&&(state.soulGemIncomes.push({sec:e,gems:resources.Soul_Gem.currentQuantity-state.soulGemLast}),state.soulGemLast=resources.Soul_Gem.currentQuantity);let t=0,i=state.soulGemIncomes.length;for(;--i>=0;){let a=state.soulGemIncomes[i];if(e-a.sec>3600&&t>10)break;t+=a.gems}i>=0&&(state.soulGemIncomes=state.soulGemIncomes.splice(i+1));let a=t/(e-state.soulGemIncomes[0].sec)*3600;state.soulGemPerHour=a,a>=1e3&&(a=Math.round(a)),$("#resSoul_Gem span:eq(2)").text(`${t>0&&e<=3600?"~":""}${getNiceNumber(a)} /h`)}if(1===$("#statsPanel .cstat").length){let e=win.LZString.decompressFromUTF16(localStorage.getItem("evolveBak"));if(e){let t=JSON.parse(e).stats,i={knowledge_spent:t.know,starved_to_death:t.starved,died_in_combat:t.died,attacks_made:t.attacks,game_days_played:t.days};t.dkills>0&&(i.demons_kills=t.dkills),t.sac>0&&(i.sacrificed=t.sac),t.murders>0&&(i.murders=t.murders),t.psykill>0&&(i.psymurders=t.psykill);let a='<div class="cstat"><span class="has-text-success">Previous Game</span></div>';for(let[e,r]of Object.entries(i))a+=`<div><span class="has-text-warning">${game.loc("achieve_stats_"+e)}</span> ${r.toLocaleString()}</div>`;$("#statsPanel").append(a)}}e&&(document.documentElement.scrollTop=document.body.scrollTop=t),updateTotalDaysInTopBar()}function createMechInfo(){if(!($("#mechList .mechRow[draggable=true]").length>0)&&(MechManager.isActive||MechManager.initLab())){MechManager.mechObserver.disconnect();let e=getVueById("mechList");for(let t=0;t<e._vnode.children.length;t++){let i=game.global.portal.mechbay.mechs[t],a=MechManager.getMechStats(i),r=a.power/MechManager.bestMech[i.size].power,n=("collector"===i.size?`${Math.round(100*r)}%, ${getNiceNumber(a.power*MechManager.collectorValue)} /s`:`${Math.round(100*r)}%, ${getNiceNumber(100*a.power)}, ${getNiceNumber(100*a.efficiency)}`)+" | ",o=e._vnode.children[t].elm,l=$(o.childNodes[0]);if(l.hasClass("ea-mech-info"))l.text(n);else{let e=document.createElement("span");e.className="ea-mech-info",e.innerHTML=n,o.insertBefore(e,o.firstChild)}}MechManager.mechObserver.observe(document.getElementById("mechList"),{childList:!0})}}function removeMechInfo(){MechManager.mechObserver.disconnect(),$("#mechList .ea-mech-info").remove()}function createArpaToggles(){removeArpaToggles();for(let e=0;e<ProjectManager.priorityList.length;e++){let t=ProjectManager.priorityList[e],i=$("#arpa"+t.id+" .head");if(i.length){let e="arpa_"+t.id;i.append(addToggleCallbacks($(`\n                  <label tabindex="0" class="switch ea-arpa-toggle" style="position:relative; max-width:75px; margin-top:-36px; left:59%; float:left;">\n                    <input class="script_${e}" type="checkbox"${settingsRaw[e]?" checked":""}>\n                    <span class="check" style="height:5px;"></span>\n                  </label>`),e))}}}function removeArpaToggles(){$("#arpaPhysics .ea-arpa-toggle").remove()}function createCraftToggles(){removeCraftToggles();for(let e=0;e<craftablesList.length;e++){let t=craftablesList[e],i=$("#res"+t.id+" h3");if(i.length){let e="craft"+t.id;i.prepend(addToggleCallbacks($(`\n                  <label tabindex="0" class="switch ea-craft-toggle">\n                    <input class="script_${e}" type="checkbox"${settingsRaw[e]?" checked":""}/>\n                    <span class="check" style="height:5px;"></span>\n                  </label>`),e))}}}function removeCraftToggles(){$("#resources .ea-craft-toggle").remove()}function createBuildingToggles(){if(removeBuildingToggles(),settings.showSettings)for(let e=0;e<BuildingManager.priorityList.length;e++){let t=BuildingManager.priorityList[e],i=$("#"+t._vueBinding);if(i.length){let e="bat"+t._vueBinding;i.append(addToggleCallbacks($(`\n                  <label tabindex="0" class="switch ea-building-toggle" style="position:absolute; margin-top: 24px; left:10%;">\n                    <input class="script_${e}" type="checkbox"${settingsRaw[e]?" checked":""}/>\n                    <span class="check" style="height:5px; max-width:15px"></span>\n                  </label>`),e)),state.buildingToggles++}}}function removeBuildingToggles(){$("#mTabCivil .ea-building-toggle").remove(),state.buildingToggles=0}function createEjectToggles(){removeEjectToggles(),$("#eject").append('<span id="script_eject_top_row" style="margin-left: auto; margin-right: 0.2rem; float: right;" class="has-text-danger">Auto Eject</span>');for(let e of EjectManager.priorityList){let t=$("#eject"+e.id);if(t.length){let i="res_eject"+e.id;t.append(addToggleCallbacks($(`\n                  <label tabindex="0" title="Enable ejecting of this resource. When to eject is set in the Prestige Settings tab." class="switch ea-eject-toggle" style="margin-left:auto; margin-right:0.2rem;">\n                    <input class="script_${i}" type="checkbox"${settingsRaw[i]?" checked":""}>\n                    <span class="check" style="height:5px;"></span>\n                    <span class="state"></span>\n                  </label>`),i))}}}function removeEjectToggles(){$("#resEjector .ea-eject-toggle").remove(),$("#script_eject_top_row").remove()}function createSupplyToggles(){removeSupplyToggles(),$("#spireSupply").append('<span id="script_supply_top_row" style="margin-left: auto; margin-right: 0.2rem; float: right;" class="has-text-danger">Auto Supply</span>');for(let e of SupplyManager.priorityList){let t=$("#supply"+e.id);if(t.length){let i="res_supply"+e.id;t.append(addToggleCallbacks($(`\n                  <label tabindex="0" title="Enable supply of this resource."  class="switch ea-supply-toggle" style="margin-left:auto; margin-right:0.2rem;">\n                    <input class="script_${i}" type="checkbox"${settingsRaw[i]?" checked":""}>\n                    <span class="check" style="height:5px;"></span>\n                    <span class="state"></span>\n                  </label>`),i))}}}function removeSupplyToggles(){$("#resCargo .ea-supply-toggle").remove(),$("#script_supply_top_row").remove()}function createMarketToggles(){removeMarketToggles(),game.global.race.no_trade||($("#market .market-item[id] .res").width("5rem"),$("#market .market-item[id] .buy span").text("B"),$("#market .market-item[id] .sell span").text("S"),$("#market .market-item[id] .trade > :first-child").text("R"),$("#market .market-item[id] .trade .zero").text("×")),$("#market-qty").after(`\n          <div class="market-item vb" id="script_market_top_row" style="overflow:hidden">\n            <span style="margin-left: auto; margin-right: 0.2rem; float:right;">\n              ${game.global.race.no_trade?"":'\n              <span class="has-text-success" style="width: 2.75rem; margin-right: 0.3em; display: inline-block; text-align: center;">Buy</span>\n              <span class="has-text-danger" style="width: 2.75rem; margin-right: 0.3em; display: inline-block; text-align: center;">Sell</span>'}\n              <span class="has-text-warning" style="width: 2.75rem; margin-right: 0.3em; display: inline-block; text-align: center;">In</span>\n              <span class="has-text-warning" style="width: 2.75rem; display: inline-block; text-align: center;">Away</span>\n            </span>\n          </div>`);for(let e of MarketManager.priorityList){if(e===resources.Food&&(game.global.race.artifical||game.global.race.fasting))continue;let t=$("#market-"+e.id);if(t.length>0){let i=$('<span class="ea-market-toggle" style="margin-left: auto; margin-right: 0.2rem; float:right;"></span>');if(!game.global.race.no_trade){let t="buy"+e.id,a="sell"+e.id;i.append(addToggleCallbacks($(`<label tabindex="0" title="Enable buying of this resource." class="switch"><input class="script_${t}" type="checkbox"${settingsRaw[t]?" checked":""}><span class="check" style="height:5px;"></span><span class="state"></span></label>`),t),addToggleCallbacks($(`<label tabindex="0" title="Enable selling of this resource." class="switch"><input class="script_${a}" type="checkbox"${settingsRaw[a]?" checked":""}><span class="check" style="height:5px;"></span><span class="state"></span></label>`),a))}let a="res_trade_buy_"+e.id,r="res_trade_sell_"+e.id;i.append(addToggleCallbacks($(`<label tabindex="0" title="Enable trading for this resource." class="switch"><input class="script_${a}" type="checkbox"${settingsRaw[a]?" checked":""}><span class="check" style="height:5px;"></span><span class="state"></span></label>`),a),addToggleCallbacks($(`<label tabindex="0" title="Enable trading this resource away." class="switch"><input class="script_${r}" type="checkbox"${settingsRaw[r]?" checked":""}><span class="check" style="height:5px;"></span><span class="state"></span></label>`),r)),i.appendTo(t)}}}function removeMarketToggles(){$("#market .ea-market-toggle").remove(),$("#script_market_top_row").remove(),game.global.race.no_trade||($("#market .market-item[id] .res").width("7.5rem"),$("#market .market-item[id] .buy span").text(game.loc("resource_market_buy")),$("#market .market-item[id] .sell span").text(game.loc("resource_market_sell")),$("#market .market-item[id] .trade > :first-child").text(game.loc("resource_market_routes")),$("#market .market-item[id] .trade .zero").text(game.loc("cancel_routes")))}function createStorageToggles(){removeStorageToggles(),$("#createHead").after('\n          <div class="market-item vb" id="script_storage_top_row" style="overflow:hidden">\n            <span style="margin-left: auto; margin-right: 0.2rem; float:right;">\n              <span class="has-text-warning" style="width: 2.75rem; margin-right: 0.3em; display: inline-block; text-align: center;">Auto</span>\n              <span class="has-text-warning" style="width: 2.75rem; display: inline-block; text-align: center;">Over</span>\n            </span>\n          </div>');for(let e of StorageManager.priorityList){let t=$("#stack-"+e.id);if(t.length>0){let i="res_storage"+e.id,a="res_storage_o_"+e.id;$('<span class="ea-storage-toggle" style="margin-left: auto; margin-right: 0.2rem; float:right;"></span>').append(addToggleCallbacks($(`<label tabindex="0" title="Enable storing of this resource." class="switch"><input class="script_${i}" type="checkbox"${settingsRaw[i]?" checked":""}><span class="check" style="height:5px;"></span><span class="state"></span></label>`),i),addToggleCallbacks($(`<label tabindex="0" title="Enable storing overflow of this resource." class="switch"><input class="script_${a}" type="checkbox"${settingsRaw[a]?" checked":""}><span class="check" style="height:5px;"></span><span class="state"></span></label>`),a)).appendTo(t)}}}function removeStorageToggles(){$("#resStorage .ea-storage-toggle").remove(),$("#script_storage_top_row").remove()}function sorterHelper(e,t){let i=$(t).clone();i.css("position","absolute"),t instanceof HTMLElement||(t=t[0]);let a=i[0];return t.childNodes.forEach(((e,t)=>{e.offsetWidth&&e.offsetHeight&&(a.childNodes[t].style.width=`${e.offsetWidth}px`,a.childNodes[t].style.height=`${e.offsetHeight}px`)})),a}function k_combinations(e,t){if(t>e.length||t<=0)return[[]];if(t==e.length)return[e];if(1==t)return e.map((e=>[e]));let i=[],a=[];for(let r=0;r<e.length-t+1;r++){a=k_combinations(e.slice(r+1),t-1);for(let t=0;t<a.length;t++)i.push([e[r],...a[t]])}return i}function*cartesian(e,...t){let i=t.length>0?cartesian(...t):[[]];for(let a of i)for(let t of e)yield[t,...a]}function average(e){return e.reduce(((e,t)=>e+t))/e.length}function ticksPerSecond(){return 4/settings.tickRate/(game.global.settings.at?2:1)}function getHealingRate(){let e=game.global.race.orbit_decayed&&game.global.race.truepath?buildings.EnceladusBase.stateOnCount:game.global.race.artifical?buildings.BootCamp.count:buildings.Hospital.count;game.global.race.rejuvenated&&game.global.stats.achieve.lamentis&&(e+=Math.min(game.global.stats.achieve.lamentis.l,5)),e*="cancer"===state.astroSign?1.05:1,e*=game.global.tech.medic||1,e+=2*game.global.race.fibroblast||0,game.global.city.s_alter?.regen>0&&(e>=20?e*=traitVal("cannibalize",0,"+"):e+=Math.floor(traitVal("cannibalize",0)/5)),e*=traitVal("high_pop",2,1),"sports"===getGovernor()&&(e*=1.5);let t=20*traitVal("slow_regen",0,"+");e=Math.round(e);let i=traitVal("regenerative",0,1)+Math.floor(e/t),a=e%t;if(a>0){let e=a*t,r=0;for(let i=0;i<a;i++)for(let e=0;e<t;e++)r+=i>e;i+=r/e}return i}function getFoodConsume(){let e=1;if(e*=traitVal("gluttony",0,"+"),e*=traitVal("high_metabolism",0,"+"),e*=traitVal("sticky",0,"-"),game.global.race.photosynth)switch(game.global.city.calendar.weather){case 0:e*=0===game.global.city.calendar.temp?1:traitVal("photosynth",2,"-");break;case 1:e*=traitVal("photosynth",1,"-");break;case 2:e*=traitVal("photosynth",0,"-")}e*=traitVal("ravenous",0,"+");let t=game.global.city.calendar.day+Math.ceil(settings.tickRate/4)>=game.global.city.calendar.orbit;return e*=3!==game.global.city.calendar.season||t?1:traitVal("hibernator",0,"-"),e/=traitVal("high_pop",0,1),e}function getGrowthRate(){if(game.global.race.artifical||game.global.race.spongy&&0===game.global.city.calendar.weather||game.global.race.parasite&&0===game.global.city.calendar.wind&&!game.global.race.cataclysm)return 0;let e=new Date,t=game.global.tech.reproduction??0;haveTech("reproduction")&&1===e.getMonth()&&14===e.getDate()&&(t+=5),t*=traitVal("fast_growth",0,1),t+=traitVal("fast_growth",1,0),game.global.race.spores&&1===game.global.city.calendar.wind&&(game.global.race.parasite?t+=traitVal("spores",2):(t+=traitVal("spores",0),t*=traitVal("spores",1))),t+=buildings.Hospital.count*(haveTech("reproduction",2)?1:0),t+=game.global.genes.birth??0,t+=game.global.race.promiscuous??0,t+=game.global.race.fasting?jobs.Meditator.count*traitVal("high_pop",1,"=")*.15:0,t*=buildings.Banquet.stateOnCount>0&&buildings.Banquet.count>=1?1+game.global.city.banquet.strength**.75/100:1,t*="libra"===state.astroSign?1.25:1,t*=traitVal("high_pop",2,1),t*="taiga"===game.global.city.biome?1.5:1;let i=resources.Population.currentQuantity*(game.global.city.ptrait.includes("toxic")?1.25:1);return game.global.race.parasite&&game.global.race.cataclysm&&(t=Math.round(t/5),i*=3),t/(1.810792884997279*i/2)}function getResourcesPerClick(){return traitVal("strong",0,1)*(game.global.genes.enhance?2:1)}function getCostConflict(e){let t={};for(let i of state.conflictTargets){let a=!0;for(let e in i.cost)if("Knowledge"!==e&&resources[e].currentQuantity<i.cost[e]){a=!1;break}for(let r in i.cost)if(("Knowledge"!==r||a)&&i.cost[r]>resources[r].currentQuantity-e.cost[r]){const e=t.resList||[],a=t.actionList||[];t={res:resources[r],obj:i,resList:[...new Set([...e,r])],actionList:[...new Set([...a,i.name])]}}}return $.isEmptyObject(t)?null:t}function getRealNumber(e){if(""===e)return 0;let t=parseFloat(e),i=e[e.length-1];return numberSuffix[i]!==undefined&&(t*=numberSuffix[i]),t}function getNumberString(e){let t=Object.keys(numberSuffix);for(let i=t.length-1;i>=0;i--)if(e>numberSuffix[t[i]])return(e/numberSuffix[t[i]]).toFixed(1)+t[i];return Math.ceil(e)}function getNiceNumber(e){return parseFloat(e<1?e.toPrecision(2):e.toFixed(2))}function getGovernor(){return game.global.race.governor?.g?.bg??"none"}function haveTask(e){return Object.values(game.global.race.governor?.tasks??{}).includes(e)}function haveTech(e,t=1){return game.global.tech[e]&&game.global.tech[e]>=t}function isEarlyGame(){return!(game.global.race.cataclysm||game.global.race.orbit_decayed||game.global.race.lone_survivor||(game.global.race.truepath||game.global.race.sludge?haveTech("high_tech",7):haveTech("mad")))}function isHungryRace(){return game.global.race.carnivore&&!game.global.race.herbivore&&!game.global.race.artifical||game.global.race.ravenous}function isDemonRace(){return game.global.race.soul_eater&&game.global.race.evil&&"wendigo"!==game.global.race.species}function isLumberRace(){return!game.global.race.kindling_kindred&&!game.global.race.smoldering}function getOccCosts(){return traitVal("high_pop",0,1)*("federation"===game.global.civic.govern.type?15:20)}function getGovName(e){let t=game.global.civic.foreign["gov"+e];return t.name?poly.loc("civics_gov"+t.name.s0,[t.name.s1])+` (${e+1})`:"foreign power "+(e+1)}function getGovPower(e){let t=game.global.civic.foreign["gov"+e];if(t.spy>0)return t.mil;{let i=[75,125,200,650,300],a=[125,175,300,750,300];return game.global.race.truepath&&[1.5,1.4,1.25].forEach(((e,t)=>{i[t]*=e,a[t]*=e})),t.mil<i[e]?t.mil:a[e]}}function fastEval(s){return evalCache[s]||(evalCache[s]=eval(`(function() { return ${s} })`)),evalCache[s]()}function getVueById(e){let t=win.document.getElementById(e);return null!==t&&t.__vue__?t.__vue__:undefined}function normalizeProperties(e,t=[]){for(let i in e)if("object"!=typeof e[i]||e[i].constructor!==Object&&e[i].constructor!==Array&&-1===t.indexOf(e[i].constructor)||(e[i]=normalizeProperties(e[i],t)),"function"==typeof e[i]){let t=e[i].bind(e);Object.defineProperty(e,i,{configurable:!0,enumerable:!0,get:()=>t()})}return e}function addProps(e,t,i){for(let a of Object.values(e))for(let e=0;e<i.length;e++){let r=i[e].s+t(a),n=i[e].p;Object.defineProperty(a,n,{configurable:!0,enumerable:!0,get:()=>settings[r]})}return e}function triggerFileDownload(e,t){let i=URL.createObjectURL(new Blob([e])),a=document.createElement("a");a.download=t,a.href=i,a.click(),setTimeout((()=>{URL.revokeObjectURL(i)}),6e4)}function traitVal(e,t,i){if(game.global.race[e]){let a=game.traits[e].vars()[t];return"-"===i?1-a/100:"+"===i?1+a/100:"="===i?a/100:a}return"+"===i||"-"===i||"="===i?1:i??0}var settingsRaw=JSON.parse(localStorage.getItem("settings"))??{},settings={},game=null,win=null,needSandboxBypass=!1,overrideKey="ctrlKey",overrideKeyLabel="Ctrl";0===window.navigator.platform.indexOf("Mac")&&(overrideKey="altKey",overrideKeyLabel="Alt");var checkActions=!1;const CONSUMPTION_BALANCE_MIN=60,CONSUMPTION_BALANCE_TARGET=120;class Job{constructor(e,t,i){this._originalId=e,this._originalName=t,this._workerBinding="civ-"+this._originalId,this.is=normalizeProperties(i)??{}}get autoJobEnabled(){return settings["job_"+this._originalId]}get isSmartEnabled(){return settings["job_s_"+this._originalId]}get priority(){return settingsRaw["job_p_"+this._originalId]}getBreakpoint(e){return settings[`job_b${e+1}_${this._originalId}`]}get definition(){return game.global.civic[this._originalId]}get id(){return this.definition.job}get name(){return this.definition.name}isUnlocked(){return this.definition.display}isManaged(){return!!this.isUnlocked()&&this.autoJobEnabled}get workers(){return this.definition.workers}get servants(){return 0}get count(){return this.workers+this.servants*traitVal("high_pop",0,1)}get max(){return this.definition.max}breakpointEmployees(e,t){let i=this.getBreakpoint(e);return-1===i?i=Number.MAX_SAFE_INTEGER:settings.jobScalePop&&"hell_surveyor"!==this._originalId&&(i*=traitVal("high_pop",0,1)),t?i:Math.min(i,this.max)}addWorkers(e){if(this.isDefault())return!1;e<0&&this.removeWorkers(-1*e);let t=getVueById(this._workerBinding);if(t===undefined)return!1;for(let i of KeyManager.click(e))t.add()}removeWorkers(e){if(this.isDefault())return!1;e<0&&this.addWorkers(-1*e);let t=getVueById(this._workerBinding);if(t===undefined)return!1;for(let i of KeyManager.click(e))t.sub()}isDefault(){return!1}}class BasicJob extends Job{constructor(...e){super(...e),this._servantBinding="servant-"+this._originalId}get servants(){return game.global.race.servants?.jobs[this._originalId]??0}get max(){return Number.MAX_SAFE_INTEGER}addServants(e){e<0&&this.removeServants(-1*e);let t=getVueById(this._servantBinding);if(t===undefined)return!1;for(let i of KeyManager.click(e))t.add()}removeServants(e){e<0&&this.addServants(-1*e);let t=getVueById(this._servantBinding);if(t===undefined)return!1;for(let i of KeyManager.click(e))t.sub()}isDefault(){return game.global.civic.d_job===this.id}setAsDefault(){getVueById(this._workerBinding)?.setDefault(this.id)}}class CraftingJob extends Job{constructor(e,t,i){super(e,t,{serve:!0}),this._crafterBinding="foundry",this._servantBinding="skilledServants",this.resource=i}get definition(){return game.global.civic.craftsman}get id(){return this.resource.id}isUnlocked(){return game.global.resource[this._originalId].display}get servants(){return game.global.race.servants?.sjobs[this._originalId]??0}get workers(){return game.global.city.foundry?.[this._originalId]??0}get max(){return game.global.civic.craftsman.max}addWorkers(e){if(!this.isUnlocked())return!1;e<0&&this.removeWorkers(-1*e);let t=getVueById(this._crafterBinding);if(t===undefined)return!1;for(let i of KeyManager.click(e))t.add(this._originalId)}removeWorkers(e){if(!this.isUnlocked())return!1;e<0&&this.addWorkers(-1*e);let t=getVueById(this._crafterBinding);if(t===undefined)return!1;for(let i of KeyManager.click(e))t.sub(this._originalId)}addServants(e){e<0&&this.removeServants(-1*e);let t=getVueById(this._servantBinding);if(t===undefined)return!1;for(let i of KeyManager.click(e))t.add(this._originalId)}removeServants(e){e<0&&this.addServants(-1*e);let t=getVueById(this._servantBinding);if(t===undefined)return!1;for(let i of KeyManager.click(e))t.sub(this._originalId)}}class Resource{constructor(e,t,i){this.name=e,this._id=t,this.currentQuantity=0,this.maxQuantity=0,this.rateOfChange=0,this.rateMods={},this.tradeBuyPrice=0,this.tradeSellPrice=0,this.tradeRoutes=0,this.incomeAdusted=!1,this.maxCost=0,this.storageRequired=1,this.requestedQuantity=0,this.cost={},this._vueBinding="res"+t,this._stackVueBinding="stack-"+t,this._marketVueBinding="market-"+t,this.is=normalizeProperties(i)??{}}get autoCraftEnabled(){return settings["craft"+this.id]}get craftWeighting(){return settings["foundry_w_"+this.id]}get craftPreserve(){return settings["foundry_p_"+this.id]}get autoStorageEnabled(){return settings["res_storage"+this.id]}get storagePriority(){return settingsRaw["res_storage_p_"+this.id]}get storeOverflow(){return settings["res_storage_o_"+this.id]}get minStorage(){return settings["res_min_store"+this.id]}get maxStorage(){return settings["res_max_store"+this.id]}get marketPriority(){return settingsRaw["res_buy_p_"+this.id]}get autoBuyEnabled(){return settings["buy"+this.id]}get autoBuyRatio(){return settings["res_buy_r_"+this.id]}get autoSellEnabled(){return settings["sell"+this.id]}get autoSellRatio(){return settings["res_sell_r_"+this.id]}get autoTradeBuyEnabled(){return settings["res_trade_buy_"+this.id]}get autoTradeSellEnabled(){return settings["res_trade_sell_"+this.id]}get autoTradeWeighting(){return settings["res_trade_w_"+this.id]}get autoTradePriority(){return settings["res_trade_p_"+this.id]}get galaxyMarketWeighting(){return settings["res_galaxy_w_"+this.id]}get galaxyMarketPriority(){return settings["res_galaxy_p_"+this.id]}get title(){return this.instance?.name||this.name}get instance(){return game.global.resource[this.id]}get id(){return this._id}get currentCrates(){return this.instance.crates}get currentContainers(){return this.instance.containers}updateData(){if(!this.isUnlocked())return;let e=this.instance;this.currentQuantity=e.amount,this.maxQuantity=e.max>=0?e.max:Number.MAX_SAFE_INTEGER,this.rateOfChange=e.diff,this.rateMods={},this.incomeAdusted=!1}finalizeData(){if(this.isUnlocked()&&this.constructor===Resource){if(settings.autoMarket&&this.is.tradable){this.tradeRoutes=this.instance.trade,this.tradeBuyPrice=game.tradeBuyPrice(this._id),this.tradeSellPrice=game.tradeSellPrice(this._id);let e=game.breakdown.p.consume[this._id]?.Trade||0;e>0?this.rateMods.buy=-1*e:e<0&&(this.rateMods.sell=-1*e,this.rateOfChange+=this.rateMods.sell)}game.global.race.decay&&this.tradeRouteQuantity>0&&this.currentQuantity>=50&&(this.rateMods.decay=.001*(this.currentQuantity-50)*this.tradeRouteQuantity,this.rateOfChange+=this.rateMods.decay)}}calculateRateOfChange(e){let t=this.rateOfChange;for(let i in this.rateMods)(e[i]??e.all)&&(t-=this.rateMods[i]);return t}isDemanded(){return this.requestedQuantity>this.currentQuantity}get income(){return this.calculateRateOfChange({buy:!1,all:!0})}get spareQuantity(){return this.currentQuantity-this.requestedQuantity}get spareMaxQuantity(){return this.maxQuantity-this.requestedQuantity}isUnlocked(){return this.instance?.display??!1}isRoutesUnlocked(){return this.isUnlocked()&&!(this===resources.Food&&(game.global.race.artifical||game.global.race.fasting))&&(game.global.race.banana&&this===resources.Food||game.global.tech.trade&&!game.global.race.terrifying)}isManagedStorage(){return this.hasStorage()&&this.autoStorageEnabled}get atomicMass(){return game.atomic_mass[this.id]??0}isUseful(){return this.storageRatio<.99||this.isDemanded()||this.rateMods.eject>0||this.rateMods.supply>0||this.storeOverflow&&this.currentQuantity<this.maxStorage}getProduction(e,t){let i=0,a=!1;for(let[r,n]of Object.entries(game.breakdown.p[this._id]??{}))if(-1===n.indexOf("%")){if(a)break;r===poly.loc(e,t)&&(a=!0,i+=parseFloat(n)||0)}else a&&this.isValidProductionLabel(r)&&(i*=1+(parseFloat(n)||0)/100);return i*state.globalProductionModifier}isValidProductionLabel(e){return"Iron"!==this._id||e!==`ᄂ${poly.loc("space_syndicate")}`}getBusyWorkers(e,t,i){if(this.incomeAdusted)return t;let a=0;if(t>0){let r=this.getProduction(e,i),n=r/t,o=r-this.income;o>0&&(a=Math.ceil(o/n))}else this.income<0&&(a=1);return a}isCraftable(){return game.craftCost.hasOwnProperty(this.id)}hasStorage(){return this.instance?.stackable??!1}get tradeRouteQuantity(){return game.tradeRatio[this.id]||-1}get storageRatio(){return this.maxQuantity>0?this.currentQuantity/this.maxQuantity:1}isCapped(){return!(this.maxQuantity>0)||this.currentQuantity+this.rateOfChange/ticksPerSecond()>=this.maxQuantity}get usefulRatio(){return this.maxQuantity>0&&this.storageRequired>0?this.currentQuantity/Math.min(this.maxQuantity,this.storageRequired):1}get timeToFull(){if(this.storageRatio>.98)return Number.MIN_SAFE_INTEGER;let e=this.income;return e<=0?Number.MAX_SAFE_INTEGER:(this.maxQuantity-this.currentQuantity)/e}get timeToRequired(){if(this.storageRatio>.98)return Number.MIN_SAFE_INTEGER;if(this.storageRequired<=1)return 0;let e=this.income;return e<=0?Number.MAX_SAFE_INTEGER:(Math.min(this.maxQuantity,this.storageRequired)-this.currentQuantity)/e}tryCraftX(e){let t=getVueById(this._vueBinding);if(t===undefined)return!1;KeyManager.set(!1,!1,!1),t.craft(this.id,e)}requestQuantity(e){this.currentQuantity<e&&this.requestedQuantity<e&&(this.requestedQuantity=e)}}class SoulGem extends Resource{updateData(){super.updateData(),this.rateOfChange=state.soulGemPerHour/3600}}class Supply extends Resource{updateData(){this.isUnlocked()&&(this.currentQuantity=game.global.portal.purifier.supply,this.maxQuantity=game.global.portal.purifier.sup_max,this.rateOfChange=game.global.portal.purifier.diff)}isUnlocked(){return game.global.portal.hasOwnProperty("purifier")}}class Power extends Resource{updateData(){if(this.isUnlocked()){this.currentQuantity=game.global.city.power,haveTask("replicate")&&(this.currentQuantity+=game.global.race.replicator.pow),this.rateOfChange=this.currentQuantity,this.maxQuantity=0,game.global.race.powered&&(this.maxQuantity+=(resources.Population.maxQuantity-resources.Population.currentQuantity)*traitVal("powered",0));for(let e of Object.values(buildings))if(e.stateOffCount>0){let t=e.stateOffCount;e.autoMax<e.count&&settings.masterScriptToggle&&settings.autoPower&&e.autoStateEnabled&&settings.buildingsLimitPowered&&(t-=e.count-e.autoMax),e===buildings.NeutronCitadel?this.maxQuantity+=getCitadelConsumption(e.stateOnCount+t)-getCitadelConsumption(e.stateOnCount):this.maxQuantity+=t*e.powered}}}get usefulRatio(){return this.currentQuantity>=this.maxQuantity?1:0}isUnlocked(){return game.global.city.powered}}class Support extends Resource{constructor(e,t,i,a){super(e,t),this._region=i,this._inRegionId=a}updateData(){this.isUnlocked()&&(this.maxQuantity=game.global[this._region][this.supportId].s_max,this.currentQuantity=game.global[this._region][this.supportId].support,this.rateOfChange=this.maxQuantity-this.currentQuantity)}get supportId(){return game.actions[this._region][this._inRegionId].info.support}get storageRatio(){return this.maxQuantity>0?(this.maxQuantity-this.currentQuantity)/this.maxQuantity:1}isUnlocked(){return game.global[this._region][this.supportId]!==undefined}}class BeltSupport extends Support{updateData(){if(!this.isUnlocked())return;let e=settings.autoPower&&buildings.BeltSpaceStation.autoStateEnabled?buildings.BeltSpaceStation.count:buildings.BeltSpaceStation.stateOnCount,t=settings.autoJobs&&jobs.SpaceMiner.autoJobEnabled&&jobs.SpaceMiner.isSmartEnabled?state.maxSpaceMiners:jobs.SpaceMiner.count;this.maxQuantity=Math.min(3*e*traitVal("high_pop",0,1),t),this.currentQuantity=game.global[this._region][this.supportId].support,this.rateOfChange=this.maxQuantity-this.currentQuantity}}class ElectrolysisSupport extends Support{updateData(){this.isUnlocked()&&(this.maxQuantity=buildings.TitanElectrolysis.stateOnCount,this.currentQuantity=buildings.TitanHydrogen.stateOnCount,this.rateOfChange=this.maxQuantity-this.currentQuantity)}isUnlocked(){return!!game.global.race.truepath}}class WomlingsSupport extends Support{updateData(){this.isUnlocked()&&(this.maxQuantity=buildings.TauRedWomlingVillage.stateOnCount*(haveTech("womling_pop",2)?6:5),this.currentQuantity=2*buildings.TauRedWomlingFarm.stateOnCount+buildings.TauRedWomlingLab.stateOnCount+6*buildings.TauRedWomlingMine.stateOnCount,this.rateOfChange=this.maxQuantity-this.currentQuantity)}isUnlocked(){return!!haveTech("tau_red",5)}}class PrestigeResource extends Resource{updateData(){this.currentQuantity=game.global.prestige[this.id].count,this.maxQuantity=Number.MAX_SAFE_INTEGER}isUnlocked(){return!0}}class Population extends Resource{get id(){return game.global.race.species}}class Morale extends Resource{updateData(){this.currentQuantity=game.global.city.morale.current,this.maxQuantity=game.global.city.morale.cap,this.rateOfChange=game.global.city.morale.potential,this.incomeAdusted=!1}isUnlocked(){return!0}}class Thrall extends Resource{updateData(){if(this.isUnlocked()){this.currentQuantity=0,this.rateOfChange=0;for(let e=0;e<game.global.city.surfaceDwellers.length;e++)this.currentQuantity+=game.global.city.captive_housing[`race${e}`],this.rateOfChange+=game.global.city.captive_housing[`jailrace${e}`];this.currentQuantity+=this.rateOfChange,this.maxQuantity=game.global.city.captive_housing.raceCap}}isUnlocked(){return!!game.global.city.captive_housing}}class ResourceProductionCost{constructor(e,t,i){this.resource=e,this.quantity=t,this.minRateOfChange=i}}class Action{constructor(e,t,i,a,r){this.name=e,this._tab=t,this._id=i,this._location=a,this.gameMax=Number.MAX_SAFE_INTEGER,this._vueBinding=this._tab+"-"+this.id,this.weighting=0,this.extraDescription="",this.consumption=[],this.cost={},this.overridePowered=undefined,this.is=normalizeProperties(r)??{}}get autoBuildEnabled(){return settings["bat"+this._vueBinding]}get autoStateEnabled(){return settings["bld_s_"+this._vueBinding]}get autoStateSmart(){return settings["bld_s2_"+this._vueBinding]}get priority(){return settingsRaw["bld_p_"+this._vueBinding]}get _weighting(){return settings["bld_w_"+this._vueBinding]}get _autoMax(){return settings["bld_m_"+this._vueBinding]}get definition(){return""!==this._location?game.actions[this._tab][this._location][this._id]:game.actions[this._tab][this._id]}get instance(){return game.global[this._tab][this._id]}get id(){return this._id}get title(){let e=this.definition;return e?"function"==typeof e.title?e.title():e.title:this.name}get desc(){let e=this.definition;return e?"function"==typeof e.desc?e.desc():e.desc:this.name}get vue(){return getVueById(this._vueBinding)}get autoMax(){return this._autoMax>=0&&this._autoMax<=this.gameMax?this._autoMax:this.gameMax}isUnlocked(){return!("city"===this._tab&&!game.global.settings.showCity||"space"===this._tab&&!game.global.settings.showSpace&&!game.global.settings.showOuter||"interstellar"===this._tab&&!game.global.settings.showDeep||"portal"===this._tab&&!game.global.settings.showPortal||"galaxy"===this._tab&&!game.global.settings.showGalactic||"tauceti"===this._tab&&!game.global.settings.showTau)&&null!==document.getElementById(this._vueBinding)}isSwitchable(){return this.definition.hasOwnProperty("powered")||this.definition.hasOwnProperty("switchable")}isMission(){return this.definition.hasOwnProperty("grant")}isComplete(){return haveTech(this.definition.grant[0],this.definition.grant[1])}isSmartManaged(){return settings.autoPower&&this.isUnlocked()&&this.autoStateEnabled&&this.autoStateSmart}isAutoBuildable(){return this.isUnlocked()&&this.autoBuildEnabled&&this._weighting>0&&this.count<this.autoMax}checkPowerRequirements(){for(let[e,t]of Object.entries(this.definition.power_reqs??{}))if(!haveTech(e,t))return!1;return!0}get powered(){return this.overridePowered!==undefined?this.overridePowered:this.definition.hasOwnProperty("powered")&&this.checkPowerRequirements()?this.definition.powered():0}updateResourceRequirements(){if(!this.isUnlocked())return;if(this.cost={},!this.definition.cost)return;let e=poly.adjustCosts(this.definition);for(let t in e)if(resources[t]){let i=Number(e[t]());i>0&&(this.cost[t]=i)}}isAffordable(e=!1){return game.checkAffordable(this.definition,e)}isClickable(){return this.isUnlocked()&&this.isAffordable()&&this.count<this.gameMax}click(){if(!this.isClickable())return!1;let e=this.is.multiSegmented&&settings.buildingsUseMultiClick,t=1;if(e){t=this.gameMax-this.count;for(let e in this.cost)t=Math.min(t,Math.floor(resources[e].currentQuantity/this.cost[e]));t<1&&(t=1)}for(let a in this.cost)resources[a].currentQuantity-=this.cost[a]*t;if("protoplasm"===game.global.race.species||logIgnore.includes(this.id)||(this.gameMax<Number.MAX_SAFE_INTEGER&&this.count+t<this.gameMax?GameLog.logSuccess("multi_construction",poly.loc("build_success",[`${this.title} (${this.count+t})`]),["queue","building_queue"]):GameLog.logSuccess("construction",poly.loc("build_success",[this.title]),["queue","building_queue"])),KeyManager.set(e,e,e),this.is.prestige&&logPrestige(),settings.performanceHackAvoidDrawTech&&this.definition.refresh&&this.count>0)return this.definition.action(),!0;let i=$("#popper");return i.length>0&&-1===i.data("id").indexOf(this._vueBinding)?(i.attr("id","TotallyNotAPopper"),this.vue.action(),i.attr("id","popper")):this.vue.action(),this.is.prestige&&(state.goal="GameOverMan"),!0}addSupport(e){this.consumption.push(normalizeProperties({resource:e,rate:()=>-1*this.definition.support()}))}addResourceConsumption(e,t){this.consumption.push(normalizeProperties({resource:e,rate:t}))}getFuelRate(e){if(!this.consumption[e])return 0;let t=this.consumption[e].resource,i=this.consumption[e].rate;return"space"!==this._tab||t!==resources.Oil&&t!==resources.Helium_3?"interstellar"!==this._tab&&"galaxy"!==this._tab&&"tauceti"!==this._tab||t!==resources.Deuterium&&t!==resources.Helium_3||this===buildings.AlphaFusion||(i=game.int_fuel_adjust(i)):i=game.fuel_adjust(i,!0),i}getMissingConsumption(){for(let e=0;e<this.consumption.length;e++){let t=this.consumption[e].resource;if(t instanceof Support)continue;if(t===resources.Food&&settings.autoJobs&&(jobs.Farmer.autoJobEnabled||jobs.Hunter.autoJobEnabled))continue;let i=this.getFuelRate(e);if(t.storageRatio<.95&&i>0&&t.calculateRateOfChange({buy:!0})<i)return t}return null}getMissingSupport(){if(game.global.race.fasting&&this===buildings.AlphaMiningDroid&&this.count<1)return null;for(let e=0;e<this.consumption.length;e++){let t=this.consumption[e].resource;if(t===resources.Spire_Support&&this.autoStateSmart)continue;if(t===resources.Tau_Belt_Support)continue;if(t===resources.Womlings_Support&&t.rateOfChange>0)continue;let i=this.consumption[e].rate;if(t instanceof Support&&!(i<=0)&&t.rateOfChange<i)return t}return null}getUselessSupport(){if(this===buildings.GatewayStarbase||this===buildings.AlphaHabitat||this===buildings.SpaceNavBeacon&&game.global.race.orbit_decayed)return null;let e=[];for(let t=0;t<this.consumption.length;t++){let i=this.consumption[t].resource,a=this.consumption[t].rate;if(!(i instanceof Support)||a>=0)continue;let r=i===resources.Belt_Support?2*traitVal("high_pop",0,1):i===resources.Gateway_Support?5:i===resources.Womlings_Support?6:1;if(!(i.rateOfChange>=r))return null;e.push(i)}return e[0]??null}get count(){return this.isMission()?this.isComplete()?1:0:this.isUnlocked()?this.instance?.count??0:0}hasState(){return this.isUnlocked()&&(this.definition.powered&&haveTech("high_tech",2)&&this.checkPowerRequirements()||this.definition.switchable?.())||!1}get stateOnCount(){return!this.hasState()||this.count<1?0:this.instance.on}get stateOffCount(){return!this.hasState()||this.count<1?0:this.instance.count-this.instance.on}tryAdjustState(e){if(0===e||!this.hasState())return!1;let t=this.vue;if(e>0){for(let i of KeyManager.click(e))t.power_on();return!0}if(e<0){for(let i of KeyManager.click(-1*e))t.power_off();return!0}}}class CityAction extends Action{get instance(){return game.global.city[this._id]}}class Pillar extends Action{get count(){return this.isUnlocked()?this.definition.count():0}get stateOnCount(){return this.isUnlocked()?this.definition.on():0}isAffordable(e=!1){return 1===game.global.tech.pillars&&"micro"!==game.global.race.universe&&game.checkAffordable(this.definition,e)}}class ResourceAction extends Action{constructor(e,t,i,a,r,n){super(e,t,i,a,n),this.resource=resources[r]}get count(){return this.resource.currentQuantity}}class EvolutionAction extends Action{constructor(e){super("","evolution",e,"")}isUnlocked(){let e=document.getElementById(this._vueBinding);return null!==e&&!e.classList.contains("is-hidden")}}class SpaceDock extends Action{isOptionsCached(){return this.count<1||game.global.tech.genesis<4||!(!buildings.GasSpaceDockProbe.isOptionsCached()||game.global.tech.genesis>=5&&!buildings.GasSpaceDockShipSegment.isOptionsCached()||6===game.global.tech.genesis&&!buildings.GasSpaceDockPrepForLaunch.isOptionsCached()||game.global.tech.genesis>=7&&!buildings.GasSpaceDockLaunch.isOptionsCached()||game.global.tech.geck>=1&&!buildings.GasSpaceDockGECK.isOptionsCached())}cacheOptions(){if(this.count<1||WindowManager.isOpen())return!1;let e=document.querySelector("#space-star_dock .special");return WindowManager.openModalWindowWithCallback(e,this.title,(()=>{buildings.GasSpaceDockProbe.cacheOptions(),buildings.GasSpaceDockGECK.cacheOptions(),buildings.GasSpaceDockShipSegment.cacheOptions(),buildings.GasSpaceDockPrepForLaunch.cacheOptions(),buildings.GasSpaceDockLaunch.cacheOptions()})),!0}}class ModalAction extends Action{constructor(...e){super(...e),this._vue=undefined}get vue(){return this._vue}isOptionsCached(){return this._vue!==undefined}cacheOptions(){this._vue=getVueById(this._vueBinding)}isUnlocked(){return!!game.global.settings.showSpace&&this._vue!==undefined}}class Project extends Action{constructor(e,t){super(e,"arpa",t,""),this._vueBinding="arpa"+this.id,this.currentStep=1}get autoBuildEnabled(){return settings["arpa_"+this._id]}get priority(){return settingsRaw["arpa_p_"+this._id]}get _autoMax(){return settings["arpa_m_"+this._id]}get _weighting(){return settings["arpa_w_"+this._id]}updateResourceRequirements(){if(!this.isUnlocked())return;this.cost={};let e=Math.min(100-this.progress,state.triggerTargets.includes(this)?100:settings.arpaStep),t=poly.arpaAdjustCosts(this.definition.cost);for(let i in t)if(resources[i]){let a=Number(t[i]());a>0&&(this.cost[i]=a/100,e=Math.min(e,resources[i].maxQuantity/this.cost[i]))}if(this.currentStep=Math.max(Math.floor(e),1),this.currentStep>1)for(let i in this.cost)this.cost[i]*=this.currentStep}isMission(){return 1===this.gameMax}get count(){return this.instance?.rank??0}get progress(){return this.instance?.complete??0}isAffordable(e=!1){let t=e?"maxQuantity":"currentQuantity";for(let i in this.cost)if(resources[i][t]<this.cost[i])return!1;return!0}isClickable(){return this.isUnlocked()&&this.isAffordable(!1)}click(){if(!this.isClickable())return!1;for(let e in this.cost)resources[e].currentQuantity-=this.cost[e];if(this.progress+this.currentStep<100?GameLog.logSuccess("arpa",poly.loc("build_success",[`${this.title} (${this.progress+this.currentStep}%)`]),["queue","building_queue"]):(GameLog.logSuccess("construction",poly.loc("build_success",[this.title]),["queue","building_queue"]),"syphon"===this.id&&79==this.count&&logPrestige()),KeyManager.set(!1,!1,!1),settings.performanceHackAvoidDrawTech&&this.count>=10&&!("syphon"===this.id&&this.count>=79)){let e=win.$("#mainColumn > div:first-child")[0].__vue__;return e.s.tabLoad=!1,getVueById(this._vueBinding).build(this.id,this.currentStep),e.s.tabLoad=!0,!0}return getVueById(this._vueBinding).build(this.id,this.currentStep),!0}}class Technology{constructor(e){this._id=e,this._vueBinding="tech-"+e,this.cost={}}get id(){return this._id}isUnlocked(){return null!==document.querySelector("#"+this._vueBinding+" > .button:not(.precog)")&&getVueById(this._vueBinding)!==undefined}get definition(){return game.actions.tech[this._id]}get title(){let e=this.definition,t="function"==typeof e.title?e.title():e.title;return e.path&&e.path.includes("truepath")&&!e.path.includes("standard")&&(t+=` (${game.loc("evo_challenge_truepath")})`),t}get name(){return this.title}isAffordable(e=!1){return game.checkAffordable(this.definition,e)}isClickable(){return this.isUnlocked()&&this.isAffordable()}click(){if(!this.isClickable())return!1;for(let i in this.cost)resources[i].currentQuantity-=this.cost[i];getVueById(this._vueBinding).action();let e=this.definition,t="function"==typeof e.title?e.title():e.title;return GameLog.logSuccess("research",poly.loc("research_success",[t]),["queue","research_queue"]),!0}isResearched(){return null!==document.querySelector("#tech-"+this.id+" .oldTech")}updateResourceRequirements(){if(!this.isUnlocked())return;if(this.cost={},!this.definition.cost)return;let e=poly.adjustCosts(this.definition);for(let t in e)if(resources[t]){let i=Number(e[t]());i>0&&(this.cost[t]=i)}}}class Race{constructor(e){this.id=e,this.evolutionTree=[]}get name(){return game.races[this.id].name??"Custom"}get desc(){let e=game.races[this.id].desc;return"function"==typeof e?e():"string"==typeof e?e:"Custom"}get genus(){return game.races[this.id].type}getWeighting(){let e=this.getHabitability();if(e<(settings.evolutionAutoUnbound?.8:1))return-1;const t=["custom","junker","sludge"];let i=0,a=getStarLevel(settings);const checkAchievement=(e,t)=>{i+=e*Math.max(0,a-getAchievementStar(t)),"micro"!==game.global.race.universe&&"standard"!==game.global.race.universe&&(i+=e*Math.max(0,a-getAchievementStar(t,"standard")))};if("ascension"===settings.prestigeType&&settings.prestigeAscensionPillar||"demonic"===settings.prestigeType){let e=game.global.pillars[this.id]??0;if((!e&&resources.Harmony.currentQuantity>=1&&"micro"!==game.global.race.universe||e&&e<a)&&(i+=1e3*Math.max(0,a-e),!t.includes(this.id))){let e=Math.max(...Object.values(races).filter((e=>e.genus===this.genus&&!t.includes(e.id))).map((e=>game.global.pillars[e.id]??0)));i+=1e4*Math.max(0,a-e)}}["bioseed","ascension","terraform","matrix","retire","eden"].includes(settings.prestigeType)?checkAchievement(100,"genus_"+this.genus):"sludge"===this.id&&"mad"===settings.prestigeType||checkAchievement(100,"extinct_"+this.id),"demonic"===this.genus&&"mad"!==settings.prestigeType&&"bioseed"!==settings.prestigeType&&checkAchievement(50,"blood_war"),"sharkin"===this.id&&"mad"!==settings.prestigeType&&checkAchievement(50,"laser_shark"),"micro"===game.global.race.universe&&"bioseed"===settings.prestigeType&&checkAchievement(50,"small"===this.genus||game.races[this.id].traits.compact?"macro":"marble"),"balorg"===this.id&&"magic"===game.global.race.universe&&"vacuum"===settings.prestigeType&&checkAchievement(50,"pass");for(let r of fanatAchievements)this.id===r.race&&game.global.race.gods===r.god&&checkAchievement(150,r.achieve);i>0&&1===e&&""!==this.getCondition()&&"junker"!==this.id&&"sludge"!==this.id&&(i+=500),(["bioseed","cataclysm","whitehole","vacuum","terraform"].includes(settings.prestigeType)&&["human","cath","capybara","gnome","cyclops","gecko","dracnid","entish","shroomi","antid","sharkin","dryad","salamander","yeti","kamel","imp","unicorn","synth","shoggoth"].includes(this.id)||["ascension","demonic"].includes(settings.prestigeType)&&["human","cath","capybara","gnome","cyclops","gecko","dracnid","entish","shroomi","scorpid","sharkin","dryad","salamander","wendigo","kamel","balorg","unicorn","nano","ghast"].includes(this.id))&&(i+=1),this.id===game.global.race.gods&&checkAchievement(10,"second_evolution");for(let r of fanatAchievements)this.id===r.god&&checkAchievement(5,r.achieve);if("micro"!==game.global.race.universe){const checkFeat=e=>{i+=1*Math.max(0,a-(game.global.stats.feat[e]??0))};if("hellscape"===game.global.city.biome&&"demonic"!==this.genus)switch(settings.prestigeType){case"mad":case"cataclysm":checkFeat("take_no_advice");break;case"bioseed":checkFeat("ill_advised")}if("junker"===this.id)switch(settings.prestigeType){case"bioseed":checkFeat("organ_harvester");break;case"ascension":case"demonic":checkFeat("garbage_pie");case"terraform":case"whitehole":case"vacuum":case"apocalypse":checkFeat("the_misery")}"whitehole"===settings.prestigeType&&"evil"===game.global.race.universe&&"angelic"===this.genus&&checkFeat("nephilim"),"demonic"===settings.prestigeType&&"angelic"===this.genus&&checkFeat("twisted"),"ascension"===settings.prestigeType&&settings.challenge_emfield&&"artifical"===this.genus&&"custom"!==this.id&&checkFeat("digital_ascension"),"demonic"===settings.prestigeType&&"sludge"===this.id&&checkFeat("slime_lord")}return"junker"!==this.id&&"sludge"!==this.id||(i*=a<5?0:.01),i*=e,i}getHabitability(){if("junker"===this.id)return game.global.genes.challenge?1:0;if("sludge"===this.id)return(game.global.stats.achieve.ascended||game.global.stats.achieve.corrupted)&&game.global.stats.achieve.extinct_junker?1:0;let e=game.global.blood.unbound>=4?.95:game.global.blood.unbound>=2?.9:game.global.blood.unbound>=1?.8:0,t=game.global.blood.unbound>=3?e:0;switch(this.genus){case"aquatic":return["swamp","oceanic"].includes(game.global.city.biome)?1:e;case"fey":return["forest","swamp","taiga"].includes(game.global.city.biome)?1:e;case"sand":return["ashland","desert"].includes(game.global.city.biome)?1:e;case"heat":return["ashland","volcanic"].includes(game.global.city.biome)?1:e;case"polar":return["tundra","taiga"].includes(game.global.city.biome)?1:e;case"demonic":return"hellscape"===game.global.city.biome?1:t;case"angelic":return"eden"===game.global.city.biome?1:t;case"synthetic":return game.global.stats.achieve.obsolete?.l>=5?1:0;case"eldritch":return game.global.stats.achieve.nightmare?.mg?1:0;case undefined:return 0;default:return 1}}getCondition(){if("junker"===this.id)return"Genetic Dead End unlocked";if("sludge"===this.id)return"Failed Experiment unlocked";switch(this.genus){case"aquatic":return"Oceanic or Swamp planet";case"fey":return"Forest, Swamp or Taiga planet";case"sand":return"Ashland or Desert planet";case"heat":return"Ashland or Volcanic planet";case"polar":return"Tundra or Taiga planet";case"demonic":return"Hellscape planet";case"angelic":return"Eden planet";case"synthetic":return game.loc("wiki_achieve_obsolete");case"eldritch":return game.loc("wiki_achieve_nightmare");case undefined:return game.loc("wiki_achieve_ascended");default:return""}}}class Trigger{constructor(e,t,i,a,r,n,o,l){this.seq=e,this.priority=t,this.requirementType=i,this.requirementId=a,this.requirementCount=r,this.actionType=n,this.actionId=o,this.actionCount=l,this.complete=!1}cost(){return"research"===this.actionType?techIds[this.actionId].definition.cost:"build"===this.actionType?buildingIds[this.actionId].definition.cost:"arpa"===this.actionType?arpaIds[this.actionId].definition.cost:{}}isActionPossible(){let e=null;return"research"===this.actionType&&(e=techIds[this.actionId]),"build"===this.actionType&&(e=buildingIds[this.actionId]),"arpa"===this.actionType&&(e=arpaIds[this.actionId]),e&&e.isUnlocked()&&e.isAffordable(!0)}updateComplete(){return!this.complete&&("research"===this.actionType&&techIds[this.actionId].isResearched()||"build"===this.actionType&&buildingIds[this.actionId].count>=this.actionCount||"arpa"===this.actionType&&arpaIds[this.actionId].count>=this.actionCount)&&(this.complete=!0,!0)}areRequirementsMet(){return"chain"===this.requirementType?this.priority<1||TriggerManager.priorityList[this.priority-1]?.complete:!!checkTypes[this.requirementType]&&(retBools.includes(this.requirementType)?checkTypes[this.requirementType].fn(this.requirementId)==this.requirementCount:checkTypes[this.requirementType].fn(this.requirementId)>=this.requirementCount)}updateRequirementType(e){if(e===this.requirementType)return;if("chain"===e)return this.requirementType=e,this.requirementId="",void(this.requirementCount=0);if(!checkTypes[e])return;let t=checkTypes[this.requirementType]?.arg??null,i=checkTypes[this.requirementType]?.options??null,a=checkTypes[e].arg,r=checkTypes[e].options;this.requirementType=e,this.requirementCount=1,this.complete=!1,t===a&&i===r||(this.requirementId=checkTypes[this.requirementType].def)}updateActionType(e){if(e!==this.actionType)return this.actionType=e,this.complete=!1,"research"===this.actionType?(this.actionId="tech-club",void(this.actionCount=0)):"build"===this.actionType?(this.actionId="city-basic_housing",void(this.actionCount=1)):"arpa"===this.actionType?(this.actionId="arpalhc",void(this.actionCount=1)):void 0}}class MinorTrait{constructor(e){this.traitName=e}get enabled(){return settings["mTrait_"+this.traitName]}get priority(){return settingsRaw["mTrait_p_"+this.traitName]}get weighting(){return settings["mTrait_w_"+this.traitName]}isUnlocked(){return game.global.settings.mtorder.includes(this.traitName)}geneCount(){return game.global.race.minor[this.traitName]??0}phageCount(){return game.global.genes.minor[this.traitName]??0}totalCount(){return game.global.race[this.traitName]??0}geneCost(){return"mastery"===this.traitName?5*Fibonacci(this.geneCount()):Fibonacci(this.geneCount())}}class MutableTrait{constructor(e){this.traitName=e,this.baseCost=Math.abs(game.traits[e].val),this.isPositive=game.traits[e].val>=0}get gainEnabled(){return settings["mutableTrait_gain_"+this.traitName]}get purgeEnabled(){return settings["mutableTrait_purge_"+this.traitName]}get resetEnabled(){return settings["mutableTrait_reset_"+this.traitName]}get priority(){return settingsRaw["mutableTrait_p_"+this.traitName]}get name(){return game.loc("trait_"+this.traitName+"_name")}canGain(){return this.gainEnabled&&!this.purgeEnabled&&this.canMutate("gain")&&game.global.race[this.traitName]===undefined&&!conflictingTraits.some((e=>e[0]===this.traitName&&game.global.race[e[1]]!==undefined||e[1]===this.traitName&&game.global.race[e[0]]!==undefined))}canPurge(){return this.purgeEnabled&&!this.gainEnabled&&this.canMutate("purge")&&game.global.race[this.traitName]!==undefined&&!("sludge"===game.global.race.species&&"ooze"===this.traitName)&&!game.global.race.ss_traits?.includes(this.traitName)&&!game.global.race.iTraits?.hasOwnProperty(this.traitName)}canMutate(e){return resources["antimatter"===game.global.race.universe?"Antiplasmid":"Plasmid"].currentQuantity-this.mutationCost(e)>=MutableTraitManager.minimumPlasmidsToPreserve&&!("sludge"===game.global.race.species&&game.global.race.modified)}mutationCost(e){let t=mutationCostMultipliers[game.global.race.species]?.[e]??1;return 5*this.baseCost*t}}class MajorTrait extends MutableTrait{constructor(e){super(e),this.type="major";let t=Object.entries(game.races).filter((([t,i])=>"custom"!==t&&i.traits[e]!==undefined)).map((([e,t])=>({id:e,genus:t.type})))[0]??{};this.source=t.id??specialRaceTraits[e]??"",this.racesThatCanGain=Object.entries(game.races).filter((([e,i])=>i.type===t.genus)).map((([e,t])=>e)).flat(),this.genus="reindeer"===this.source?"herbivore":t.genus}isGainable(){return"frail"!==this.traitName&&"ooze"!==this.traitName}canGain(){return super.canGain()&&game.global.genes.mutation>=3&&this.racesThatCanGain.includes(game.global.race.species)}canPurge(){return super.canPurge()&&game.global.genes.mutation>=1}}class GenusTrait extends MutableTrait{constructor(e){super(e),this.type="genus";let t=Object.entries(poly.genus_traits).filter((([t,i])=>i[e]!==undefined)).map((([e,t])=>e));this.source=t[0]??specialRaceTraits[e]??"",this.genus=this.source}isGainable(){return!1}canGain(){return!1}canPurge(){return super.canPurge()&&game.global.genes.mutation>=2}}const Fibonacci=(m=[5,8],e=>m[e]??(m[e]=Fibonacci(e-1)+Fibonacci(e-2)));var m;const numberSuffix={K:1e3,M:1e6,G:1e9,T:1e12,P:1e15,E:1e18,Z:1e21,Y:1e24},universes=["standard","heavy","antimatter","evil","micro","magic"],biomeList=["grassland","oceanic","forest","desert","volcanic","tundra","savanna","swamp","taiga","ashland","hellscape","eden"],traitList=["none","toxic","mellow","rage","stormy","ozone","magnetic","trashed","elliptical","flare","dense","unstable","permafrost","retrograde"],extraList=["Achievement","Orbit","Copper","Iron","Aluminium","Coal","Oil","Titanium","Uranium","Iridium"],planetBiomes=["eden","ashland","volcanic","taiga","tundra","swamp","oceanic","forest","savanna","grassland","desert","hellscape"],planetTraits=["elliptical","magnetic","permafrost","rage","retrograde","none","stormy","toxic","trashed","dense","unstable","ozone","mellow","flare"],planetBiomeGenus={hellscape:"demonic",eden:"angelic",oceanic:"aquatic",forest:"fey",desert:"sand",volcanic:"heat",tundra:"polar"},fanatAchievements=[{god:"sharkin",race:"entish",achieve:"madagascar_tree"},{god:"sporgar",race:"human",achieve:"infested"},{god:"shroomi",race:"troll",achieve:"godwin"}],challenges=[[{id:"plasmid",trait:"no_plasmid"},{id:"mastery",trait:"weak_mastery"},{id:"nerfed",trait:"nerfed"}],[{id:"crispr",trait:"no_crispr"},{id:"badgenes",trait:"badgenes"}],[{id:"trade",trait:"no_trade"}],[{id:"craft",trait:"no_craft"}],[{id:"joyless",trait:"joyless"}],[{id:"steelen",trait:"steelen"}],[{id:"decay",trait:"decay"}],[{id:"emfield",trait:"emfield"}],[{id:"inflation",trait:"inflation"}],[{id:"sludge",trait:"sludge"}],[{id:"orbit_decay",trait:"orbit_decay"}],[{id:"gravity_well",trait:"gravity_well"}],[{id:"witch_hunter",trait:"witch_hunter"}],[{id:"junker",trait:"junker"}],[{id:"cataclysm",trait:"cataclysm"}],[{id:"banana",trait:"banana"}],[{id:"truepath",trait:"truepath"}],[{id:"lone_survivor",trait:"lone_survivor"}],[{id:"fasting",trait:"fasting"}]],governors=["soldier","criminal","entrepreneur","educator","spiritual","bluecollar","noble","media","sports","bureaucrat"],evolutionSettingsToStore=["userEvolutionTarget","prestigeType",...challenges.map((e=>"challenge_"+e[0].id))],logIgnore=["food","lumber","stone","chrysotile","slaughter","s_alter","slave_market","horseshoe","assembly","cloning_facility"],galaxyRegions=["gxy_stargate","gxy_gateway","gxy_gorddon","gxy_alien1","gxy_alien2","gxy_chthonian"],settingsSections=["toggle","general","prestige","evolution","research","market","storage","production","war","hell","fleet","job","building","project","government","logging","trait","weighting","ejector","planet","mech","magic"],mutationCostMultipliers={sludge:{gain:2,purge:10},custom:{gain:10,purge:10}},specialRaceTraits={beast_of_burden:"reindeer",photosynth:"plant"},conflictingTraits=[["dumb","smart"]],replicableResources=["Food","Lumber","Chrysotile","Stone","Crystal","Furs","Copper","Iron","Aluminium","Cement","Coal","Oil","Uranium","Steel","Titanium","Alloy","Polymer","Iridium","Helium_3","Deuterium","Neutronium","Adamantite","Infernite","Elerium","Nano_Tube","Graphene","Stanene","Bolognium","Unobtainium","Vitreloy","Orichalcum","Water","Plywood","Brick","Wrought_Iron","Sheet_Metal","Mythril","Aerogel","Nanoweave","Scarletite","Quantium"];var techIds={},buildingIds={},arpaIds={},jobIds={},evolutions={},imitations={},races={},craftablesList=[],foundryList=[],state={forcedUpdate:!1,gameTicked:!1,scriptTick:1,multiplierTick:0,buildingToggles:0,evolutionAttempts:0,tabHash:0,lastWasteful:null,lastHighPop:null,lastFlier:null,lastPopulationCount:0,lastFarmerCount:0,astroSign:null,evoCheckNeeded:!0,warnDebug:!0,warnPreload:!0,queuedTargets:[],queuedTargetsAll:[],triggerTargets:[],unlockedTechs:[],unlockedBuildings:[],conflictTargets:[],maxSpaceMiners:Number.MAX_SAFE_INTEGER,globalProductionModifier:1,moneyIncomes:[],moneyMedian:0,soulGemIncomes:[{sec:0,gems:0}],soulGemPerHour:0,soulGemLast:Number.MAX_SAFE_INTEGER,knowledgeRequiredByTechs:0,goal:"Standard",missionBuildingList:[],tooltips:{},filterRegExp:null,evolutionTarget:null,whiteholeLastStabilise:0,whiteholeLastExoticMass:0},resources={RNA:new Resource("RNA","RNA"),DNA:new Resource("DNA","DNA"),Money:new Resource("Money","Money"),Population:new Population("Population","Population"),Slave:new Resource("Slave","Slave"),Mana:new Resource("Mana","Mana"),Energy:new Resource("Energy","Energy"),Sus:new Resource("Suspicion","Sus"),Knowledge:new Resource("Knowledge","Knowledge"),Zen:new Resource("Zen","Zen"),Crates:new Resource("Crates","Crates"),Containers:new Resource("Containers","Containers"),Food:new Resource("Food","Food",{tradable:!0}),Lumber:new Resource("Lumber","Lumber",{tradable:!0}),Chrysotile:new Resource("Chrysotile","Chrysotile",{tradable:!0}),Stone:new Resource("Stone","Stone",{tradable:!0}),Crystal:new Resource("Crystal","Crystal",{tradable:!0}),Furs:new Resource("Furs","Furs",{tradable:!0}),Copper:new Resource("Copper","Copper",{tradable:!0}),Iron:new Resource("Iron","Iron",{tradable:!0}),Aluminium:new Resource("Aluminium","Aluminium",{tradable:!0}),Cement:new Resource("Cement","Cement",{tradable:!0}),Coal:new Resource("Coal","Coal",{tradable:!0}),Oil:new Resource("Oil","Oil",{tradable:!0}),Uranium:new Resource("Uranium","Uranium",{tradable:!0}),Steel:new Resource("Steel","Steel",{tradable:!0}),Titanium:new Resource("Titanium","Titanium",{tradable:!0}),Alloy:new Resource("Alloy","Alloy",{tradable:!0}),Polymer:new Resource("Polymer","Polymer",{tradable:!0}),Iridium:new Resource("Iridium","Iridium",{tradable:!0}),Helium_3:new Resource("Helium-3","Helium_3",{tradable:!0}),Water:new Resource("Water","Water"),Deuterium:new Resource("Deuterium","Deuterium"),Neutronium:new Resource("Neutronium","Neutronium"),Adamantite:new Resource("Adamantite","Adamantite"),Infernite:new Resource("Infernite","Infernite"),Elerium:new Resource("Elerium","Elerium"),Nano_Tube:new Resource("Nano Tube","Nano_Tube"),Graphene:new Resource("Graphene","Graphene"),Stanene:new Resource("Stanene","Stanene"),Bolognium:new Resource("Bolognium","Bolognium"),Vitreloy:new Resource("Vitreloy","Vitreloy"),Orichalcum:new Resource("Orichalcum","Orichalcum"),Unobtainium:new Resource("Unobtainium","Unobtainium"),Materials:new Resource("Materials","Materials"),Horseshoe:new Resource("Horseshoe","Horseshoe"),Nanite:new Resource("Nanite","Nanite"),Genes:new Resource("Genes","Genes"),Soul_Gem:new SoulGem("Soul Gem","Soul_Gem"),Plywood:new Resource("Plywood","Plywood"),Brick:new Resource("Brick","Brick"),Wrought_Iron:new Resource("Wrought Iron","Wrought_Iron"),Sheet_Metal:new Resource("Sheet Metal","Sheet_Metal"),Mythril:new Resource("Mythril","Mythril"),Aerogel:new Resource("Aerogel","Aerogel"),Nanoweave:new Resource("Nanoweave","Nanoweave"),Scarletite:new Resource("Scarletite","Scarletite"),Quantium:new Resource("Quantium","Quantium"),Corrupt_Gem:new Resource("Corrupt Gem","Corrupt_Gem"),Codex:new Resource("Codex","Codex"),Cipher:new Resource("Encrypted Data","Cipher"),Demonic_Essence:new Resource("Demonic Essence","Demonic_Essence"),Blood_Stone:new PrestigeResource("Blood Stone","Blood_Stone"),Artifact:new PrestigeResource("Artifact","Artifact"),Plasmid:new PrestigeResource("Plasmid","Plasmid"),Antiplasmid:new PrestigeResource("Anti-Plasmid","AntiPlasmid"),Phage:new PrestigeResource("Phage","Phage"),Dark:new PrestigeResource("Dark","Dark"),Harmony:new PrestigeResource("Harmony","Harmony"),AICore:new PrestigeResource("AI Core","AICore"),Supply:new Supply("Supplies","Supply"),Power:new Power("Power","Power"),Morale:new Morale("Morale","Morale"),Thrall:new Thrall("Thrall","Thrall"),Womlings_Support:new WomlingsSupport("Womlings","Womlings_Support","",""),Moon_Support:new Support("Moon Support","Moon_Support","space","spc_moon"),Red_Support:new Support("Red Support","Red_Support","space","spc_red"),Sun_Support:new Support("Sun Support","Sun_Support","space","spc_sun"),Belt_Support:new BeltSupport("Belt Support","Belt_Support","space","spc_belt"),Titan_Support:new Support("Titan Support","Titan_Support","space","spc_titan"),Electrolysis_Support:new ElectrolysisSupport("Electrolysis Plant","Electrolysis_Support","",""),Enceladus_Support:new Support("Enceladus Support","Enceladus_Support","space","spc_enceladus"),Eris_Support:new Support("Eris Support","Eris_Support","space","spc_eris"),Tau_Support:new Support("Tau Ceti Support","Tau_Support","tauceti","tau_home"),Tau_Red_Support:new Support("Tau Ceti Red Support","Tau_Red_Support","tauceti","tau_red"),Tau_Belt_Support:new Support("Tau Ceti Belt Support","Tau_Belt_Support","tauceti","tau_roid"),Alpha_Support:new Support("Alpha Support","Alpha_Support","interstellar","int_alpha"),Nebula_Support:new Support("Nebula Support","Nebula_Support","interstellar","int_nebula"),Gateway_Support:new Support("Gateway Support","Gateway_Support","galaxy","gxy_gateway"),Alien_Support:new Support("Alien Support","Alien_Support","galaxy","gxy_alien2"),Lake_Support:new Support("Lake Support","Lake_Support","portal","prtl_lake"),Spire_Support:new Support("Spire Support","Spire_Support","portal","prtl_spire")},jobs={Unemployed:new BasicJob("unemployed","Unemployed"),Colonist:new Job("colonist","Colonist"),Teamster:new BasicJob("teamster","Teamster",{smart:!0}),Meditator:new BasicJob("meditator","Meditator",{smart:!0}),Hunter:new BasicJob("hunter","Hunter",{serve:!0,smart:!0}),Farmer:new BasicJob("farmer","Farmer",{serve:!0,smart:!0}),Lumberjack:new BasicJob("lumberjack","Lumberjack",{serve:!0,split:!0,smart:!0}),QuarryWorker:new BasicJob("quarry_worker","Quarry Worker",{serve:!0,split:!0,smart:!0}),CrystalMiner:new BasicJob("crystal_miner","Crystal Miner",{serve:!0,split:!0,smart:!0}),Scavenger:new BasicJob("scavenger","Scavenger",{serve:!0,split:!0}),TitanColonist:new Job("titan_colonist","Titan Colonist"),Miner:new Job("miner","Miner",{smart:!0}),CoalMiner:new Job("coal_miner","Coal Miner",{smart:!0}),CementWorker:new Job("cement_worker","Cement Worker",{smart:!0}),Professor:new Job("professor","Professor",{smart:!0}),Scientist:new Job("scientist","Scientist",{smart:!0}),Entertainer:new Job("entertainer","Entertainer",{smart:!0}),HellSurveyor:new Job("hell_surveyor","Hell Surveyor",{smart:!0}),SpaceMiner:new Job("space_miner","Space Miner",{smart:!0}),PitMiner:new Job("pit_miner","Pit Miner"),Torturer:new Job("torturer","Tormentor",{smart:!0}),Archaeologist:new Job("archaeologist","Archaeologist"),Banker:new Job("banker","Banker",{smart:!0}),Priest:new Job("priest","Priest")},crafter={Scarletite:new CraftingJob("Scarletite","Scarletite Crafter",resources.Scarletite),Quantium:new CraftingJob("Quantium","Quantium Crafter",resources.Quantium),Plywood:new CraftingJob("Plywood","Plywood Crafter",resources.Plywood),Brick:new CraftingJob("Brick","Brick Crafter",resources.Brick),WroughtIron:new CraftingJob("Wrought_Iron","Wrought Iron Crafter",resources.Wrought_Iron),SheetMetal:new CraftingJob("Sheet_Metal","Sheet Metal Crafter",resources.Sheet_Metal),Mythril:new CraftingJob("Mythril","Mythril Crafter",resources.Mythril),Aerogel:new CraftingJob("Aerogel","Aerogel Crafter",resources.Aerogel),Nanoweave:new CraftingJob("Nanoweave","Nanoweave Crafter",resources.Nanoweave)},buildings={Food:new ResourceAction("Gather Food","city","food","","Food"),Lumber:new ResourceAction("Gather Lumber","city","lumber","","Lumber"),Stone:new ResourceAction("Gather Stone","city","stone","","Stone"),Chrysotile:new ResourceAction("Gather Chrysotile","city","chrysotile","","Chrysotile"),Slaughter:new Action("Slaughter the Weak","city","slaughter",""),ForgeHorseshoe:new ResourceAction("Horseshoe","city","horseshoe","","Horseshoe",{housing:!0,garrison:!0}),SlaveMarket:new ResourceAction("Slave Market","city","slave_market","","Slave"),SacrificialAltar:new Action("Sacrificial Altar","city","s_alter",""),House:new Action("Cabin","city","basic_housing","",{housing:!0}),Cottage:new Action("Cottage","city","cottage","",{housing:!0}),Apartment:new Action("Apartment","city","apartment","",{housing:!0}),Lodge:new Action("Lodge","city","lodge","",{housing:!0}),Smokehouse:new Action("Smokehouse","city","smokehouse",""),SoulWell:new Action("Soul Well","city","soul_well",""),SlavePen:new Action("Slave Pen","city","slave_pen",""),Transmitter:new Action("Transmitter","city","transmitter","",{housing:!0}),CaptiveHousing:new Action("Captive Housing","city","captive_housing",""),Farm:new Action("Farm","city","farm","",{housing:!0}),CompostHeap:new Action("Compost Heap","city","compost",""),Mill:new Action("Windmill","city","mill","",{smart:!0}),Windmill:new Action("Windmill (Evil)","city","windmill",""),Silo:new Action("Grain Silo","city","silo",""),Assembly:new ResourceAction("Assembly","city","assembly","","Population",{housing:!0}),Barracks:new Action("Barracks","city","garrison","",{garrison:!0}),Hospital:new Action("Hospital","city","hospital",""),BootCamp:new Action("Boot Camp","city","boot_camp",""),Shed:new Action("Shed","city","shed",""),StorageYard:new Action("Freight Yard","city","storage_yard",""),Warehouse:new Action("Container Port","city","warehouse",""),Bank:new Action("Bank","city","bank",""),Pylon:new Action("Pylon","city","pylon",""),ConcealWard:new Action("Conceal Ward (Witch Hunting)","city","conceal_ward",""),Graveyard:new Action("Graveyard","city","graveyard",""),LumberYard:new Action("Lumber Yard","city","lumber_yard",""),Sawmill:new Action("Sawmill","city","sawmill",""),RockQuarry:new Action("Rock Quarry","city","rock_quarry",""),CementPlant:new Action("Cement Plant","city","cement_plant","",{smart:!0}),Foundry:new Action("Foundry","city","foundry",""),Factory:new Action("Factory","city","factory",""),NaniteFactory:new Action("Nanite Factory","city","nanite_factory",""),Smelter:new Action("Smelter","city","smelter",""),MetalRefinery:new Action("Metal Refinery","city","metal_refinery",""),Mine:new Action("Mine","city","mine","",{smart:!0}),CoalMine:new Action("Coal Mine","city","coal_mine","",{smart:!0}),OilWell:new Action("Oil Derrick","city","oil_well",""),OilDepot:new Action("Fuel Depot","city","oil_depot",""),Trade:new Action("Trade Post","city","trade",""),Wharf:new Action("Wharf","city","wharf",""),TouristCenter:new Action("Tourist Center","city","tourist_center","",{smart:!0}),Amphitheatre:new Action("Amphitheatre","city","amphitheatre",""),Casino:new Action("Casino","city","casino",""),Temple:new Action("Temple","city","temple",""),Shrine:new Action("Shrine","city","shrine",""),MeditationChamber:new Action("Meditation Chamber","city","meditation",""),Banquet:new Action("Banquet Hall","city","banquet",""),University:new Action("University","city","university","",{knowledge:!0}),Library:new Action("Library","city","library","",{knowledge:!0}),Wardenclyffe:new Action("Wardenclyffe","city","wardenclyffe","",{knowledge:!0}),BioLab:new Action("Bioscience Lab","city","biolab","",{knowledge:!0}),CoalPower:new Action("Coal Powerplant","city","coal_power",""),OilPower:new Action("Oil Powerplant","city","oil_power",""),FissionPower:new Action("Fission Reactor","city","fission_power",""),MassDriver:new Action("Mass Driver","city","mass_driver","",{knowledge:()=>haveTech("mass",2)}),SpaceTestLaunch:new Action("Space Test Launch","space","test_launch","spc_home"),SpaceSatellite:new Action("Space Satellite","space","satellite","spc_home",{knowledge:!0}),SpaceGps:new Action("Space Gps","space","gps","spc_home"),SpacePropellantDepot:new Action("Space Propellant Depot","space","propellant_depot","spc_home"),SpaceNavBeacon:new Action("Space Navigation Beacon","space","nav_beacon","spc_home"),MoonMission:new Action("Moon Mission","space","moon_mission","spc_moon"),MoonBase:new Action("Moon Base","space","moon_base","spc_moon"),MoonIridiumMine:new Action("Moon Iridium Mine","space","iridium_mine","spc_moon",{smart:!0}),MoonHeliumMine:new Action("Moon Helium-3 Mine","space","helium_mine","spc_moon",{smart:!0}),MoonObservatory:new Action("Moon Observatory","space","observatory","spc_moon",{knowledge:!0}),RedMission:new Action("Red Mission","space","red_mission","spc_red"),RedSpaceport:new Action("Red Spaceport","space","spaceport","spc_red"),RedTower:new Action("Red Space Control","space","red_tower","spc_red"),RedCaptiveHousing:new CityAction("Red Captive Housing (Cataclysm)","space","captive_housing","spc_red"),RedTerraformer:new Action("Red Terraformer (Orbit Decay)","space","terraformer","spc_red",{multiSegmented:!0}),RedAtmoTerraformer:new Action("Red Terraformer (Orbit Decay, Complete)","space","atmo_terraformer","spc_red"),RedTerraform:new Action("Red Terraform (Orbit Decay)","space","terraform","spc_red",{prestige:!0}),RedAssembly:new ResourceAction("Red Assembly (Cataclysm)","space","assembly","spc_red","Population",{housing:!0}),RedLivingQuarters:new Action("Red Living Quarters","space","living_quarters","spc_red",{housing:!0}),RedPylon:new Action("Red Pylon (Cataclysm)","space","pylon","spc_red"),RedVrCenter:new Action("Red VR Center","space","vr_center","spc_red"),RedGarage:new Action("Red Garage","space","garage","spc_red"),RedMine:new Action("Red Mine","space","red_mine","spc_red"),RedFabrication:new Action("Red Fabrication","space","fabrication","spc_red"),RedFactory:new Action("Red Factory","space","red_factory","spc_red"),RedNaniteFactory:new CityAction("Red Nanite Factory (Cataclysm)","space","nanite_factory","spc_red"),RedBiodome:new Action("Red Biodome","space","biodome","spc_red"),RedUniversity:new Action("Red University (Orbit Decay)","space","red_university","spc_red",{knowledge:!0}),RedExoticLab:new Action("Red Exotic Materials Lab","space","exotic_lab","spc_red",{knowledge:!0}),RedZiggurat:new Action("Red Ziggurat","space","ziggurat","spc_red"),RedSpaceBarracks:new Action("Red Marine Barracks","space","space_barracks","spc_red",{garrison:!0}),RedForgeHorseshoe:new ResourceAction("Red Horseshoe (Cataclysm)","space","horseshoe","spc_red","Horseshoe",{housing:!0,garrison:!0}),HellMission:new Action("Hell Mission","space","hell_mission","spc_hell"),HellGeothermal:new Action("Hell Geothermal Plant","space","geothermal","spc_hell"),HellSmelter:new Action("Hell Smelter","space","hell_smelter","spc_hell"),HellSpaceCasino:new Action("Hell Space Casino","space","spc_casino","spc_hell"),HellSwarmPlant:new Action("Hell Swarm Plant","space","swarm_plant","spc_hell"),SunMission:new Action("Sun Mission","space","sun_mission","spc_sun"),SunSwarmControl:new Action("Sun Control Station","space","swarm_control","spc_sun"),SunSwarmSatellite:new Action("Sun Swarm Satellite","space","swarm_satellite","spc_sun"),SunJumpGate:new Action("Sun Jump Gate","space","jump_gate","spc_sun",{multiSegmented:!0}),GasMission:new Action("Gas Mission","space","gas_mission","spc_gas"),GasMining:new Action("Gas Helium-3 Collector","space","gas_mining","spc_gas",{smart:!0}),GasStorage:new Action("Gas Fuel Depot","space","gas_storage","spc_gas"),GasSpaceDock:new SpaceDock("Gas Space Dock","space","star_dock","spc_gas"),GasSpaceDockProbe:new ModalAction("Space Dock Probe","starDock","probes",""),GasSpaceDockGECK:new ModalAction("Space Dock G.E.C.K.","starDock","geck",""),GasSpaceDockShipSegment:new ModalAction("Space Dock Bioseeder Ship","starDock","seeder","",{multiSegmented:!0}),GasSpaceDockPrepForLaunch:new ModalAction("Space Dock Prep Ship","starDock","prep_ship",""),GasSpaceDockLaunch:new ModalAction("Space Dock Launch Ship","starDock","launch_ship","",{prestige:!0}),GasMoonMission:new Action("Gas Moon Mission","space","gas_moon_mission","spc_gas_moon"),GasMoonOutpost:new Action("Gas Moon Mining Outpost","space","outpost","spc_gas_moon"),GasMoonDrone:new Action("Gas Moon Mining Drone","space","drone","spc_gas_moon"),GasMoonOilExtractor:new Action("Gas Moon Oil Extractor","space","oil_extractor","spc_gas_moon",{smart:!0}),BeltMission:new Action("Belt Mission","space","belt_mission","spc_belt"),BeltSpaceStation:new Action("Belt Space Station","space","space_station","spc_belt",{smart:!0}),BeltEleriumShip:new Action("Belt Elerium Mining Ship","space","elerium_ship","spc_belt",{smart:!0}),BeltIridiumShip:new Action("Belt Iridium Mining Ship","space","iridium_ship","spc_belt",{smart:!0}),BeltIronShip:new Action("Belt Iron Mining Ship","space","iron_ship","spc_belt",{smart:!0}),DwarfMission:new Action("Dwarf Mission","space","dwarf_mission","spc_dwarf"),DwarfEleriumContainer:new Action("Dwarf Elerium Storage","space","elerium_contain","spc_dwarf"),DwarfEleriumReactor:new Action("Dwarf Elerium Reactor","space","e_reactor","spc_dwarf"),DwarfWorldCollider:new Action("Dwarf World Collider","space","world_collider","spc_dwarf",{multiSegmented:!0}),DwarfWorldController:new Action("Dwarf World Collider (Complete)","space","world_controller","spc_dwarf",{knowledge:!0}),DwarfShipyard:new Action("Dwarf Ship Yard","space","shipyard","spc_dwarf"),DwarfMassRelay:new Action("Dwarf Mass Relay","space","mass_relay","spc_dwarf",{multiSegmented:!0}),DwarfMassRelayComplete:new Action("Dwarf Mass Relay (Complete)","space","m_relay","spc_dwarf"),TitanMission:new Action("Titan Mission","space","titan_mission","spc_titan"),TitanSpaceport:new Action("Titan Spaceport","space","titan_spaceport","spc_titan"),TitanElectrolysis:new Action("Titan Electrolysis","space","electrolysis","spc_titan"),TitanHydrogen:new Action("Titan Hydrogen Plant","space","hydrogen_plant","spc_titan"),TitanQuarters:new Action("Titan Habitat","space","titan_quarters","spc_titan"),TitanMine:new Action("Titan Mine","space","titan_mine","spc_titan"),TitanStorehouse:new Action("Titan Storehouse","space","storehouse","spc_titan"),TitanBank:new Action("Titan Bank","space","titan_bank","spc_titan"),TitanGraphene:new Action("Titan Graphene Plant","space","g_factory","spc_titan"),TitanSAM:new Action("Titan SAM Site","space","sam","spc_titan"),TitanDecoder:new Action("Titan Decoder","space","decoder","spc_titan"),TitanAI:new Action("Titan AI Core","space","ai_core","spc_titan",{multiSegmented:!0}),TitanAIComplete:new Action("Titan AI Core (Complete)","space","ai_core2","spc_titan"),TitanAIColonist:new Action("Titan AI Colonist","space","ai_colonist","spc_titan"),EnceladusMission:new Action("Enceladus Mission","space","enceladus_mission","spc_enceladus"),EnceladusWaterFreighter:new Action("Enceladus Water Freighter","space","water_freighter","spc_enceladus",{smart:!0}),EnceladusZeroGLab:new Action("Enceladus Zero Gravity Lab","space","zero_g_lab","spc_enceladus"),EnceladusBase:new Action("Enceladus Operational Base","space","operating_base","spc_enceladus"),EnceladusMunitions:new Action("Enceladus Munitions Depot","space","munitions_depot","spc_enceladus"),TritonMission:new Action("Triton Mission","space","triton_mission","spc_triton"),TritonFOB:new Action("Triton Forward Base","space","fob","spc_triton"),TritonLander:new Action("Triton Troop Lander","space","lander","spc_triton",{smart:!0}),TritonCrashedShip:new Action("Triton Derelict Ship","space","crashed_ship","spc_triton"),KuiperMission:new Action("Kuiper Mission","space","kuiper_mission","spc_kuiper"),KuiperOrichalcum:new Action("Kuiper Orichalcum Mine","space","orichalcum_mine","spc_kuiper",{smart:!0}),KuiperUranium:new Action("Kuiper Uranium Mine","space","uranium_mine","spc_kuiper",{smart:!0}),KuiperNeutronium:new Action("Kuiper Neutronium Mine","space","neutronium_mine","spc_kuiper",{smart:!0}),KuiperElerium:new Action("Kuiper Elerium Mine","space","elerium_mine","spc_kuiper",{smart:!0}),ErisMission:new Action("Eris Mission","space","eris_mission","spc_eris"),ErisDrone:new Action("Eris Control Relay","space","drone_control","spc_eris"),ErisTrooper:new Action("Eris Android Trooper","space","shock_trooper","spc_eris"),ErisTank:new Action("Eris Tank","space","tank","spc_eris"),ErisDigsite:new Action("Eris Digsite","space","digsite","spc_eris"),TauStarRingworld:new Action("Tau Star Ringworld","tauceti","ringworld","tau_star",{multiSegmented:!0}),TauStarMatrix:new Action("Tau Star Matrix","tauceti","matrix","tau_star"),TauStarBluePill:new Action("Tau Star Blue Pill","tauceti","blue_pill","tau_star",{prestige:!0}),TauStarEden:new Action("Tau Star Garden of Eden","tauceti","goe_facility","tau_star",{prestige:!0}),TauMission:new Action("Tau Mission","tauceti","home_mission","tau_home"),TauDismantle:new Action("Tau Dismantle Ship","tauceti","dismantle","tau_home"),TauOrbitalStation:new Action("Tau Orbital Station","tauceti","orbital_station","tau_home"),TauColony:new Action("Tau Colony","tauceti","colony","tau_home",{housing:!0}),TauHousing:new Action("Tau Housing","tauceti","tau_housing","tau_home",{housing:!0}),TauCaptiveHousing:new CityAction("Tau Captive Housing","tauceti","captive_housing","tau_home"),TauPylon:new Action("Tau Pylon","tauceti","pylon","tau_home"),TauCloning:new ResourceAction("Tau Cloning","tauceti","cloning_facility","tau_home","Population",{housing:!0}),TauForgeHorseshoe:new ResourceAction("Tau Horseshoe","tauceti","horseshoe","tau_home","Horseshoe",{housing:!0,garrison:!0}),TauAssembly:new ResourceAction("Tau Assembly","tauceti","assembly","tau_home","Population",{housing:!0}),TauNaniteFactory:new CityAction("Tau Nanite Factory","tauceti","nanite_factory","tau_home"),TauFarm:new Action("Tau High-Tech Farm","tauceti","tau_farm","tau_home"),TauMiningPit:new Action("Tau Mining Pit","tauceti","mining_pit","tau_home",{smart:!0}),TauExcavate:new Action("Tau Excavate","tauceti","excavate","tau_home"),TauAlienOutpost:new Action("Tau Alien Outpost","tauceti","alien_outpost","tau_home",{knowledge:!0}),TauJumpGate:new Action("Tau Jump Gate","tauceti","jump_gate","tau_home",{multiSegmented:!0}),TauFusionGenerator:new Action("Tau Fusion Generator","tauceti","fusion_generator","tau_home"),TauRepository:new Action("Tau Repository","tauceti","repository","tau_home"),TauFactory:new Action("Tau High-Tech Factory","tauceti","tau_factory","tau_home"),TauDiseaseLab:new Action("Tau Disease Lab","tauceti","infectious_disease_lab","tau_home",{knowledge:!0}),TauCasino:new Action("Tau Casino","tauceti","tauceti_casino","tau_home"),TauCulturalCenter:new Action("Tau Cultural Center","tauceti","tau_cultural_center","tau_home"),TauRedMission:new Action("Tau Red Mission","tauceti","red_mission","tau_red"),TauRedOrbitalPlatform:new Action("Tau Red Orbital Platform","tauceti","orbital_platform","tau_red"),TauRedContact:new Action("Tau Red Contact","tauceti","contact","tau_red"),TauRedIntroduce:new Action("Tau Red Introduce","tauceti","introduce","tau_red"),TauRedSubjugate:new Action("Tau Red Subjugate","tauceti","subjugate","tau_red"),TauRedJeff:new Action("Tau Red Jeff","tauceti","jeff","tau_red"),TauRedOverseer:new Action("Tau Red Overseer","tauceti","overseer","tau_red",{smart:!0}),TauRedWomlingVillage:new Action("Tau Red Womling Village","tauceti","womling_village","tau_red"),TauRedWomlingFarm:new Action("Tau Red Womling Farm","tauceti","womling_farm","tau_red",{smart:!0}),TauRedWomlingMine:new Action("Tau Red Womling Mine","tauceti","womling_mine","tau_red",{smart:!0}),TauRedWomlingFun:new Action("Tau Red Womling Theater","tauceti","womling_fun","tau_red",{smart:!0}),TauRedWomlingLab:new Action("Tau Red Womling Lab","tauceti","womling_lab","tau_red",{smart:!0,knowledge:!0}),TauGasContest:new Action("Tau Gas Naming Contest","tauceti","gas_contest","tau_gas"),TauGasName1:new Action("Tau Gas Name 1","tauceti","gas_contest-a1","tau_gas",{random:!0}),TauGasName2:new Action("Tau Gas Name 2","tauceti","gas_contest-a2","tau_gas",{random:!0}),TauGasName3:new Action("Tau Gas Name 3","tauceti","gas_contest-a3","tau_gas",{random:!0}),TauGasName4:new Action("Tau Gas Name 4","tauceti","gas_contest-a4","tau_gas",{random:!0}),TauGasName5:new Action("Tau Gas Name 5","tauceti","gas_contest-a5","tau_gas",{random:!0}),TauGasName6:new Action("Tau Gas Name 6","tauceti","gas_contest-a6","tau_gas",{random:!0}),TauGasName7:new Action("Tau Gas Name 7","tauceti","gas_contest-a7","tau_gas",{random:!0}),TauGasName8:new Action("Tau Gas Name 8","tauceti","gas_contest-a8","tau_gas",{random:!0}),TauGasRefuelingStation:new Action("Tau Gas Refueling Station","tauceti","refueling_station","tau_gas"),TauGasOreRefinery:new Action("Tau Gas Ore Refinery","tauceti","ore_refinery","tau_gas"),TauGasWhalingStation:new Action("Tau Gas Whale Processor","tauceti","whaling_station","tau_gas",{smart:!0}),TauGasWomlingStation:new Action("Tau Gas Womling Station","tauceti","womling_station","tau_gas"),TauBeltMission:new Action("Tau Belt Mission","tauceti","roid_mission","tau_roid"),TauBeltPatrolShip:new Action("Tau Belt Patrol Ship","tauceti","patrol_ship","tau_roid"),TauBeltMiningShip:new Action("Tau Belt Extractor Ship","tauceti","mining_ship","tau_roid"),TauBeltWhalingShip:new Action("Tau Belt Whaling Ship","tauceti","whaling_ship","tau_roid"),TauGas2Contest:new Action("Tau Gas 2 Naming Contest","tauceti","gas_contest2","tau_gas2"),TauGas2Name1:new Action("Tau Gas 2 Name 1","tauceti","gas_contest-b1","tau_gas2",{random:!0}),TauGas2Name2:new Action("Tau Gas 2 Name 2","tauceti","gas_contest-b2","tau_gas2",{random:!0}),TauGas2Name3:new Action("Tau Gas 2 Name 3","tauceti","gas_contest-b3","tau_gas2",{random:!0}),TauGas2Name4:new Action("Tau Gas 2 Name 4","tauceti","gas_contest-b4","tau_gas2",{random:!0}),TauGas2Name5:new Action("Tau Gas 2 Name 5","tauceti","gas_contest-b5","tau_gas2",{random:!0}),TauGas2Name6:new Action("Tau Gas 2 Name 6","tauceti","gas_contest-b6","tau_gas2",{random:!0}),TauGas2Name7:new Action("Tau Gas 2 Name 7","tauceti","gas_contest-b7","tau_gas2",{random:!0}),TauGas2Name8:new Action("Tau Gas 2 Name 8","tauceti","gas_contest-b8","tau_gas2",{random:!0}),TauGas2AlienSurvey:new Action("Tau Gas 2 Alien Station (Survey)","tauceti","alien_station_survey","tau_gas2"),TauGas2AlienStation:new Action("Tau Gas 2 Alien Station","tauceti","alien_station","tau_gas2",{multiSegmented:!0}),TauGas2AlienSpaceStation:new Action("Tau Gas 2 Alien Space Station","tauceti","alien_space_station","tau_gas2"),TauGas2MatrioshkaBrain:new Action("Tau Gas 2 Matrioshka Brain","tauceti","matrioshka_brain","tau_gas2",{multiSegmented:!0}),TauGas2IgnitionDevice:new Action("Tau Gas 2 Ignition Device","tauceti","ignition_device","tau_gas2",{multiSegmented:!0}),TauGas2IgniteGasGiant:new Action("Tau Gas 2 Ignite Gas Giant","tauceti","ignite_gas_giant","tau_gas2",{prestige:!0}),AlphaMission:new Action("Alpha Centauri Mission","interstellar","alpha_mission","int_alpha"),AlphaStarport:new Action("Alpha Starport","interstellar","starport","int_alpha"),AlphaHabitat:new Action("Alpha Habitat","interstellar","habitat","int_alpha",{housing:!0}),AlphaMiningDroid:new Action("Alpha Mining Droid","interstellar","mining_droid","int_alpha"),AlphaProcessing:new Action("Alpha Processing Facility","interstellar","processing","int_alpha"),AlphaFusion:new Action("Alpha Fusion Reactor","interstellar","fusion","int_alpha"),AlphaLaboratory:new Action("Alpha Laboratory","interstellar","laboratory","int_alpha",{knowledge:!0}),AlphaExchange:new Action("Alpha Exchange","interstellar","exchange","int_alpha"),AlphaGraphenePlant:new Action("Alpha Graphene Plant","interstellar","g_factory","int_alpha"),AlphaWarehouse:new Action("Alpha Warehouse","interstellar","warehouse","int_alpha"),AlphaMegaFactory:new Action("Alpha Mega Factory","interstellar","int_factory","int_alpha"),AlphaLuxuryCondo:new Action("Alpha Luxury Condo","interstellar","luxury_condo","int_alpha",{housing:!0}),AlphaExoticZoo:new Action("Alpha Exotic Zoo","interstellar","zoo","int_alpha"),ProximaMission:new Action("Proxima Mission","interstellar","proxima_mission","int_proxima"),ProximaTransferStation:new Action("Proxima Transfer Station","interstellar","xfer_station","int_proxima"),ProximaCargoYard:new Action("Proxima Cargo Yard","interstellar","cargo_yard","int_proxima"),ProximaCruiser:new Action("Proxima Patrol Cruiser","interstellar","cruiser","int_proxima",{garrison:!0}),ProximaDyson:new Action("Proxima Dyson Sphere (Adamantite)","interstellar","dyson","int_proxima",{multiSegmented:!0}),ProximaDysonSphere:new Action("Proxima Dyson Sphere (Bolognium)","interstellar","dyson_sphere","int_proxima",{multiSegmented:!0}),ProximaOrichalcumSphere:new Action("Proxima Dyson Sphere (Orichalcum)","interstellar","orichalcum_sphere","int_proxima",{multiSegmented:!0}),NebulaMission:new Action("Nebula Mission","interstellar","nebula_mission","int_nebula"),NebulaNexus:new Action("Nebula Nexus","interstellar","nexus","int_nebula"),NebulaHarvester:new Action("Nebula Harvester","interstellar","harvester","int_nebula",{smart:!0}),NebulaEleriumProspector:new Action("Nebula Elerium Prospector","interstellar","elerium_prospector","int_nebula"),NeutronMission:new Action("Neutron Mission","interstellar","neutron_mission","int_neutron"),NeutronMiner:new Action("Neutron Miner","interstellar","neutron_miner","int_neutron"),NeutronCitadel:new Action("Neutron Citadel Station","interstellar","citadel","int_neutron"),NeutronStellarForge:new Action("Neutron Stellar Forge","interstellar","stellar_forge","int_neutron"),Blackhole:new Action("Blackhole Mission","interstellar","blackhole_mission","int_blackhole"),BlackholeFarReach:new Action("Blackhole Farpoint","interstellar","far_reach","int_blackhole",{knowledge:!0}),BlackholeStellarEngine:new Action("Blackhole Stellar Engine","interstellar","stellar_engine","int_blackhole",{multiSegmented:!0}),BlackholeMassEjector:new Action("Blackhole Mass Ejector","interstellar","mass_ejector","int_blackhole"),BlackholeJumpShip:new Action("Blackhole Jump Ship","interstellar","jump_ship","int_blackhole"),BlackholeWormholeMission:new Action("Blackhole Wormhole Mission","interstellar","wormhole_mission","int_blackhole"),BlackholeStargate:new Action("Blackhole Stargate","interstellar","stargate","int_blackhole",{multiSegmented:!0}),BlackholeStargateComplete:new Action("Blackhole Stargate (Complete)","interstellar","s_gate","int_blackhole"),SiriusMission:new Action("Sirius Mission","interstellar","sirius_mission","int_sirius"),SiriusAnalysis:new Action("Sirius B Analysis","interstellar","sirius_b","int_sirius"),SiriusSpaceElevator:new Action("Sirius Space Elevator","interstellar","space_elevator","int_sirius",{multiSegmented:!0}),SiriusGravityDome:new Action("Sirius Gravity Dome","interstellar","gravity_dome","int_sirius",{multiSegmented:!0}),SiriusAscensionMachine:new Action("Sirius Ascension Machine","interstellar","ascension_machine","int_sirius",{multiSegmented:!0}),SiriusAscensionTrigger:new Action("Sirius Ascension Machine (Complete)","interstellar","ascension_trigger","int_sirius",{smart:!0}),SiriusAscend:new Action("Sirius Ascend","interstellar","ascend","int_sirius",{prestige:!0}),SiriusThermalCollector:new Action("Sirius Thermal Collector","interstellar","thermal_collector","int_sirius"),GatewayMission:new Action("Gateway Mission","galaxy","gateway_mission","gxy_gateway"),GatewayStarbase:new Action("Gateway Starbase","galaxy","starbase","gxy_gateway",{garrison:!0}),GatewayShipDock:new Action("Gateway Ship Dock","galaxy","ship_dock","gxy_gateway"),BologniumShip:new Action("Gateway Bolognium Ship","galaxy","bolognium_ship","gxy_gateway",{ship:!0,smart:!0}),ScoutShip:new Action("Gateway Scout Ship","galaxy","scout_ship","gxy_gateway",{ship:!0,smart:!0}),CorvetteShip:new Action("Gateway Corvette Ship","galaxy","corvette_ship","gxy_gateway",{ship:!0,smart:!0}),FrigateShip:new Action("Gateway Frigate Ship","galaxy","frigate_ship","gxy_gateway",{ship:!0}),CruiserShip:new Action("Gateway Cruiser Ship","galaxy","cruiser_ship","gxy_gateway",{ship:!0}),Dreadnought:new Action("Gateway Dreadnought","galaxy","dreadnought","gxy_gateway",{ship:!0}),StargateStation:new Action("Stargate Station","galaxy","gateway_station","gxy_stargate"),StargateTelemetryBeacon:new Action("Stargate Telemetry Beacon","galaxy","telemetry_beacon","gxy_stargate",{knowledge:!0}),StargateDepot:new Action("Stargate Depot","galaxy","gateway_depot","gxy_stargate"),StargateDefensePlatform:new Action("Stargate Defense Platform","galaxy","defense_platform","gxy_stargate"),GorddonMission:new Action("Gorddon Mission","galaxy","gorddon_mission","gxy_gorddon"),GorddonEmbassy:new Action("Gorddon Embassy","galaxy","embassy","gxy_gorddon",{housing:!0}),GorddonDormitory:new Action("Gorddon Dormitory","galaxy","dormitory","gxy_gorddon",{housing:!0}),GorddonSymposium:new Action("Gorddon Symposium","galaxy","symposium","gxy_gorddon",{knowledge:!0}),GorddonFreighter:new Action("Gorddon Freighter","galaxy","freighter","gxy_gorddon",{ship:!0}),Alien1Consulate:new Action("Alien 1 Consulate","galaxy","consulate","gxy_alien1",{housing:!0}),Alien1Resort:new Action("Alien 1 Resort","galaxy","resort","gxy_alien1"),Alien1VitreloyPlant:new Action("Alien 1 Vitreloy Plant","galaxy","vitreloy_plant","gxy_alien1",{smart:!0}),Alien1SuperFreighter:new Action("Alien 1 Super Freighter","galaxy","super_freighter","gxy_alien1",{ship:!0}),Alien2Mission:new Action("Alien 2 Mission","galaxy","alien2_mission","gxy_alien2"),Alien2Foothold:new Action("Alien 2 Foothold","galaxy","foothold","gxy_alien2"),Alien2ArmedMiner:new Action("Alien 2 Armed Miner","galaxy","armed_miner","gxy_alien2",{ship:!0,smart:!0}),Alien2OreProcessor:new Action("Alien 2 Ore Processor","galaxy","ore_processor","gxy_alien2"),Alien2Scavenger:new Action("Alien 2 Scavenger","galaxy","scavenger","gxy_alien2",{knowledge:!0,ship:!0}),ChthonianMission:new Action("Chthonian Mission","galaxy","chthonian_mission","gxy_chthonian"),ChthonianMineLayer:new Action("Chthonian Mine Layer","galaxy","minelayer","gxy_chthonian",{ship:!0,smart:!0}),ChthonianExcavator:new Action("Chthonian Excavator","galaxy","excavator","gxy_chthonian",{smart:!0}),ChthonianRaider:new Action("Chthonian Corsair","galaxy","raider","gxy_chthonian",{ship:!0,smart:!0}),PortalTurret:new Action("Portal Laser Turret","portal","turret","prtl_fortress"),PortalCarport:new Action("Portal Surveyor Carport","portal","carport","prtl_fortress"),PortalWarDroid:new Action("Portal War Droid","portal","war_droid","prtl_fortress"),PortalRepairDroid:new Action("Portal Repair Droid","portal","repair_droid","prtl_fortress"),BadlandsPredatorDrone:new Action("Badlands Predator Drone","portal","war_drone","prtl_badlands"),BadlandsSensorDrone:new Action("Badlands Sensor Drone","portal","sensor_drone","prtl_badlands"),BadlandsAttractor:new Action("Badlands Attractor Beacon","portal","attractor","prtl_badlands",{smart:!0}),PitMission:new Action("Pit Mission","portal","pit_mission","prtl_pit"),PitAssaultForge:new Action("Pit Assault Forge","portal","assault_forge","prtl_pit"),PitSoulForge:new Action("Pit Soul Forge","portal","soul_forge","prtl_pit"),PitGunEmplacement:new Action("Pit Gun Emplacement","portal","gun_emplacement","prtl_pit"),PitSoulAttractor:new Action("Pit Soul Attractor","portal","soul_attractor","prtl_pit"),PitSoulCapacitor:new Action("Pit Soul Capacitor (Witch Hunting)","portal","soul_capacitor","prtl_pit"),PitAbsorptionChamber:new Action("Pit Absorption Chamber (Witch Hunting)","portal","absorption_chamber","prtl_pit"),RuinsMission:new Action("Ruins Mission","portal","ruins_mission","prtl_ruins"),RuinsGuardPost:new Action("Ruins Guard Post","portal","guard_post","prtl_ruins",{smart:!0}),RuinsVault:new Action("Ruins Vault","portal","vault","prtl_ruins"),RuinsArchaeology:new Action("Ruins Archaeology","portal","archaeology","prtl_ruins"),RuinsArcology:new Action("Ruins Arcology","portal","arcology","prtl_ruins"),RuinsHellForge:new Action("Ruins Infernal Forge","portal","hell_forge","prtl_ruins"),RuinsInfernoPower:new Action("Ruins Inferno Reactor","portal","inferno_power","prtl_ruins"),RuinsAncientPillars:new Pillar("Ruins Ancient Pillars","portal","ancient_pillars","prtl_ruins"),GateMission:new Action("Gate Mission","portal","gate_mission","prtl_gate"),GateEastTower:new Action("Gate East Tower","portal","east_tower","prtl_gate",{multiSegmented:!0}),GateWestTower:new Action("Gate West Tower","portal","west_tower","prtl_gate",{multiSegmented:!0}),GateTurret:new Action("Gate Turret","portal","gate_turret","prtl_gate"),GateInferniteMine:new Action("Gate Infernite Mine","portal","infernite_mine","prtl_gate"),LakeMission:new Action("Lake Mission","portal","lake_mission","prtl_lake"),LakeHarbour:new Action("Lake Harbour","portal","harbour","prtl_lake",{smart:!0}),LakeCoolingTower:new Action("Lake Cooling Tower","portal","cooling_tower","prtl_lake",{smart:!0}),LakeBireme:new Action("Lake Bireme Warship","portal","bireme","prtl_lake",{smart:!0}),LakeTransport:new Action("Lake Transport","portal","transport","prtl_lake",{smart:!0}),SpireMission:new Action("Spire Mission","portal","spire_mission","prtl_spire"),SpirePurifier:new Action("Spire Purifier","portal","purifier","prtl_spire",{smart:!0}),SpirePort:new Action("Spire Port","portal","port","prtl_spire",{smart:!0}),SpireBaseCamp:new Action("Spire Base Camp","portal","base_camp","prtl_spire",{smart:!0}),SpireBridge:new Action("Spire Bridge","portal","bridge","prtl_spire"),SpireSphinx:new Action("Spire Sphinx","portal","sphinx","prtl_spire"),SpireBribeSphinx:new Action("Spire Bribe Sphinx","portal","bribe_sphinx","prtl_spire"),SpireSurveyTower:new Action("Spire Survey Tower","portal","spire_survey","prtl_spire"),SpireMechBay:new Action("Spire Mech Bay","portal","mechbay","prtl_spire",{smart:!0}),SpireTower:new Action("Spire Tower","portal","spire","prtl_spire"),SpireWaygate:new Action("Spire Waygate","portal","waygate","prtl_spire",{smart:!0})},linkedBuildings=[[buildings.LakeTransport,buildings.LakeBireme],[buildings.SpirePort,buildings.SpireBaseCamp]],projects={LaunchFacility:new Project("Launch Facility","launch_facility"),SuperCollider:new Project("Supercollider","lhc"),StockExchange:new Project("Stock Exchange","stock_exchange"),Monument:new Project("Monument","monument"),Railway:new Project("Railway","railway"),Nexus:new Project("Nexus","nexus"),RoidEject:new Project("Asteroid Redirect","roid_eject"),ManaSyphon:new Project("Mana Syphon","syphon"),Depot:new Project("Depot","tp_depot")};const wrGlobalCondition=0,wrIndividualCondition=1,wrDescription=2,wrMultiplier=3;var weightingRules=[[()=>!settings.autoBuild,()=>!0,()=>"",()=>0],[()=>!0,e=>!e.isUnlocked(),()=>"Locked",()=>0],[()=>!0,e=>state.queuedTargets.includes(e),()=>"Queued building, processing...",()=>0],[()=>!0,e=>state.triggerTargets.includes(e),()=>"Active trigger, processing...",()=>0],[()=>!0,e=>!e.autoBuildEnabled,()=>"AutoBuild disabled",()=>0],[()=>!0,e=>e.count>=e.autoMax,()=>"Maximum amount reached",()=>0],[()=>!0,e=>!e.isAffordable(!0),()=>"",()=>0],[()=>game.global.race.truepath&&buildings.SpaceTestLaunch.isUnlocked()&&!haveTech("world_control"),e=>{if(e===buildings.SpaceTestLaunch){let e=1;for(let t=0;t<3;t++){let i=game.global.civic.foreign[`gov${t}`];i.occ||i.anx||i.buy||e++}return 1/(e+1)}},e=>`${Math.round(100*e)}% chance of successful launch`,e=>e<.5?e:0],[()=>settings.jobDisableMiners&&buildings.GatewayStarbase.count>0,e=>e===buildings.CoalMine||e===buildings.Mine&&!(game.global.race.sappy&&game.global.race.smoldering),()=>"Miners disabled in Andromeda",()=>0],[()=>haveTech("piracy"),e=>e===buildings.StargateDefensePlatform&&20*buildings.StargateDefensePlatform.count>=(game.global.race.instinct?.09:.1)*game.global.tech.piracy,()=>"Piracy fully supressed",()=>0],[()=>settings.autoMech&&"none"!==settings.mechBuild&&settings.buildingMechsFirst&&buildings.SpireMechBay.count>0&&0===buildings.SpireMechBay.stateOffCount,e=>{if(e.cost.Supply){if(MechManager.isActive)return"Building mechs...";let e=game.global.portal.mechbay,t=haveTask("mech")?"titan":"random"===settings.mechBuild?MechManager.getPreferredSize()[0]:e.blueprint.size,[i,a,r]=MechManager.getMechCost({size:t});if(r<=e.max-e.bay&&a<=resources.Supply.maxQuantity&&i<=resources.Soul_Gem.currentQuantity)return"Saving supplies for new mech"}},e=>e,()=>0],[()=>settings.prestigeBioseedConstruct&&"ascension"===settings.prestigeType&&!game.global.race.witch_hunter,e=>e===buildings.GateEastTower||e===buildings.GateWestTower,()=>"Not needed for Ascension prestige",()=>0],[()=>buildings.GateEastTower.isUnlocked()&&buildings.GateWestTower.isUnlocked()&&poly.hellSupression("gate").supress<settings.buildingTowerSuppression/100,e=>e===buildings.GateEastTower||e===buildings.GateWestTower,()=>"Too low gate supression",()=>0],[()=>"whitehole"===settings.prestigeType&&settings.prestigeWhiteholeSaveGems,e=>{if(e.cost.Soul_Gem>resources.Soul_Gem.currentQuantity-10)return!0},()=>"Saving up Soul Gems for prestige",()=>0],[()=>buildings.GorddonFreighter.isAutoBuildable()&&buildings.GorddonFreighter.isAffordable(!0)&&buildings.Alien1SuperFreighter.isAutoBuildable()&&buildings.Alien1SuperFreighter.isAffordable(!0),e=>{if(e===buildings.GorddonFreighter||e===buildings.Alien1SuperFreighter){let t=buildings.GorddonFreighter.count,i=((1+.03*(t+1))/(1+.03*t)-1)/3,a=buildings.Alien1SuperFreighter.count,r=((1+.08*(a+1))/(1+.08*a)-1)/5;if(e===buildings.GorddonFreighter&&i<r)return buildings.Alien1SuperFreighter;if(e===buildings.Alien1SuperFreighter&&r<i)return buildings.GorddonFreighter}},e=>`${e.title} gives more Money`,()=>settings.buildingsBestFreighter?0:1],[()=>buildings.LakeBireme.isAutoBuildable()&&buildings.LakeBireme.isAffordable(!0)&&buildings.LakeTransport.isAutoBuildable()&&buildings.LakeTransport.isAffordable(!0)&&resources.Lake_Support.rateOfChange<=1,e=>{if(e===buildings.LakeBireme||e===buildings.LakeTransport){let t=buildings.LakeBireme.count,i=buildings.LakeTransport.count,a=game.global.blood.spire&&game.global.blood.spire>=2?.8:.85,r=5*i*(1-a**(t+1)),n=5*(i+1)*(1-a**t);if(settings.buildingsTransportGem){let e=5*i*(1-a**t);r=(r-e)/buildings.LakeBireme.cost.Soul_Gem,n=(n-e)/buildings.LakeTransport.cost.Soul_Gem}if(e===buildings.LakeBireme&&r<n)return buildings.LakeTransport;if(e===buildings.LakeTransport&&n<r)return buildings.LakeBireme}},e=>`${e.title} gives more Supplies`,()=>0],[()=>buildings.SpirePort.isAutoBuildable()&&buildings.SpirePort.isAffordable(!0)&&buildings.SpireBaseCamp.isAutoBuildable()&&buildings.SpireBaseCamp.isAffordable(!0),e=>{if(e===buildings.SpirePort||e===buildings.SpireBaseCamp){let t=buildings.SpirePort.count,i=buildings.SpireBaseCamp.count,a=(t+1)*(1+.4*i),r=t*(1+.4*(i+1));if(e===buildings.SpirePort&&a<r)return buildings.SpireBaseCamp;if(e===buildings.SpireBaseCamp&&r<a)return buildings.SpirePort}},e=>`${e.title} gives more Max Supplies`,()=>0],[()=>haveTech("waygate",2),e=>e===buildings.SpireWaygate,()=>"",()=>0],[()=>haveTech("hell_spire",8),e=>e===buildings.SpireSphinx,()=>"",()=>0],[()=>game.global.race.artifical&&haveTech("focus_cure",7),e=>e instanceof ResourceAction&&e.resource===resources.Population&&e!==buildings.TauCloning,()=>"Assembling is not possible",()=>0],[()=>game.global.race.artifical,e=>e instanceof ResourceAction&&e.resource===resources.Population&&1===resources.Population.storageRatio,()=>"No empty housings",()=>0],[()=>0===buildings.GorddonEmbassy.count&&resources.Knowledge.maxQuantity<settings.fleetEmbassyKnowledge,e=>e===buildings.GorddonEmbassy,()=>`${getNumberString(settings.fleetEmbassyKnowledge)} Max Knowledge required`,()=>0],[()=>game.global.race.magnificent&&"any"!==settings.buildingShrineType,e=>{if(e===buildings.Shrine){let e=null;if(game.global.city.calendar.moon>0&&game.global.city.calendar.moon<7)e="morale";else if(game.global.city.calendar.moon>7&&game.global.city.calendar.moon<14)e="metal";else if(game.global.city.calendar.moon>14&&game.global.city.calendar.moon<21)e="know";else{if(!(game.global.city.calendar.moon>21))return!0;e="tax"}if("equally"===settings.buildingShrineType){let t=Math.min(game.global.city.shrine.morale,game.global.city.shrine.metal,game.global.city.shrine.know,game.global.city.shrine.tax);return game.global.city.shrine[e]!==t}return settings.buildingShrineType!==e}},()=>"Wrong shrine",()=>0],[()=>game.global.race.slaver,e=>{if(e===buildings.SlaveMarket){if(resources.Slave.currentQuantity>=resources.Slave.maxQuantity)return"Slave pens already full";if(resources.Money.currentQuantity+resources.Money.rateOfChange<resources.Money.maxQuantity&&resources.Money.rateOfChange<settings.slaveIncome)return"Buying slaves only with excess money"}},e=>e,()=>0],[()=>game.global.race.cannibalize,e=>{if(e===buildings.SacrificialAltar&&e.count>0){if(resources.Population.currentQuantity<1)return"Too low population";if(resources.Population.currentQuantity!==resources.Population.maxQuantity)return"Sacrifices performed only with full population";if(game.global.race.parasite&&0===game.global.city.calendar.wind)return"Parasites sacrificed only during windy weather";if(game.global.civic[game.global.civic.d_job].workers<1)return"No default workers to sacrifice";if(game.global.city.s_alter.rage>=3600&&game.global.city.s_alter.regen>=3600&&game.global.city.s_alter.mind>=3600&&game.global.city.s_alter.mine>=3600&&(!isLumberRace()||game.global.city.s_alter.harvest>=3600))return"Sacrifice bonus already high enough"}},e=>e,()=>0],[()=>!0,e=>e.getMissingConsumption(),e=>`Missing ${e.name} to operate`,()=>settings.buildingWeightingMissingSupply],[()=>!0,e=>e.getMissingSupport(),e=>`Missing ${e.name} to operate`,()=>settings.buildingWeightingMissingSupport],[()=>!0,e=>e.getUselessSupport(),e=>`Provided ${e.name} not currently needed`,()=>settings.buildingWeightingUselessSupport],[()=>game.global.race.truepath&&resources.Tau_Belt_Support.maxQuantity<=resources.Tau_Belt_Support.currentQuantity,e=>{if(e===buildings.TauBeltWhalingShip||e===buildings.TauBeltMiningShip){let e=resources.Tau_Belt_Support.maxQuantity,t=resources.Tau_Belt_Support.currentQuantity;return(1-(1-e/(t+1))**1.4)*(t+1)-(1-(1-e/t)**1.4)*t}},e=>`Low security, new ship will be ${getNiceNumber(100*e)}% efficient`,e=>e??-1],[()=>game.global.race.truepath,e=>{if(e===buildings.TauRedContact||e===buildings.TauRedIntroduce||e===buildings.TauRedSubjugate){let t=null;for(let[i,a]of Object.entries({TauRedContact:"friend",TauRedIntroduce:"god",TauRedSubjugate:"lord"}))if(!game.global.stats.womling[a][poly.universeAffix()]){if(e===buildings[i])return!1;buildings[i].isAutoBuildable()&&(t=i)}return t}},e=>`Overlord achievement is missing ${buildings[e].name}`,()=>settings.buildingWeightingOverlord],[()=>!0,e=>"city"===e._tab&&e!==buildings.Mill&&e.stateOffCount>0,()=>"Still have some non operating buildings",()=>settings.buildingWeightingNonOperatingCity],[()=>!0,e=>{if("city"!==e._tab&&e.stateOffCount>0){if(e===buildings.RuinsGuardPost&&e.isSmartManaged()&&!isHellSupressUseful()&&e.count<Math.ceil(5e3/(game.armyRating(traitVal("high_pop",0,1),"hellArmy",0)*traitVal("holy",1,"+"))))return!1;if(e===buildings.BadlandsAttractor&&e.isSmartManaged())return!1;if(e===buildings.SpireMechBay&&e.isSmartManaged())return!1;let t=e===buildings.SpirePort?1:e===buildings.SpireBaseCamp?2:-1;return!(t>0&&(buildings.SpireMechBay.isSmartManaged()||buildings.SpirePurifier.isSmartManaged())&&e.count<getBestSupplyRatio(resources.Spire_Support.maxQuantity,buildings.SpirePort.autoMax,buildings.SpireBaseCamp.autoMax)[t])}},()=>"Still have some non operating buildings",()=>settings.buildingWeightingNonOperating],[()=>"bioseed"!==settings.prestigeType||!isGECKNeeded(),e=>e===buildings.GasSpaceDockGECK,()=>"Max allowed amount of G.E.C.K reached",()=>0],[()=>game.global.race.lone_survivor&&!isPrestigeAllowed("eden"),e=>e===buildings.TauStarEden,()=>"Prestiging not currently allowed",()=>0],[()=>game.global.race.truepath&&(!isPrestigeAllowed("retire")||buildings.TauGas2MatrioshkaBrain.count<1e3),e=>e===buildings.TauGas2IgniteGasGiant,()=>"Prestiging not currently allowed",()=>0],[()=>settings.prestigeBioseedConstruct&&"bioseed"!==settings.prestigeType,e=>e===buildings.GasSpaceDock||e===buildings.GasSpaceDockShipSegment||e===buildings.GasSpaceDockProbe,()=>"Not needed for current prestige",()=>0],[()=>settings.prestigeBioseedConstruct&&"bioseed"===settings.prestigeType,e=>e===buildings.DwarfWorldCollider||e===buildings.TitanMission,()=>"Not needed for Bioseed prestige",()=>0],[()=>settings.prestigeBioseedConstruct&&"whitehole"===settings.prestigeType,e=>e===buildings.BlackholeJumpShip,()=>"Not needed for Whitehole prestige",()=>0],[()=>settings.prestigeBioseedConstruct&&"vacuum"===settings.prestigeType,e=>e===buildings.BlackholeStellarEngine,()=>"Not needed for Vacuum Collapse prestige",()=>0],[()=>settings.prestigeBioseedConstruct&&"ascension"===settings.prestigeType&&isPillarFinished()&&!game.global.race.witch_hunter,e=>e===buildings.PitMission||e===buildings.RuinsMission,()=>"Not needed for Ascension prestige",()=>0],[()=>game.global.race.witch_hunter&&"ascension"===settings.prestigeType,e=>e===buildings.SpireWaygate,()=>"Not needed for Witch Hunter's Ascension prestige",()=>0],[()=>settings.prestigeBioseedConstruct&&"terraform"===settings.prestigeType,e=>e===buildings.PitMission||e===buildings.RuinsMission,()=>"Not needed for Terraform prestige",()=>0],[()=>settings.autoPrestige&&"mad"===settings.prestigeType&&(haveTech("mad")||techIds["tech-mad"].isUnlocked()&&techIds["tech-mad"].isAffordable(!0)),e=>!e.is.housing&&!e.is.garrison&&!e.cost.Knowledge&&e!==buildings.OilWell,()=>"Awaiting MAD prestige",()=>settings.buildingWeightingMADUseless],[()=>!0,e=>!(e instanceof ResourceAction)&&0===e.count,()=>"New building",()=>settings.buildingWeightingNew],[()=>resources.Power.isUnlocked()&&resources.Power.currentQuantity<resources.Power.maxQuantity,e=>e===buildings.LakeCoolingTower||e.powered<0,()=>"Need more energy",()=>settings.buildingWeightingNeedfulPowerPlant],[()=>resources.Power.isUnlocked()&&resources.Power.currentQuantity>resources.Power.maxQuantity,e=>e!==buildings.Mill&&(e===buildings.LakeCoolingTower||e.powered<0),()=>"No need for more energy",()=>settings.buildingWeightingUselessPowerPlant],[()=>resources.Power.isUnlocked(),e=>e!==buildings.LakeCoolingTower&&e.powered>0&&(e===buildings.NeutronCitadel?getCitadelConsumption(e.count+1)-getCitadelConsumption(e.count):e.powered)>resources.Power.currentQuantity,()=>"Not enough energy",()=>settings.buildingWeightingUnderpowered],[()=>state.knowledgeRequiredByTechs<=resources.Knowledge.maxQuantity,e=>e.is.knowledge&&e!==buildings.Wardenclyffe&&(e!==buildings.StargateTelemetryBeacon||e.count>0),()=>"No need for more knowledge",()=>settings.buildingWeightingUselessKnowledge],[()=>state.knowledgeRequiredByTechs>resources.Knowledge.maxQuantity,e=>e.is.knowledge,()=>"Need more knowledge",()=>settings.buildingWeightingNeedfulKnowledge],[()=>buildings.BlackholeMassEjector.count>0&&1e3*buildings.BlackholeMassEjector.count-game.global.interstellar.mass_ejector.total>100,e=>e===buildings.BlackholeMassEjector,()=>"Still have some unused ejectors",()=>settings.buildingWeightingUnusedEjectors],[()=>resources.Crates.storageRatio<1||resources.Containers.storageRatio<1,e=>e===buildings.StorageYard||e===buildings.Warehouse||e===buildings.EnceladusMunitions,()=>"Still have some unused storage",()=>settings.buildingWeightingCrateUseless],[()=>resources.Oil.maxQuantity<resources.Oil.maxCost&&buildings.OilWell.count<=0&&buildings.GasMoonOilExtractor.count<=0,e=>e===buildings.OilWell||e===buildings.GasMoonOilExtractor,()=>"Need more fuel",()=>settings.buildingWeightingMissingFuel],[()=>resources.Helium_3.isUnlocked()&&resources.Helium_3.maxQuantity<resources.Helium_3.maxCost||resources.Oil.maxQuantity<resources.Oil.maxCost,e=>e===buildings.OilDepot||e===buildings.SpacePropellantDepot||e===buildings.GasStorage,()=>"Need more fuel",()=>settings.buildingWeightingMissingFuel],[()=>game.global.race.hooved&&resources.Horseshoe.spareQuantity>=resources.Horseshoe.storageRequired,e=>e instanceof ResourceAction&&e.resource===resources.Horseshoe,()=>`No more ${resources.Horseshoe.title} needed`,()=>settings.buildingWeightingHorseshoeUseless],[()=>game.global.race.calm&&resources.Zen.currentQuantity<resources.Zen.maxQuantity,e=>e===buildings.MeditationChamber,()=>"No more Meditation Space needed",()=>settings.buildingWeightingZenUseless],[()=>buildings.GateTurret.isUnlocked()&&poly.hellSupression("gate").rating>7501+game.armyRating(traitVal("high_pop",0,1),"hellArmy",0)*traitVal("holy",1,"+"),e=>e===buildings.GateTurret,()=>"Gate demons fully supressed",()=>settings.buildingWeightingGateTurret],[()=>(resources.Containers.isUnlocked()||resources.Crates.isUnlocked())&&1===resources.Containers.storageRatio&&1===resources.Crates.storageRatio,e=>e===buildings.Shed||e===buildings.RedGarage||e===buildings.AlphaWarehouse||e===buildings.ProximaCargoYard||e===buildings.TitanStorehouse,()=>"Need more storage",()=>settings.buildingWeightingNeedStorage],[()=>resources.Population.maxQuantity>50&&resources.Population.storageRatio<.9,e=>e.is.housing&&e!==buildings.Alien1Consulate&&!(e instanceof ResourceAction),()=>"No more houses needed",()=>settings.buildingWeightingUselessHousing],[()=>game.global.race.orbit_decay&&!game.global.race.orbit_decayed,e=>!("city"!==e._tab&&"spc_moon"!==e._location||e instanceof ResourceAction),()=>"Will be destroyed after impact",()=>settings.buildingWeightingTemporal],[()=>1===game.global.tech.tau_gas,e=>e.is.random,()=>"Randomized weighting",()=>1+Math.random()],[()=>game.global.race.truepath&&haveTech("tauceti",2),e=>!("city"!==e._tab&&"space"!==e._tab&&"starDock"!==e._tab||e instanceof ResourceAction),()=>"Solar System building",()=>settings.buildingWeightingSolar]],MinorTraitManager={priorityList:[],_traitVueBinding:"geneticBreakdown",isUnlocked:()=>haveTech("genetics",3),sortByPriority(){this.priorityList.sort(((e,t)=>e.priority-t.priority))},managedPriorityList(){return this.priorityList.filter((e=>e.enabled&&e.isUnlocked()))},buyTrait(e){getVueById(this._traitVueBinding)?.gene(e)}},MutableTraitManager={priorityList:[],_traitVueBinding:"geneticBreakdown",isUnlocked:()=>haveTech("genetics",3)&&game.global.genes.mutation,sortByPriority(){this.priorityList.sort(((e,t)=>e.priority-t.priority))},gainTrait(e){getVueById(this._traitVueBinding)?.gain(e)},purgeTrait(e){getVueById(this._traitVueBinding)?.purge(e)},get minimumPlasmidsToPreserve(){return Math.max(0,settings.minimumPlasmidsToPreserve,settings.doNotGoBelowPlasmidSoftcap?resources.Phage.currentQuantity+250:0)}},QuarryManager={_industryVueBinding:"iQuarry",_industryVue:undefined,initIndustry(){return!(!game.global.race.smoldering||buildings.RockQuarry.count<1)&&(this._industryVue=getVueById(this._industryVueBinding),this._industryVue!==undefined)},currentProduction:()=>game.global.city.rock_quarry.asbestos,increaseProduction(e){if(0===e)return!1;if(e<0)return this.decreaseProduction(-1*e);for(let t of KeyManager.click(e))this._industryVue.add()},decreaseProduction(e){if(0===e)return!1;if(e<0)return this.increaseProduction(-1*e);for(let t of KeyManager.click(e))this._industryVue.sub()}},MineManager={_industryVueBinding:"iTMine",_industryVue:undefined,initIndustry(){return!(buildings.TitanMine.count<1)&&(this._industryVue=getVueById(this._industryVueBinding),this._industryVue!==undefined)},currentProduction:()=>game.global.space.titan_mine.ratio,increaseProduction(e){if(0===e)return!1;if(e<0)return this.decreaseProduction(-1*e);for(let t of KeyManager.click(e))this._industryVue.add()},decreaseProduction(e){if(0===e)return!1;if(e<0)return this.increaseProduction(-1*e);for(let t of KeyManager.click(e))this._industryVue.sub()}},ExtractorManager={_industryVueBinding:"iMiningShip",_industryVue:undefined,initIndustry(){return!(!haveTech("tau_roid",4)||buildings.TauBeltMiningShip.count<1)&&(this._industryVue=getVueById(this._industryVueBinding),this._industryVue!==undefined)},currentProduction:e=>game.global.tauceti.mining_ship[e],increaseProduction(e,t){if(0===t)return!1;if(t<0)return this.decreaseProduction(e,-1*t);for(let i of KeyManager.click(t))this._industryVue.add(e)},decreaseProduction(e,t){if(0===t)return!1;if(t<0)return this.increaseProduction(e,-1*t);for(let i of KeyManager.click(t))this._industryVue.sub(e)}},NaniteManager={_industryVueBinding:"iNFactory",_industryVue:undefined,storageShift:1.005,priorityList:[],Resources:["Lumber","Chrysotile","Stone","Crystal","Furs","Copper","Iron","Aluminium","Cement","Coal","Oil","Uranium","Steel","Titanium","Alloy","Polymer","Iridium","Helium_3","Water","Deuterium","Neutronium","Adamantite","Bolognium","Orichalcum"],resEnabled:e=>settings["res_nanite"+e],isUnlocked:()=>game.global.race.deconstructor&&(buildings.NaniteFactory.count>0||buildings.RedNaniteFactory.count>0||buildings.TauNaniteFactory.count>0),isUseful:()=>resources.Nanite.storageRatio<1,initIndustry(){return!!this.isUnlocked()&&(this._industryVue=getVueById(this._industryVueBinding),this._industryVue!==undefined)},isConsumable(e){return this.Resources.includes(e.id)},updateResources(){if(this.isUnlocked()&&settings.autoNanite)for(let e of this.priorityList)e.isUnlocked()&&(e.rateMods.nanite=this.currentConsume(e.id),e.rateOfChange+=e.rateMods.nanite)},managedPriorityList(){return this.priorityList},maxConsume:()=>50*game.global.city.nanite_factory.count,currentConsume:e=>game.global.city.nanite_factory[e],useRatio(){switch(settings.naniteMode){case"cap":return[.965];case"excess":return[-1];case"all":return[.035];case"mixed":return[.965,-1];case"full":return[.965,-1,.035];default:return[]}},maxConsumeCraftable(e){let t=e.rateOfChange,i=e.currentQuantity-e.storageRequired*this.storageShift;return Math.max(t,i)},maxConsumeForRatio(e,t){let i=e.rateOfChange,a=(e.storageRatio-t)*e.maxQuantity;return Math.max(i,a)},consumeMore(e,t){resources[e].rateMods.nanite+=t;for(let i of KeyManager.click(t))this._industryVue.addItem(e)},consumeLess(e,t){resources[e].rateMods.nanite-=t;for(let i of KeyManager.click(t))this._industryVue.subItem(e)}},SupplyManager={_supplyVuePrefix:"supply",storageShift:1.01,priorityList:[],resEnabled:e=>settings["res_supply"+e],isUnlocked:()=>buildings.LakeTransport.count>0,isUseful:()=>resources.Supply.storageRatio<1&&buildings.LakeTransport.stateOnCount>0&&buildings.LakeBireme.stateOnCount>0,initIndustry(){return this.isUnlocked()},isConsumable:e=>poly.supplyValue.hasOwnProperty(e.id),updateResources(){if(this.isUnlocked()&&settings.autoSupply)for(let e of this.priorityList)e.isUnlocked()&&(e.rateMods.supply=this.currentConsume(e.id)*this.supplyOut(e.id),e.rateOfChange+=e.rateMods.supply)},supplyIn:e=>poly.supplyValue[e]?.["in"]??0,supplyOut:e=>poly.supplyValue[e]?.out??0,managedPriorityList(){return this.priorityList},maxConsume:()=>game.global.portal.transport.cargo.max,currentConsume:e=>game.global.portal.transport.cargo[e],useRatio(){switch(settings.supplyMode){case"cap":return[.975];case"excess":return[-1];case"all":return[.045];case"mixed":return[.975,-1];case"full":return[.975,-1,.045];default:return[]}},maxConsumeCraftable(e){let t=e.calculateRateOfChange({buy:!1,nanite:!0}),i=e.currentQuantity-e.storageRequired*this.storageShift;return Math.max(t,i)/this.supplyOut(e.id)},maxConsumeForRatio(e,t){let i=e.calculateRateOfChange({buy:!1,nanite:!0}),a=(e.storageRatio-t)*e.maxQuantity;return Math.max(i,a)/this.supplyOut(e.id)},consumeMore(e,t){let i=getVueById(this._supplyVuePrefix+e);if(i===undefined)return!1;resources[e].rateMods.supply+=t*this.supplyOut(e);for(let a of KeyManager.click(t))i.supplyMore(e)},consumeLess(e,t){let i=getVueById(this._supplyVuePrefix+e);if(i===undefined)return!1;resources[e].rateMods.supply-=t*this.supplyOut(e);for(let a of KeyManager.click(t))i.supplyLess(e)}},EjectManager={_ejectVuePrefix:"eject",storageShift:1.015,priorityList:[],resEnabled:e=>settings["res_eject"+e],isUnlocked:()=>buildings.BlackholeMassEjector.count>0,isUseful:()=>!0,initIndustry(){return this.isUnlocked()},isConsumable:e=>game.atomic_mass.hasOwnProperty(e.id),updateResources(){if(this.isUnlocked()&&(settings.autoEject||haveTask("trash")))for(let e of this.priorityList)e.isUnlocked()&&(e.rateMods.eject=this.currentConsume(e.id),e.rateOfChange+=e.rateMods.eject)},managedPriorityList(){return game.global.race.artifical?this.priorityList.filter((e=>e!==resources.Food)):this.priorityList},maxConsume:()=>1e3*game.global.interstellar.mass_ejector.on,currentConsume:e=>game.global.interstellar.mass_ejector[e],useRatio(){switch(settings.ejectMode){case"cap":return[.985];case"excess":return[-1];case"all":return[.055];case"mixed":return[.985,-1];case"full":return[.985,-1,.055];default:return[]}},maxConsumeCraftable(e){let t=e.calculateRateOfChange({buy:!1,supply:!0,nanite:!0}),i=e.currentQuantity-e.storageRequired*this.storageShift;return Math.max(t,i)},maxConsumeForRatio(e,t){let i=e.calculateRateOfChange({buy:!1,supply:!0,nanite:!0}),a=(e.storageRatio-t)*e.maxQuantity;return Math.max(i,a)},consumeMore(e,t){let i=getVueById(this._ejectVuePrefix+e);if(i===undefined)return!1;resources[e].rateMods.eject+=t;for(let a of KeyManager.click(t))i.ejectMore(e)},consumeLess(e,t){let i=getVueById(this._ejectVuePrefix+e);if(i===undefined)return!1;resources[e].rateMods.eject-=t;for(let a of KeyManager.click(t))i.ejectLess(e)}},AlchemyManager={_alchemyVuePrefix:"alchemy",priorityList:[],resEnabled:e=>settings["res_alchemy_"+e],resWeighting:e=>settings["res_alchemy_w_"+e],isUnlocked:()=>haveTech("alchemy"),managedPriorityList(){return this.priorityList.filter((e=>this.resEnabled(e.id)&&e.isUnlocked()&&this.transmuteTier(e)<=game.global.tech.alchemy&&(!game.global.race.artifical||e!==resources.Food)))},transmuteTier:e=>game.tradeRatio.hasOwnProperty(e.id)&&e!==resources.Crystal?e.instance?.hasOwnProperty("trade")?1:2:0,currentCount:e=>game.global.race.alchemy[e],transmuteMore(e,t){let i=getVueById(this._alchemyVuePrefix+e);if(i===undefined)return!1;resources.Mana.rateOfChange-=1*t,resources.Crystal.rateOfChange-=.5*t;for(let a of KeyManager.click(t))i.addSpell(e)},transmuteLess(e,t){let i=getVueById(this._alchemyVuePrefix+e);if(i===undefined)return!1;resources.Mana.rateOfChange+=1*t,resources.Crystal.rateOfChange+=.5*t;for(let a of KeyManager.click(t))i.subSpell(e)}},RitualManager={_industryVueBinding:"iPylon",_industryVue:undefined,Productions:addProps({Farmer:{id:"farmer",isUnlocked:()=>!(game.global.race.orbit_decayed||game.global.race.cataclysm||game.global.race.carnivore||game.global.race.soul_eater||game.global.race.artifical||game.global.race.unfathomable)},Miner:{id:"miner",isUnlocked:()=>!game.global.race.cataclysm},Lumberjack:{id:"lumberjack",isUnlocked:()=>!game.global.race.orbit_decayed&&!game.global.race.cataclysm&&isLumberRace()&&!game.global.race.evil},Science:{id:"science",isUnlocked:()=>!0},Factory:{id:"factory",isUnlocked:()=>!0},Army:{id:"army",isUnlocked:()=>!0},Hunting:{id:"hunting",isUnlocked:()=>!0},Crafting:{id:"crafting",isUnlocked:()=>haveTech("magic",4)}},(e=>e.id),[{s:"spell_w_",p:"weighting"}]),initIndustry(){return!(buildings.Pylon.count<1&&buildings.RedPylon.count<1&&buildings.TauPylon.count<1||!game.global.race.casting)&&(this._industryVue=getVueById(this._industryVueBinding),this._industryVue!==undefined)},currentSpells:e=>game.global.race.casting[e.id],spellCost(e){return this.manaCost(this.currentSpells(e))},costStep(e){if(0===e)return.0025;let t=this.manaCost(e);return(t/e*1.0025+.0025)*(e+1)-t},manaCost:e=>e*(1.0025**e-1),increaseRitual(e,t){if(0===t||!e.isUnlocked())return!1;if(t<0)return this.decreaseRitual(e,-1*t);for(let i of KeyManager.click(t))this._industryVue.addSpell(e.id)},decreaseRitual(e,t){if(0===t||!e.isUnlocked())return!1;if(t<0)return this.increaseRitual(-1*t);for(let i of KeyManager.click(t))this._industryVue.subSpell(e.id)}},SmelterManager={_industryVueBinding:"iSmelter",_industryVue:undefined,Productions:normalizeProperties({Iron:{id:"Iron",unlocked:()=>!0,resource:resources.Iron,cost:[]},Steel:{id:"Steel",unlocked:()=>resources.Steel.isUnlocked()&&haveTech("smelting",2),resource:resources.Steel,cost:[new ResourceProductionCost(resources.Coal,.25,1.25),new ResourceProductionCost(resources.Iron,2,6)]},Iridium:{id:"Iridium",unlocked:()=>resources.Iridium.isUnlocked()&&(haveTech("m_smelting",2)||haveTech("irid_smelting")),resource:resources.Iridium,cost:[]}},[ResourceProductionCost]),Fuels:addProps(normalizeProperties({Oil:{id:"Oil",unlocked:()=>game.global.resource.Oil.display,cost:[new ResourceProductionCost(resources.Oil,.35,2)]},Coal:{id:"Coal",unlocked:()=>game.global.resource.Coal.display,cost:[new ResourceProductionCost(resources.Coal,(()=>isLumberRace()?.25:.15),2)]},Wood:{id:"Wood",unlocked:()=>isLumberRace()||game.global.race.evil,cost:[new ResourceProductionCost((()=>game.global.race.evil?game.global.race.soul_eater&&"wendigo"!==game.global.race.species?resources.Food:resources.Furs:resources.Lumber),(()=>game.global.race.evil&&!game.global.race.soul_eater||"wendigo"===game.global.race.species?1:3),6)]},Inferno:{id:"Inferno",unlocked:()=>haveTech("smelting",8),cost:[new ResourceProductionCost(resources.Coal,50,50),new ResourceProductionCost(resources.Oil,35,50),new ResourceProductionCost(resources.Infernite,.5,50)]}},[ResourceProductionCost]),(e=>e.id),[{s:"smelter_fuel_p_",p:"priority"}]),initIndustry(){return!(game.global.race.steelen||buildings.Smelter.count<1&&!game.global.race.cataclysm&&!game.global.race.orbit_decayed&&!haveTech("isolation"))&&(this._industryVue=getVueById(this._industryVueBinding),this._industryVue!==undefined)},managedFuelPriorityList(){return Object.values(this.Fuels).sort(((e,t)=>e.priority-t.priority))},fueledCount:e=>e.unlocked?game.global.city.smelter[e.id]:0,smeltingCount:e=>e.unlocked?game.global.city.smelter[e.id]:0,increaseFuel(e,t){if(0===t||!e.unlocked)return!1;if(t<0)return this.decreaseFuel(e,-1*t);for(let i of KeyManager.click(t))this._industryVue.addFuel(e.id)},decreaseFuel(e,t){if(0===t||!e.unlocked)return!1;if(t<0)return this.increaseFuel(e,-1*t);for(let i of KeyManager.click(t))this._industryVue.subFuel(e.id)},increaseSmelting(e,t){if(0===t||!this.Productions[e].unlocked)return!1;if(t<0)return this.decreaseSmelting(e,-1*t);for(let i of KeyManager.click(t))this._industryVue.addMetal(e)},decreaseSmelting(e,t){if(0===t||!this.Productions[e].unlocked)return!1;if(t<0)return this.increaseSmelting(e,-1*t);for(let i of KeyManager.click(t))this._industryVue.subMetal(e)},maxOperating:()=>game.global.city.smelter.cap-game.global.city.smelter.Star,extraOperating:()=>game.global.city.smelter.Star,currentFueled(){return this._industryVue.$options.filters.on()}},FactoryManager={_industryVueBinding:"iFactory",_industryVue:undefined,Productions:addProps(normalizeProperties({LuxuryGoods:{id:"Lux",resource:resources.Money,unlocked:()=>!0,cost:[new ResourceProductionCost(resources.Furs,(()=>FactoryManager.f_rate("Lux","fur")),5)]},Furs:{id:"Furs",resource:resources.Furs,unlocked:()=>haveTech("synthetic_fur"),cost:[new ResourceProductionCost(resources.Money,(()=>FactoryManager.f_rate("Furs","money")),1e3),new ResourceProductionCost(resources.Polymer,(()=>FactoryManager.f_rate("Furs","polymer")),10)]},Alloy:{id:"Alloy",resource:resources.Alloy,unlocked:()=>!0,cost:[new ResourceProductionCost(resources.Copper,(()=>FactoryManager.f_rate("Alloy","copper")),5),new ResourceProductionCost(resources.Aluminium,(()=>FactoryManager.f_rate("Alloy","aluminium")),5)]},Polymer:{id:"Polymer",resource:resources.Polymer,unlocked:()=>haveTech("polymer"),cost:function(){return isLumberRace()?this.cost_normal:this.cost_kk},cost_kk:[new ResourceProductionCost(resources.Oil,(()=>FactoryManager.f_rate("Polymer","oil_kk")),2)],cost_normal:[new ResourceProductionCost(resources.Oil,(()=>FactoryManager.f_rate("Polymer","oil")),2),new ResourceProductionCost(resources.Lumber,(()=>FactoryManager.f_rate("Polymer","lumber")),50)]},NanoTube:{id:"Nano",resource:resources.Nano_Tube,unlocked:()=>haveTech("nano"),cost:[new ResourceProductionCost(resources.Coal,(()=>FactoryManager.f_rate("Nano_Tube","coal")),15),new ResourceProductionCost(resources.Neutronium,(()=>FactoryManager.f_rate("Nano_Tube","neutronium")),.2)]},Stanene:{id:"Stanene",resource:resources.Stanene,unlocked:()=>haveTech("stanene"),cost:[new ResourceProductionCost(resources.Aluminium,(()=>FactoryManager.f_rate("Stanene","aluminium")),50),new ResourceProductionCost(resources.Nano_Tube,(()=>FactoryManager.f_rate("Stanene","nano")),5)]}},[ResourceProductionCost]),(e=>e.resource.id),[{s:"production_",p:"enabled"},{s:"production_w_",p:"weighting"},{s:"production_p_",p:"priority"}]),initIndustry(){return!(buildings.Factory.count<1&&buildings.RedFactory.count<1&&buildings.TauFactory.count<1)&&(this._industryVue=getVueById(this._industryVueBinding),this._industryVue!==undefined)},f_rate:(e,t)=>game.f_rate[e][t][game.global.tech.factory||0],currentOperating(){let e=0;for(let t in this.Productions){let i=this.Productions[t];e+=game.global.city.factory[i.id]}return e},maxOperating(){let e=buildings.Factory.stateOnCount+buildings.RedFactory.stateOnCount+2*buildings.AlphaMegaFactory.stateOnCount+buildings.TauFactory.stateOnCount*(haveTech("isolation")?5:3);if(!game.global.city.factory)return e;for(let t in this.Productions){let i=this.Productions[t];i.unlocked&&!i.enabled&&(e-=game.global.city.factory[i.id])}return e},currentProduction:e=>e.unlocked?game.global.city.factory[e.id]:0,increaseProduction(e,t){if(0===t||!e.unlocked)return!1;if(t<0)return this.decreaseProduction(e,-1*t);for(let i of KeyManager.click(t))this._industryVue.addItem(e.id)},decreaseProduction(e,t){if(0===t||!e.unlocked)return!1;if(t<0)return this.increaseProduction(e,-1*t);for(let i of KeyManager.click(t))this._industryVue.subItem(e.id)}},ReplicatorManager={_industryVueBinding:"iReplicator",_industryVue:undefined,Productions:addProps(normalizeProperties(replicableResources.map((e=>resources[e])).reduce(((e,t)=>({...e,[t.id]:{id:t.id,resource:t,unlocked:()=>t.isUnlocked(),cost:[]}})),{})),(e=>e.resource.id),[{s:"replicator_",p:"enabled"},{s:"replicator_w_",p:"weighting"},{s:"replicator_p_",p:"priority"}]),initIndustry(){return!!haveTech("replicator")&&(this._industryVue=getVueById(this._industryVueBinding),this._industryVue!==undefined)},setResource(e){this._industryVue.avail(e)&&this._industryVue.setVal(e)}},DroidManager={_industryVueBinding:"iDroid",_industryVue:undefined,Productions:addProps({Adamantite:{id:"adam",resource:resources.Adamantite},Uranium:{id:"uran",resource:resources.Uranium},Coal:{id:"coal",resource:resources.Coal},Aluminium:{id:"alum",resource:resources.Aluminium}},(e=>e.resource.id),[{s:"droid_w_",p:"weighting"},{s:"droid_pr_",p:"priority"}]),initIndustry(){return!(buildings.AlphaMiningDroid.count<1)&&(this._industryVue=getVueById(this._industryVueBinding),this._industryVue!==undefined)},currentOperating(){let e=0;for(let t in this.Productions){let i=this.Productions[t];e+=game.global.interstellar.mining_droid[i.id]}return e},maxOperating:()=>game.global.interstellar.mining_droid.on,currentProduction:e=>game.global.interstellar.mining_droid[e.id],increaseProduction(e,t){if(0===t)return!1;if(t<0)return this.decreaseProduction(e,-1*t);for(let i of KeyManager.click(t))this._industryVue.addItem(e.id)},decreaseProduction(e,t){if(0===t)return!1;if(t<0)return this.increaseProduction(e,-1*t);for(let i of KeyManager.click(t))this._industryVue.subItem(e.id)}},GrapheneManager={_industryVueBinding:"iGraphene",_industryVue:undefined,_graphPlant:null,Fuels:{Lumber:{id:"Lumber",cost:new ResourceProductionCost(resources.Lumber,350,100),add:"addWood",sub:"subWood"},Coal:{id:"Coal",cost:new ResourceProductionCost(resources.Coal,25,10),add:"addCoal",sub:"subCoal"},Oil:{id:"Oil",cost:new ResourceProductionCost(resources.Oil,15,10),add:"addOil",sub:"subOil"}},initIndustry(){return this._graphPlant=game.global.race.truepath?buildings.TitanGraphene:buildings.AlphaGraphenePlant,!((this._graphPlant.instance?.count??0)<1)&&(this._industryVue=getVueById(this._industryVueBinding),this._industryVue!==undefined)},maxOperating(){return this._graphPlant.instance.on},fueledCount(e){return this._graphPlant.instance[e.id]},increaseFuel(e,t){if(0===t||!e.cost.resource.isUnlocked())return!1;if(t<0)return this.decreaseFuel(e,-1*t);for(let i of KeyManager.click(t))this._industryVue[e.add]()},decreaseFuel(e,t){if(0===t||!e.cost.resource.isUnlocked())return!1;if(t<0)return this.increaseFuel(e,-1*t);for(let i of KeyManager.click(t))this._industryVue[e.sub]()}},GalaxyTradeManager={_industryVueBinding:"galaxyTrade",_industryVue:undefined,initIndustry(){return!(buildings.GorddonFreighter.count+buildings.Alien1SuperFreighter.count<1)&&(this._industryVue=getVueById(this._industryVueBinding),this._industryVue!==undefined)},currentOperating:()=>game.global.galaxy.trade.cur,maxOperating:()=>game.global.galaxy.trade.max,currentProduction:e=>game.global.galaxy.trade["f"+e],zeroProduction(e){this._industryVue.zero(e)},increaseProduction(e,t){if(0===t)return!1;if(t<0)return this.decreaseProduction(e,-1*t);for(let i of KeyManager.click(t))this._industryVue.more(e)},decreaseProduction(e,t){if(0===t)return!1;if(t<0)return this.increaseProduction(e,-1*t);for(let i of KeyManager.click(t))this._industryVue.less(e)}},GovernmentManager={Types:{anarchy:{id:"anarchy",isUnlocked:()=>!1},autocracy:{id:"autocracy",isUnlocked:()=>!0},democracy:{id:"democracy",isUnlocked:()=>!0},oligarchy:{id:"oligarchy",isUnlocked:()=>!0},theocracy:{id:"theocracy",isUnlocked:()=>haveTech("gov_theo")},republic:{id:"republic",isUnlocked:()=>haveTech("govern",2)},socialist:{id:"socialist",isUnlocked:()=>haveTech("gov_soc")},corpocracy:{id:"corpocracy",isUnlocked:()=>haveTech("gov_corp")},technocracy:{id:"technocracy",isUnlocked:()=>haveTech("govern",3)},federation:{id:"federation",isUnlocked:()=>haveTech("gov_fed")},magocracy:{id:"magocracy",isUnlocked:()=>haveTech("gov_mage")}},isUnlocked(){let e=document.getElementById("govType");return null!==e&&"none"!==e.style.display},isEnabled(){let e=document.querySelector("#govType button");return this.isUnlocked()&&null!==e&&"disabled"!==e.getAttribute("disabled")},currentGovernment:()=>game.global.civic.govern.type,setGovernment(e){if(this.currentGovernment()===e||WindowManager.isOpen())return;let t=document.querySelector("#govType button"),i=game.loc("civics_government_type");WindowManager.openModalWindowWithCallback(t,i,(()=>{GameLog.logSuccess("special",`Revolution! Government changed to ${game.loc("govern_"+e)}.`,["events","major_events"]),getVueById("govModal")?.setGov(e)}))}},MarketManager={priorityList:[],multiplier:0,updateData(){game.global.city.market&&(this.multiplier=game.global.city.market.qty)},isUnlocked:()=>haveTech("currency",2),sortByPriority(){this.priorityList.sort(((e,t)=>e.marketPriority-t.marketPriority))},isBuySellUnlocked:e=>null!==document.querySelector("#market-"+e.id+" .order"),setMultiplier(e){this.multiplier=Math.min(Math.max(1,e),this.getMaxMultiplier()),getVueById("market-qty").qty=this.multiplier},getMaxMultiplier:()=>getVueById("market-qty")?.limit()??1,getUnitBuyPrice(e){let t=game.global.resource[e.id].value;return t*=traitVal("arrogant",0,"+"),t*=traitVal("conniving",0,"-"),t},getUnitSellPrice(e){let t=4;return t*=traitVal("merchant",0,"-"),t*=traitVal("asymmetrical",0,"+"),t*=traitVal("conniving",1,"-"),game.global.resource[e.id].value/t},buy(e){let t=getVueById(e._marketVueBinding);if(t===undefined)return!1;let i=this.getUnitBuyPrice(e)*this.multiplier;if(resources.Money.currentQuantity<i)return!1;resources.Money.currentQuantity-=this.multiplier*this.getUnitBuyPrice(e),e.currentQuantity+=this.multiplier,t.purchase(e.id)},sell(e){let t=getVueById(e._marketVueBinding);return t!==undefined&&!(e.currentQuantity<this.multiplier)&&(resources.Money.currentQuantity+=this.multiplier*this.getUnitSellPrice(e),e.currentQuantity-=this.multiplier,void t.sell(e.id))},getImportRouteCap:()=>haveTech("currency",6)?1e6:haveTech("currency",4)?100:25,getExportRouteCap(){return game.global.race.banana?haveTech("currency",6)?1e6:haveTech("currency",4)?25:10:this.getImportRouteCap()},getMaxTradeRoutes(){let e=game.global.city.market.mtrade,t=0;for(let i of this.priorityList)i.autoTradeBuyEnabled||i.autoTradeSellEnabled||(e-=Math.abs(i.tradeRoutes),t+=i.tradeRoutes);return[e,t]},zeroTradeRoutes(e){getVueById(e._marketVueBinding)?.zero(e.id)},addTradeRoutes(e,t){if(!e.isUnlocked())return!1;let i=getVueById(e._marketVueBinding);if(i===undefined)return!1;for(let a of KeyManager.click(t))i.autoBuy(e.id)},removeTradeRoutes(e,t){if(!e.isUnlocked())return!1;let i=getVueById(e._marketVueBinding);if(i===undefined)return!1;for(let a of KeyManager.click(t))i.autoSell(e.id)}},StorageManager={priorityList:[],crateValue:0,containerValue:0,_storageVueBinding:"createHead",_storageVue:undefined,initStorage(){return!!this.isUnlocked&&(this._storageVue=getVueById(this._storageVueBinding),this._storageVue!==undefined)},isUnlocked:()=>haveTech("container"),sortByPriority(){this.priorityList.sort(((e,t)=>e.storagePriority-t.storagePriority))},constructCrate(e){if(!(e<=0))for(let t of KeyManager.click(e))this._storageVue.crate()},constructContainer(e){if(!(e<=0))for(let t of KeyManager.click(e))this._storageVue.container()},assignCrate(e,t){let i=getVueById(e._stackVueBinding);if(i===undefined)return!1;for(let a of KeyManager.click(t))i.addCrate(e.id)},unassignCrate(e,t){let i=getVueById(e._stackVueBinding);if(i===undefined)return!1;for(let a of KeyManager.click(t))i.subCrate(e.id)},assignContainer(e,t){let i=getVueById(e._stackVueBinding);if(i===undefined)return!1;for(let a of KeyManager.click(t))i.addCon(e.id)},unassignContainer(e,t){let i=getVueById(e._stackVueBinding);if(i===undefined)return!1;for(let a of KeyManager.click(t))i.subCon(e.id)}},SpyManager={_foreignVue:undefined,purchaseMoney:0,purchaseForeigngs:[],foreignActive:[],foreignTarget:null,Types:{Influence:{id:"influence"},Sabotage:{id:"sabotage"},Incite:{id:"incite"},Annex:{id:"annex"},Purchase:{id:"purchase"}},spyCost(e,t){let i=game.global.civic.foreign[`gov${e}`];t=t??i.spy+1;let a=Math.max(50,Math.round(i.mil/2+i.hstl/2-i.unrest)+10);return game.global.race.infiltrator&&(a/=3),state.astroSign,Math.round(a**t)+500},updateForeigns(){this.purchaseMoney=0,this.purchaseForeigngs=[],this._foreignVue=getVueById("foreign");let e=this._foreignVue?.vis();if(e){let e=null,t=0,i=[];haveTech("world_control")||i.push(0,1,2),haveTech("rival")&&i.push(3);let a=i.map((e=>({id:e,gov:game.global.civic.foreign[`gov${e}`]})));for(let r of a){let i=3===r.id?"Rival":getGovPower(r.id)<=settings.foreignPowerRequired?"Inferior":"Superior";r.policy=settings[`foreignPolicy${i}`],(r.gov.anx&&"Annex"===r.policy||r.gov.buy&&"Purchase"===r.policy||r.gov.occ&&"Occupy"===r.policy)&&t++,settings.foreignPacifist||r.gov.anx||r.gov.buy||"Inferior"!==i||(e=r)}if(a.length>0&&!settings.foreignPacifist){e=e??a.find((e=>e.gov.occ))??a[0];let i=settings.foreignUnification&&t>=2&&1===game.global.tech.unify;!i&&["Annex","Purchase"].includes(e.policy)&&SpyManager.isEspionageUseful(e.id,SpyManager.Types[e.policy].id)&&(e.policy="Ignore"),!i&&settings.foreignForceSabotage&&3!==e.id&&SpyManager.isEspionageUseful(e.id,SpyManager.Types.Sabotage.id)&&(e.policy="Sabotage"),settings.foreignUnification&&settings.foreignOccupyLast&&!haveTech("world_control")&&(a[["Occupy","Sabotage"].includes(settings.foreignPolicySuperior)?2:e.id].policy=i?"Occupy":"Sabotage"),("Influence"===e.policy||i&&"Occupy"!==e.policy||"Betrayal"===e.policy&&e.gov.mil>75)&&(e=null)}if(1===game.global.tech.unify&&settings.foreignUnification&&settings.autoFight)for(let r of a)if("Purchase"===r.policy&&!r.gov.buy&&"purchase"!==r.gov.act){let e=Math.max(poly.govPrice(r.id),r.gov.spy<3?this.spyCost(r.id,3):0);e<=resources.Money.maxQuantity&&(this.purchaseForeigngs.push(r.id),this.purchaseMoney=Math.max(e,this.purchaseMoney))}this.foreignTarget=e,this.foreignActive=a}else this._foreignVue=undefined},performEspionage(e,t,i){if(WindowManager.isOpen())return;if("none"===document.querySelector(`#gov${e} div span:nth-child(3)`).style.display)return;let a=document.querySelector(`#gov${e} div span:nth-child(3) button`);if(null===a||"disabled"===a.getAttribute("disabled"))return;let r=null;if(t===this.Types.Annex.id||t===this.Types.Purchase.id?this.isEspionageUseful(e,t)?r=t:this.isEspionageUseful(e,this.Types.Influence.id)&&i?r=this.Types.Influence.id:this.isEspionageUseful(e,this.Types.Incite.id)&&(r=this.Types.Incite.id):this.isEspionageUseful(e,t)&&(r=t),null!==r){r===this.Types.Purchase.id&&(resources.Money.currentQuantity-=poly.govPrice(e));let t=game.loc("civics_espionage_actions");WindowManager.openModalWindowWithCallback(a,t,(()=>{GameLog.logSuccess("spying",`Performing "${game.loc("civics_spy_"+r)}" covert operation against ${getGovName(e)}.`,["spy"]),getVueById("espModal")?.[r]?.(e)}))}},isEspionageUseful(e,t){let i=game.global.civic.foreign["gov"+e];switch(t){case this.Types.Influence.id:return i.hstl>(i.spy>0?0:10);case this.Types.Sabotage.id:return i.spy<1||i.mil>(i.spy>1?50:74);case this.Types.Incite.id:return i.spy<3||i.unrest<(i.spy>3?100:76);case this.Types.Annex.id:return i.hstl<=50&&i.unrest>=50&&resources.Morale.currentQuantity>=200+i.hstl-i.unrest;case this.Types.Purchase.id:return i.spy>=3&&resources.Money.currentQuantity>=poly.govPrice(e)}return!1}},WarManager={_garrisonVue:undefined,_hellVue:undefined,workers:0,wounded:0,raid:0,max:0,m_use:0,crew:0,hellSoldiers:0,hellPatrols:0,hellPatrolSize:0,hellAssigned:0,hellReservedSoldiers:0,updateGarrison(){let e=game.global.civic.garrison;e?(this.workers=e.workers,this.wounded=e.wounded,this.raid=e.raid,this.max=e.max,this.m_use=e.m_use,this.crew=e.crew,this._garrisonVue=getVueById("garrison")):this._garrisonVue=undefined},updateHell(){let e=game.global.portal.fortress;e?(this.hellSoldiers=e.garrison,this.hellPatrols=e.patrols,this.hellPatrolSize=e.patrol_size,this.hellAssigned=e.assigned,this.hellReservedSoldiers=this.getHellReservedSoldiers(),this._hellVue=getVueById("fort")):this._hellVue=undefined},get currentSoldiers(){return this.workers-this.crew},get maxSoldiers(){return this.max-this.crew},get deadSoldiers(){return this.max-this.workers},get currentCityGarrison(){return this.currentSoldiers-this.hellSoldiers-(game.global.space.fob?.troops??0)},get maxCityGarrison(){return this.maxSoldiers-this.hellSoldiers},get availableGarrison(){return game.global.race.rage?this.currentCityGarrison:this.currentCityGarrison-this.wounded},get hellGarrison(){return this.hellSoldiers-this.hellPatrolSize*this.hellPatrols-this.hellReservedSoldiers},launchCampaign(e){this._garrisonVue.campaign(e)},release(e){if(game.global.civic.foreign["gov"+e].occ){let e=getOccCosts();this.workers+=e,this.max+=e}this._garrisonVue.campaign(e)},isMercenaryUnlocked:()=>game.global.civic.garrison.mercs,get mercenaryCost(){let e=Math.round(1.24**this.workers*75)-50;return e>25e3&&(e=25e3),this.m_use>0&&(e*=1.1**this.m_use),e*=traitVal("brute",0,"-"),game.global.race.inflation&&(e*=1+game.global.race.inflation/500),e*=traitVal("high_pop",1,"="),Math.round(e)},hireMercenary(){let e=this.mercenaryCost;return!(this.workers>=this.max||resources.Money.currentQuantity<e||(KeyManager.set(!1,!1,!1),this._garrisonVue.hire(),resources.Money.currentQuantity-=e,this.workers++,this.m_use++,0))},getHellReservedSoldiers(){let e=0;return settings.autoBuild&&buildings.PitAssaultForge.isAutoBuildable()&&(!settings.hellAssaultReserve&&Object.entries(buildings.PitAssaultForge.cost).find((([e,t])=>resources[e].currentQuantity<t))||(e=Math.round(650/game.armyRating(1,"hellArmy")))),buildings.PitSoulForge.stateOnCount>0&&(e=Math.round(650/game.armyRating(1,"hellArmy")),game.global.portal.gun_emplacement&&(e-=game.global.portal.gun_emplacement.on*(game.global.tech.hell_gun>=2?2:1),e<0&&(e=0))),buildings.RuinsGuardPost.count>0&&(e+=(buildings.RuinsGuardPost.stateOnCount+1)*traitVal("high_pop",0,1)),e},setTactic(e){let t=game.global.civic.garrison.tactic;for(let i=t;i<e;i++)this._garrisonVue.next();for(let i=t;i>e;i--)this._garrisonVue.last()},getCampaignTitle(e){return this._garrisonVue.$options.filters.tactics(e)},addBattalion(e){for(let t of KeyManager.click(e))this._garrisonVue.aNext();this.raid=Math.min(this.raid+e,this.currentCityGarrison)},removeBattalion(e){for(let t of KeyManager.click(e))this._garrisonVue.aLast();this.raid=Math.max(this.raid-e,0)},getGovArmy(e,t){let i=[5,27.5,62.5,125,300][e];return game.global.race.banana&&(i*=2),"swamp"===game.global.city.biome&&(i*=1.4),i*getGovPower(t)/100},getAdvantage(e,t,i){return 100*(1-this.getGovArmy(t,i)/e)},getRatingForAdvantage(e,t,i){return this.getGovArmy(t,i)/(1-e/100)},getSoldiersForAdvantage(e,t,i){return this.getSoldiersForAttackRating(this.getRatingForAdvantage(e,t,i))},getSoldiersForAttackRating(e){if(!e||e<=0)return 0;let t=game.armyRating(10,"army",0)/10,i=Math.ceil(e/t);if(!game.global.race.hivemind)return i;let a=traitVal("hivemind",0);for(i<a&&(i=Math.min(a,i/(1-.05*a)));i>1&&game.armyRating(i-1,"army",0)>e;)i--;return i},addHellGarrison(e){for(let t of KeyManager.click(e))this._hellVue.aNext();this.hellSoldiers=Math.min(this.hellSoldiers+e,this.workers),this.hellAssigned=this.hellSoldiers},removeHellGarrison(e){for(let i of KeyManager.click(e))this._hellVue.aLast();let t=this.hellPatrols*this.hellPatrolSize+this.hellReservedSoldiers;this.hellSoldiers=Math.max(this.hellSoldiers-e,t),this.hellAssigned=this.hellSoldiers},addHellPatrol(e){for(let t of KeyManager.click(e))this._hellVue.patInc();this.hellPatrols*this.hellPatrolSize<this.hellSoldiers&&(this.hellPatrols+=e,this.hellSoldiers<this.hellPatrols*this.hellPatrolSize&&(this.hellPatrols=Math.floor(this.hellSoldiers/this.hellPatrolSize)))},removeHellPatrol(e){for(let t of KeyManager.click(e))this._hellVue.patDec();this.hellPatrols=Math.max(this.hellPatrols-e,0)},addHellPatrolSize(e){for(let t of KeyManager.click(e))this._hellVue.patSizeInc();this.hellPatrolSize<this.hellSoldiers&&(this.hellPatrolSize+=e,this.hellSoldiers<this.hellPatrols*this.hellPatrolSize&&(this.hellPatrols=Math.floor(this.hellSoldiers/this.hellPatrolSize)))},removeHellPatrolSize(e){for(let t of KeyManager.click(e))this._hellVue.patSizeDec();this.hellPatrolSize=Math.max(this.hellPatrolSize-e,1)}},FleetManagerOuter={_fleetVueBinding:"shipPlans",_fleetVue:undefined,_explorerBlueprint:{"class":"explorer",armor:"neutronium",weapon:"railgun",engine:"emdrive",power:"elerium",sensor:"quantum"},nextShipName:null,nextShipCost:null,nextShipAffordable:null,nextShipExpandable:null,nextShipMsg:null,WeaponPower:{railgun:36,laser:64,p_laser:54,plasma:90,phaser:114,disruptor:156},SensorRange:{visual:1,radar:20,lidar:35,quantum:60},ClassPower:{corvette:1,frigate:1.5,destroyer:2.75,cruiser:5.5,battlecruiser:10,dreadnought:22,explorer:1.2},ClassCrew:{corvette:2,frigate:3,destroyer:4,cruiser:6,battlecruiser:8,dreadnought:10,explorer:10},Regions:["spc_moon","spc_red","spc_gas","spc_gas_moon","spc_belt","spc_titan","spc_enceladus","spc_triton","spc_kuiper","spc_eris"],ShipConfig:{"class":["corvette","frigate","destroyer","cruiser","battlecruiser","dreadnought","explorer"],power:["solar","diesel","fission","fusion","elerium"],weapon:["railgun","laser","p_laser","plasma","phaser","disruptor"],armor:["steel","alloy","neutronium"],engine:["ion","tie","pulse","photon","vacuum","emdrive"],sensor:["visual","radar","lidar","quantum"]},getWeighting:e=>settings["fleet_outer_pr_"+e],getMaxDefense:e=>settings["fleet_outer_def_"+e],getMaxScouts:e=>settings["fleet_outer_sc_"+e],getShipName:e=>game.loc(`outer_shipyard_class_${e["class"]}`),getLocName(e){let t="tauceti"===e?game.loc("tech_era_tauceti"):game.actions.space[e].info.name;return"function"==typeof t?t():t},isUnlocked:e=>("spc_moon"!==e||!game.global.race.orbit_decayed)&&(game.actions.space[e].info.syndicate?.()??!1),updateNextShip(e){if(e){let t=poly.shipCosts(e);this.nextShipCost=t,this.nextShipAffordable=!0,this.nextShipExpandable=!0,this.nextShipMsg=null,this.nextShipName=null;for(let e in t)resources[e].maxQuantity<t[e]&&(this.nextShipAffordable=!1,resources[e].hasStorage()||(this.nextShipExpandable=!1))}else this.nextShipCost=null,this.nextShipAffordable=null,this.nextShipExpandable=null,this.nextShipMsg=null,this.nextShipName=null},initFleet(){return!(!game.global.tech.syndicate||!game.global.space.shipyard?.hasOwnProperty("blueprint"))&&(this._fleetVue=getVueById(this._fleetVueBinding),this._fleetVue!==undefined)},getFighterBlueprint(){return Object.fromEntries(Object.keys(this.ShipConfig).map((e=>[e,settings["fleet_outer_"+e]])))},getScoutBlueprint(){return Object.fromEntries(Object.keys(this.ShipConfig).map((e=>[e,settings["fleet_scout_"+e]])))},getMissingResource(e){let t=poly.shipCosts(e);for(let i in t)if(resources[i].currentQuantity<t[i])return i;return null},avail(e){let t=game.global.space.shipyard;if("explorer"===e["class"]&&("railgun"!==e.weapon||"quantum"!==e.sensor))return!1;for(let[i,a]of Object.entries(e))if("name"!==i&&t.blueprint[i]!==a&&("explorer"!==e["class"]||"weapon"!==a&&"sensor"!==a)&&!this._fleetVue.avail(i,this.ShipConfig[i].indexOf(a),a))return!1;return!0},build(e,t){let i=game.global.space.shipyard;for(let[r,n]of Object.entries(e))"name"===r||i.blueprint[r]===n&&"explorer"!==e["class"]&&"explorer"!==i.blueprint["class"]||this._fleetVue.setVal(r,n);if(this._fleetVue.powerText().includes("danger"))return!1;let a=poly.shipCosts(e);for(let r in a)resources[r].currentQuantity-=a[r];return i.sort?($("#shipPlans .b-checkbox").eq(1).click(),this._fleetVue.build(),getVueById("shipReg0")?.setLoc(t,i.ships.length),$("#shipPlans .b-checkbox").eq(1).click()):(this._fleetVue.build(),getVueById("shipReg0")?.setLoc(t,i.ships.length)),!0},getShipAttackPower(e){return Math.round(this.WeaponPower[e.weapon]*this.ClassPower[e["class"]])},shipCount(e,t){let i=0;for(let a of game.global.space.shipyard.ships)a.location===e&&a["class"]===t["class"]&&a.power===t.power&&a.weapon===t.weapon&&a.armor===t.armor&&a.engine===t.engine&&a.sensor===t.sensor&&i++;return i},syndicate(e,t,i){if(!game.global.tech.syndicate||!game.global.race.truepath||!game.global.space.syndicate?.hasOwnProperty(e))return t?{p:1,r:0,s:0}:1;let a=game.global.civic.foreign.gov3.hstl,r=a<10?250-25*a:a>60?-13*(a-60):0,n=1e3;switch(e){case"spc_home":case"spc_moon":case"spc_red":case"spc_hell":n=1250+r;break;case"spc_gas":case"spc_gas_moon":case"spc_belt":n=1020+r;break;case"spc_titan":case"spc_enceladus":n=haveTech("triton")?game.actions.space[e].info.syndicate_cap():600;break;case"spc_triton":case"spc_kuiper":case"spc_eris":n=game.actions.space[e].info.syndicate_cap()}let o=game.global.space.syndicate[e],l=0,u=0;if(game.global.space.shipyard?.hasOwnProperty("ships")){for(let t of game.global.space.shipyard.ships)if(t.location===e&&(0===t.transit&&t.fueled||i)){let e=this.getShipAttackPower(t);l+=t.damage>0?Math.round(e*(100-t.damage)/100):e,u+=this.SensorRange[t.sensor]}"spc_enceladus"===e?l+=50*buildings.EnceladusBase.stateOnCount:"spc_titan"===e?l+=25*buildings.TitanSAM.stateOnCount:"spc_triton"===e&&buildings.TritonFOB.stateOnCount>0&&(l+=500,u+=10),u>100&&(u=Math.round((u-100)/(u-100+200)*100)+100),l=Math.round(l*((u+25)/125)),o=o-l>0?o-l:0}return t?{p:1-+(o/n).toFixed(4),r:o,s:u}:1-+(o/n).toFixed(4)}},FleetManager={_fleetVueBinding:"fleet",_fleetVue:undefined,initFleet(){return!!game.global.tech.piracy&&(this._fleetVue=getVueById(this._fleetVueBinding),this._fleetVue!==undefined)},addShip(e,t,i){for(let a of KeyManager.click(i))this._fleetVue.add(e,t)},subShip(e,t,i){for(let a of KeyManager.click(i))this._fleetVue.sub(e,t)}},MechManager={_assemblyVueBinding:"mechAssembly",_assemblyVue:undefined,_listVueBinding:"mechList",_listVue:undefined,activeMechs:[],inactiveMechs:[],mechsPower:0,mechsPotential:0,isActive:!1,saveSupply:!1,stateHash:0,bestSize:[],bestGems:[],bestSupply:[],bestMech:{},bestBody:{},bestWeapon:[],Size:["small","medium","large","titan","collector"],Chassis:["wheel","tread","biped","quad","spider","hover"],Weapon:["laser","kinetic","shotgun","missile","flame","plasma","sonic","tesla"],Equip:["special","shields","sonar","grapple","infrared","flare","radiator","coolant","ablative","stabilizer","seals"],SizeSlots:{small:0,medium:1,large:2,titan:4,collector:2},SizeWeapons:{small:1,medium:1,large:2,titan:4,collector:0},SmallChassisMod:{wheel:{sand:.9,swamp:.35,forest:1,jungle:.92,rocky:.65,gravel:1,muddy:.85,grass:1.3,brush:.9,concrete:1.1},tread:{sand:1.15,swamp:.55,forest:1,jungle:.95,rocky:.65,gravel:1.3,muddy:.88,grass:1,brush:1,concrete:1},biped:{sand:.78,swamp:.68,forest:1,jungle:.82,rocky:.48,gravel:1,muddy:.85,grass:1.25,brush:.92,concrete:1},quad:{sand:.86,swamp:.58,forest:1.25,jungle:1,rocky:.95,gravel:.9,muddy:.68,grass:1,brush:.95,concrete:1},spider:{sand:.75,swamp:.9,forest:.82,jungle:.77,rocky:1.25,gravel:.86,muddy:.92,grass:1,brush:1,concrete:1},hover:{sand:1,swamp:1.35,forest:.65,jungle:.55,rocky:.82,gravel:1,muddy:1.15,grass:1,brush:.78,concrete:1}},LargeChassisMod:{wheel:{sand:.85,swamp:.18,forest:1,jungle:.85,rocky:.5,gravel:.95,muddy:.58,grass:1.2,brush:.8,concrete:1},tread:{sand:1.1,swamp:.4,forest:.95,jungle:.9,rocky:.5,gravel:1.2,muddy:.72,grass:1,brush:1,concrete:1},biped:{sand:.65,swamp:.5,forest:.95,jungle:.7,rocky:.4,gravel:1,muddy:.7,grass:1.2,brush:.85,concrete:1},quad:{sand:.75,swamp:.42,forest:1.2,jungle:1,rocky:.9,gravel:.8,muddy:.5,grass:.95,brush:.9,concrete:1},spider:{sand:.65,swamp:.78,forest:.75,jungle:.65,rocky:1.2,gravel:.75,muddy:.82,grass:1,brush:.95,concrete:1},hover:{sand:1,swamp:1.2,forest:.48,jungle:.35,rocky:.68,gravel:1,muddy:1.08,grass:1,brush:.7,concrete:1}},StatusMod:{freeze:e=>e.equip.includes("radiator")?1:.25,hot:e=>e.equip.includes("coolant")?1:.25,corrosive:e=>e.equip.includes("ablative")?1:e.equip.includes("shields")?.75:.25,humid:e=>e.equip.includes("seals")?1:.75,windy:e=>"hover"===e.chassis?.5:1,hilly:e=>"spider"!==e.chassis?.75:1,mountain:e=>"spider"===e.chassis||e.equip.includes("grapple")?1:e.equip.includes("flare")?.75:.5,radioactive:e=>e.equip.includes("shields")?1:.5,quake:e=>e.equip.includes("stabilizer")?1:.25,dust:e=>e.equip.includes("seals")?1:.5,river:e=>"hover"!==e.chassis?.65:1,tar:e=>"quad"!==e.chassis?"tread"===e.chassis||"wheel"===e.chassis?.5:.75:1,steam:e=>e.equip.includes("shields")?1:.75,flooded:e=>"hover"!==e.chassis?.35:1,fog:e=>e.equip.includes("sonar")?1:.2,rain:e=>e.equip.includes("seals")?1:.75,hail:e=>e.equip.includes("ablative")||e.equip.includes("shields")?1:.75,chasm:e=>e.equip.includes("grapple")?1:.1,dark:e=>e.equip.includes("infrared")?1:e.equip.includes("flare")?.25:.1,gravity:e=>"titan"===e.size?.25:"large"===e.size?.45:"medium"===e.size?.8:1},get collectorValue(){return 2e4/Math.max(settings.mechCollectorValue,1e-6)},mechObserver:new MutationObserver((()=>{updateDebugData(),createMechInfo()})),updateSpire(){let e=this.stateHash;return this.stateHash=0+game.global.portal.spire.count+game.global.blood.prepared+game.global.blood.wrath+1e7*game.global.portal.mechbay.scouts+(settings.mechSpecial?1e14:0)+(settings.mechInfernalCollector?1e15:0)+settings.mechCollectorValue,this.stateHash!==e},initLab(){if(buildings.SpireMechBay.count<1)return!1;if(this._assemblyVue=getVueById(this._assemblyVueBinding),this._assemblyVue===undefined)return!1;if(this._listVue=getVueById(this._listVueBinding),this._listVue===undefined)return!1;this.activeMechs=[],this.inactiveMechs=[],this.mechsPower=0;let e=game.global.portal.mechbay;for(let i=0;i<e.mechs.length;i++){let t={id:i,...e.mechs[i],...this.getMechStats(e.mechs[i])};i<e.active?(this.activeMechs.push(t),"collector"!==t.size&&(this.mechsPower+=t.power)):this.inactiveMechs.push(t)}if(this.updateSpire()){this.isActive=!0,this.updateBestWeapon(),this.Size.forEach((e=>{this.updateBestBody(e),this.bestMech[e]=this.getRandomMech(e)}));let sortBy=e=>Object.values(this.bestMech).filter((e=>"collector"!==e.size)).sort(((t,i)=>i[e]-t[e])).map((e=>e.size));this.bestSize=sortBy("efficiency"),this.bestGems=sortBy("gems_eff"),this.bestSupply=sortBy("supply_eff"),createMechInfo()}let t=this.bestMech[this.bestSize[0]];return this.mechsPotential=this.mechsPower/(25*buildings.SpireMechBay.count/this.getMechSpace(t)*t.power)||0,!0},getBodyMod(e){let t=game.global.portal.spire,i="small"===e.size||"medium"===e.size?this.SmallChassisMod[e.chassis][t.type]:this.LargeChassisMod[e.chassis][t.type],a=poly.terrainRating(e,i,Object.keys(t.status));for(let r in t.status)a*=this.StatusMod[r](e);return a},getWeaponMod(e){let t=poly.monsters[game.global.portal.spire.boss].weapon,i=0;for(let a=0;a<e.hardpoint.length;a++)i+=poly.weaponPower(e,t[e.hardpoint[a]]);return i},getSizeMod(e,t){let i=t??"concrete"===game.global.portal.spire.type;switch(e.size){case"small":return.0025*(i?.92:1);case"medium":return.0075*(i?.95:1);case"large":return.01;case"titan":return.012*(i?1.25:1);case"collector":return 25/this.collectorValue}return 0},getProgressMod(){let e=1;return game.global.stats.achieve.gladiator?.l>0&&(e*=1+.2*game.global.stats.achieve.gladiator.l),game.global.blood.wrath&&(e*=1+game.global.blood.wrath/20),e/=game.global.portal.spire.count,e},getPreferredSize(){let e=game.global.portal.mechbay;if(settings.mechFillBay&&e.max%1==0&&(game.global.blood.prepared>=2?e.bay%2!=e.max%2:e.max-e.bay==1))return["collector",!0];if(resources.Supply.storageRatio<.9&&resources.Supply.rateOfChange<settings.mechMinSupply&&this.activeMechs.filter((e=>"collector"===e.size)).length/e.max<settings.mechMaxCollectors)return["collector",!0];if(2*e.scouts/e.max<settings.mechScouts)return["small",!0];let t=game.global.portal.spire.status.gravity?settings.mechSizeGravity:settings.mechSize;if(this.Size.includes(t)&&(!settings.mechFillBay||poly.mechCost(t).c<=resources.Supply.maxQuantity))return[t,!1];let i="gems"===t?this.bestGems:"supply"===t?this.bestSupply:this.bestSize;for(let a=0;a<i.length;a++){let e=i[a],{s:t,c:r}=poly.mechCost(e);if(resources.Soul_Gem.spareQuantity>=t&&resources.Supply.maxQuantity>=r)return[e,!1]}return["titan",!1]},getMechStats(e){let t=this.getBodyMod(e);"collector"!==e.size&&(t*=this.getWeaponMod(e));let i=t*this.getSizeMod(e)*(e.infernal?1.25:1),[a,r,n]=this.getMechCost(e),[o,l]=this.getMechRefund(e);return{power:i,efficiency:i/n,gems_eff:i/(a-o),supply_eff:i/(r-l)}},getTimeToClear(){return this.mechsPower>0?(100-game.global.portal.spire.progress)/(this.mechsPower*this.getProgressMod()):Number.MAX_SAFE_INTEGER},updateBestBody(e){let t=0,i=[],a=this.SizeSlots[e]+(game.global.blood.prepared?1:0)-("always"===settings.mechSpecial?1:0),r="always"===settings.mechSpecial||"never"===settings.mechSpecial?this.Equip.slice(1):this.Equip,n=settings.mechInfernalCollector&&"collector"===e&&game.global.blood.prepared>=3;if(k_combinations(r,a).forEach((a=>{this.Chassis.forEach((r=>{let o={size:e,chassis:r,equip:a,infernal:n},l=this.getBodyMod(o);l>t?(t=l,i=[o]):l===t&&i.push(o)}))})),"always"===settings.mechSpecial&&a>=0&&i.forEach((e=>e.equip.unshift("special"))),"prefered"===settings.mechSpecial){let e=i.filter((e=>e.equip.includes("special")));e.length>0&&(i=e)}this.bestBody[e]=i},updateBestWeapon(){let e=0,t=poly.monsters[game.global.portal.spire.boss].weapon;for(let i in t){let a=t[i];a>e?(e=a,this.bestWeapon=[i]):a===e&&this.bestWeapon.push(i)}},getRandomMech(e){let t=this.bestBody[e][Math.floor(Math.random()*this.bestBody[e].length)],i=this.bestWeapon[Math.floor(Math.random()*this.bestWeapon.length)],a=this.SizeWeapons[e],r={hardpoint:new Array(a).fill(i),...t};return{...r,...this.getMechStats(r)}},getMechSpace(e,t){switch(e.size){case"small":return 2;case"medium":return(t??game.global.blood.prepared)>=2?4:5;case"large":return(t??game.global.blood.prepared)>=2?8:10;case"titan":return(t??game.global.blood.prepared)>=2?20:25;case"collector":return 1}return Number.MAX_SAFE_INTEGER},getMechCost(e,t){let{s:i,c:a}=poly.mechCost(e.size,e.infernal,t);return[i,a,this.getMechSpace(e,t)]},getMechRefund(e,t){let{s:i,c:a}=poly.mechCost(e.size,e.infernal,t);return[Math.floor(i/2),Math.floor(a/3)]},mechDesc(e){let t=e.power/this.bestMech[e.size].power;return`${game.loc("portal_mech_size_"+e.size)} ${game.loc("portal_mech_chassis_"+e.chassis)} (${Math.round(100*t)}%)`},buildMech(e){this._assemblyVue.b.infernal=e.infernal,this._assemblyVue.setSize(e.size),this._assemblyVue.setType(e.chassis);for(let t=0;t<e.hardpoint.length;t++)this._assemblyVue.setWep(e.hardpoint[t],t);for(let t=0;t<e.equip.length;t++)this._assemblyVue.setEquip(e.equip[t],t);this._assemblyVue.build(),GameLog.logSuccess("mech_build",`${this.mechDesc(e)} mech has been assembled.`,["hell"])},scrapMech(e){this._listVue.scrap(e.id)},dragMech(e,t){let i={oldDraggableIndex:e,newDraggableIndex:t,from:{querySelectorAll:()=>[],insertBefore:()=>!1}};needSandboxBypass?win.Sortable.get(this._listVue.$el).options.onEnd(cloneInto(i,unsafeWindow,{cloneFunctions:!0})):Sortable.get(this._listVue.$el).options.onEnd(i)}},JobManager={priorityList:[],craftingJobs:[],sortByPriority(){this.priorityList.sort(((e,t)=>e.priority-t.priority))},managedPriorityList(){let e=[];return settings.autoJobs&&(e=this.priorityList.filter((e=>e.isManaged()))),settings.autoCraftsmen&&(e=e.concat(this.craftingJobs.filter((e=>e.isManaged())))),e},servantsMax(){if(!game.global.race.servants)return 0;let e=game.global.race.servants.max;for(let t of this.priorityList)t.is.serve&&!t.isManaged()&&(e-=t.servants);return e},skilledServantsMax(){if(!game.global.race.servants)return 0;let e=game.global.race.servants.smax;for(let t of this.craftingJobs)t.isManaged()||(e-=t.servants);return e},craftingMax(){if(!game.global.city.foundry)return 0;let e=game.global.civic.craftsman.max;for(let t of this.craftingJobs)t.isManaged()||(e-=t.count);return e-=game.global.city.foundry.Thermite??0,e}},BuildingManager={priorityList:[],statePriorityList:[],updateBuildings(){for(let e of Object.values(buildings))e.updateResourceRequirements(),e.extraDescription=""},updateWeighting(){let e=weightingRules.filter((e=>e[wrGlobalCondition]()&&1!==e[wrMultiplier]()));for(let t of this.priorityList){t.weighting=t._weighting;for(let i=0;i<e.length;i++){let a=e[i][wrIndividualCondition](t);if(a){let r=e[i][wrDescription](a,t);if(""!==r&&(t.extraDescription+=r+"<br>"),t.weighting*=e[i][wrMultiplier](a),t.weighting<=0)break}}t.weighting>0&&(t.weighting=Math.max(Number.MIN_VALUE,t.weighting-1e-7*t.count),t.extraDescription="AutoBuild weighting: "+getNiceNumber(t.weighting)+"<br>"+t.extraDescription)}},sortByPriority(){this.priorityList.sort(((e,t)=>e.priority-t.priority)),this.statePriorityList.sort(((e,t)=>e.priority-t.priority))},managedPriorityList(){return this.priorityList.filter((e=>e.weighting>0))},managedStatePriorityList(){return this.statePriorityList.filter((e=>e.hasState()&&e.autoStateEnabled&&e.count>0))}},ProjectManager={priorityList:[],updateProjects(){for(let e of this.priorityList)e.updateResourceRequirements(),e.extraDescription=""},updateWeighting(){for(let e of this.priorityList)e.weighting=e._weighting*e.currentStep,e.isUnlocked()||(e.weighting=0,e.extraDescription="Locked<br>"),e.autoBuildEnabled&&settings.autoARPA||(e.weighting=0,e.extraDescription="AutoBuild disabled<br>"),e.count>=e.autoMax&&(e!==projects.ManaSyphon||!isPrestigeAllowed("vacuum"))&&(e.weighting=0,e.extraDescription="Maximum amount reached<br>"),settings.prestigeMADIgnoreArpa&&isEarlyGame()&&(e.weighting=0,e.extraDescription="Projects ignored Pre-MAD<br>"),state.queuedTargets.includes(e)&&(e.weighting=0,e.extraDescription="Queued project, processing...<br>"),state.triggerTargets.includes(e)&&(e.weighting=0,e.extraDescription="Active trigger, processing...<br>"),e.isAffordable(!0)||(e.weighting=0,e.extraDescription="Not enough storage<br>"),e===projects.ManaSyphon&&settings.prestigeBioseedConstruct&&("ascension"===settings.prestigeType||"demonic"===settings.prestigeType)&&game.global.race.witch_hunter&&(e.weighting=0,e.extraDescription="Not needed for current prestige<br>"),settings.arpaScaleWeighting&&(e.weighting/=1-.01*e.progress),e.weighting>0&&(e.extraDescription=`AutoARPA weighting: ${getNiceNumber(e.weighting)} (${e.currentStep}%)<br>${e.extraDescription}`)},sortByPriority(){this.priorityList.sort(((e,t)=>e.priority-t.priority))},managedPriorityList(){return this.priorityList.filter((e=>e.weighting>0))}},TriggerManager={priorityList:[],targetTriggers:[],resetTargetTriggers(){this.targetTriggers=[];for(let e of this.priorityList)e.updateComplete(),!e.complete&&e.areRequirementsMet()&&e.isActionPossible()&&!this.actionConflicts(e)&&this.targetTriggers.push(e)},getTrigger(e){return this.priorityList.find((t=>t.seq===e))},sortByPriority(){this.priorityList.sort(((e,t)=>e.priority-t.priority))},AddTrigger(e,t,i,a,r,n){let o=new Trigger(this.priorityList.length,this.priorityList.length,e,t,i,a,r,n);return this.priorityList.push(o),o},AddTriggerFromSetting(e){if(!this.priorityList.some((t=>t.seq===e.seq))){let t=new Trigger(e.seq,e.priority,e.requirementType,e.requirementId,e.requirementCount,e.actionType,e.actionId,e.actionCount);this.priorityList.push(t)}},RemoveTrigger(e){let t=this.priorityList.findIndex((t=>t.seq===e));if(-1!==t){this.priorityList.splice(t,1);for(let e=0;e<this.priorityList.length;e++){let t=this.priorityList[e];t.seq=e,t.priority=e}}},actionConflicts(e){for(let t of this.targetTriggers)if(Object.keys(t.cost()).some((t=>Object.keys(e.cost()).includes(t))))return!0;return!1}},WindowManager={openedByScript:!1,_callbackWindowTitle:"",_callbackFunction:null,currentModalWindowTitle(){let e=document.getElementById("modalBoxTitle");if(null===e)return"";let t=e.textContent.indexOf(" - ");return-1===t?e.textContent:e.textContent.substring(0,t)},openModalWindowWithCallback(e,t,i){this.isOpen()||(this.openedByScript=!0,this._callbackWindowTitle=t,this._callbackFunction=i,e.click())},isOpen(){return this.openedByScript||null!==document.getElementById("modalBox")||"block"===document.getElementById("scriptModal")?.style.display},checkCallbacks(){if(WindowManager.currentModalWindowTitle()===WindowManager._callbackWindowTitle&&WindowManager.openedByScript&&WindowManager._callbackFunction){WindowManager._callbackFunction();let e=document.querySelector(".modal .modal-close");null!==e&&e.click()}else{let e=document.querySelector(".modal");null!==e&&(e.style.display="")}WindowManager.openedByScript=!1,WindowManager._callbackWindowTitle="",WindowManager._callbackFunction=null}},KeyManager={_setFn:null,_unsetFn:null,_allFn:null,_eventProp:{Shift:"shiftKey",Control:"ctrlKey",Alt:"altKey",Meta:"metaKey"},_state:{x100:undefined,x25:undefined,x10:undefined},_userState:{x100:!1,x25:!1,x10:!1},_mode:"none",init(){let e=win.$._data(win.document).events,t=e?.keydown?.[0]?.handler??null,i=e?.keyup?.[0]?.handler??null,a=e?.mousemove?.[0]?.handler??null;a||t&&i?needSandboxBypass?(this._setFn=e=>t(cloneInto(e,unsafeWindow)),this._unsetFn=e=>i(cloneInto(e,unsafeWindow)),this._allFn=e=>a(cloneInto(e,unsafeWindow))):(this._setFn=t,this._unsetFn=i,this._allFn=a):(this._setFn=e=>document.dispatchEvent(new KeyboardEvent("keydown",e)),this._unsetFn=e=>document.dispatchEvent(new KeyboardEvent("keyup",e)),this._allFn=null),["keyup","keydown"].forEach((e=>win.document.addEventListener(e,(e=>{if(e.isTrusted){let t=e.key||e.keyCode,i=this._mapKeyToState(t);i&&(this._userState[i]="keydown"===e.type)}})))),win.document.addEventListener("mousemove",(e=>{e.isTrusted&&Object.entries(this._eventProp).forEach((([t,i])=>{let a=this._mapKeyToState(t);a&&(this._userState[a]=e[i])}))}))},_mapKeyToState(e){for(let t of["x100","x25","x10"])if(e===game.global.settings.keyMap[t])return t;return null},reset(){this._state.x100=undefined,this._state.x25=undefined,this._state.x10=undefined;let e=game.global.settings.keyMap,t=Object.values(e),i=["x100","x25","x10"].every((i=>t.indexOf(e[i])===t.lastIndexOf(e[i])));game.global.settings.mKeys?t.length!==i.length?this._mode="unset":this._allFn&&["x100","x25","x10"].every((e=>["Shift","Control","Alt","Meta"].includes(game.global.settings.keyMap[e])))?this._mode="all":this._mode="each":this._mode="none"},finish(){this.set(this._userState.x100,this._userState.x25,this._userState.x10)},setKey(e,t){if(this._state[e]===t)return;let i={key:game.global.settings.keyMap[e]};t?this._setFn(i):this._unsetFn(i),this._state[e]=t},set(e,t,i){if("all"===this._mode){let a=game.global.settings.keyMap,r={[this._eventProp[a.x100]]:this._state.x100=e,[this._eventProp[a.x25]]:this._state.x25=t,[this._eventProp[a.x10]]:this._state.x10=i};this._allFn(r)}else"each"!==this._mode&&"unset"!==this._mode||(this.setKey("x100",e),this.setKey("x25",t),this.setKey("x10",i))},*click(e){if("none"===this._mode)for(;e>0;)yield e-=1;else if("unset"===this._mode)for(this.set(!1,!1,!1);e>0;)yield e-=1;else for(;e>0;)e>=25e3?(this.set(!0,!0,!0),yield e-=25e3):e>=2500?(this.set(!0,!0,!1),yield e-=2500):e>=1e3?(this.set(!0,!1,!0),yield e-=1e3):e>=250?(this.set(!1,!0,!0),yield e-=250):e>=100?(this.set(!0,!1,!1),yield e-=100):e>=25?(this.set(!1,!0,!1),yield e-=25):e>=10?(this.set(!1,!1,!0),yield e-=10):(this.set(!1,!1,!1),yield e-=1)}},GameLog={Types:{special:"Specials",construction:"Construction",multi_construction:"Multi-part Construction",arpa:"A.R.P.A Progress",research:"Research",spying:"Spying",attack:"Attack",mercenary:"Mercenaries",mech_build:"Mech Build",mech_scrap:"Mech Scrap",outer_fleet:"True Path Fleet",mutation:"Mutations",prestige:"Prestige"},logInfo(e,t,i){settings.logEnabled&&settings["log_"+e]&&poly.messageQueue(t,"info",!1,i)},logSuccess(e,t,i){settings.logEnabled&&settings["log_"+e]&&poly.messageQueue(t,"success",!1,i)},logWarning(e,t,i){settings.logEnabled&&settings["log_"+e]&&poly.messageQueue(t,"warning",!1,i)},logDanger(e,t,i){settings.logEnabled&&settings["log_"+e]&&poly.messageQueue(t,"danger",!1,i)}},psychicPowerCost={murder:[10,8],boost:[75,60],assault:[45,36],profit:[65,52],mind_break:[80,64],stun:[100,80]};const infusionStep={"blood-lust":15,"blood-illuminate":12,"blood-greed":16,"blood-hoarder":14,"blood-artisan":8,"blood-attract":4,"blood-wrath":2},prestigeTypes=[{val:"none",label:"None",hint:"Endless game"},{val:"mad",short_label:"MAD",label:"Mutual Assured Destruction",hint:"MAD prestige once MAD has been researched and all soldiers are home"},{val:"bioseed",label:"Bioseed",hint:"Launches the bioseeder ship to perform prestige when required probes have been constructed"},{val:"cataclysm",label:"Cataclysm",hint:"Perform cataclysm reset by researching Dial It To 11 once available"},{val:"whitehole",label:"Whitehole",hint:"Infuses the blackhole with exotic materials to perform prestige"},{val:"vacuum",short_label:"Vacuum",label:"Vacuum Collapse",hint:"Build Mana Syphons until the end"},{val:"apocalypse",label:"AI Apocalypse",hint:"Perform AI Apocalypse reset by researching Protocol 66 once available"},{val:"ascension",label:"Ascension",hint:"Allows research of Incorporeal Existence and Ascension. Ascension Machine is managed by autoPower. Disable autoPrestige if you want to change custom race. Otherwise current one will be used , or default one if there's no current."},{val:"demonic",short_label:"DI",label:"Demonic Infusion",hint:"Sacrifice your entire civilization to absorb the essence of a greater demon lord"},{val:"terraform",label:"Terraform",hint:"Create new planet by building and powering Terraformer. Atmosphere Terraformer is managed by autoPower. Disable autoPrestige if you want to change custom planet. Otherwise current one will be used , or default one if there's no current. "},{val:"matrix",label:"Matrix",hint:"Build a computer simulation and trap your entire civilization in it"},{val:"retire",label:"Retirement",hint:"Retire and enjoy the easy life."},{val:"eden",label:"Eden",hint:"Build Garden Of Eden."}],prestigeOptions=buildSelectOptions(prestigeTypes),checkCompare={"==":(e,t)=>e==t,"!=":(e,t)=>e!=t,">":(e,t)=>e>t,"<":(e,t)=>e<t,">=":(e,t)=>e>=t,"<=":(e,t)=>e<=t,"===":(e,t)=>e===t,"!==":(e,t)=>e!==t,AND:(e,t)=>e&&t,OR:(e,t)=>e||t,NAND:(e,t)=>!(e&&t),NOR:(e,t)=>!(e||t),XOR:(e,t)=>!e!=!t,XNOR:(e,t)=>!e==!t,"AND!":(e,t)=>e&&!t,"OR!":(e,t)=>e||!t,"A?B":(e,t)=>e,"!A?B":(e,t)=>!e},checkCustom={"A?B":"Special check, uses Var2 as result if Var1 is truthy","!A?B":"Special check, uses Var2 as result if Var1 is falsy"},argType={building:{def:"city-farm",arg:"list",options:{list:buildingIds,name:"name",id:"_vueBinding"}},research:{def:"tech-mad",arg:"list",options:{list:techIds,name:"name",id:"_vueBinding"}},trait:{def:"kindling_kindred",arg:"list_cb",options:()=>Object.fromEntries(Object.entries(game.traits).map((([e,t])=>[e,{name:t.name,id:e}])))},genus:{def:"humanoid",arg:"select_cb",options:()=>[{val:"organism",label:game.loc("race_protoplasm")},...Object.values(game.races).map((e=>e.type)).filter(((e,t,i)=>e&&"organism"!==e&&i.indexOf(e)===t)).map((e=>({val:e,label:game.loc(`genelab_genus_${e}`)})))]},genus_ss:{def:"humanoid",arg:"select_cb",options:()=>[{val:"none",label:game.loc("genelab_genus_none")},...Object.values(game.races).map((e=>e.type)).filter(((e,t,i)=>e&&"organism"!==e&&"synthetic"!==e&&i.indexOf(e)===t)).map((e=>({val:e,label:game.loc(`genelab_genus_${e}`)})))]},project:{def:"arpalaunch_facility",arg:"select_cb",options:()=>Object.values(arpaIds).map((e=>({val:e._vueBinding,label:e.name})))},job:{def:"unemployed",arg:"select_cb",options:()=>Object.values(jobIds).map((e=>({val:e._originalId,label:e._originalName})))},job_servant:{def:"farmer",arg:"select_cb",options:()=>Object.values(jobIds).filter((e=>e.is.serve)).map((e=>({val:e._originalId,label:e._originalName})))},resource:{def:"Food",arg:"select_cb",options:()=>Object.values(resources).map((e=>({val:e._id,label:e.name})))},race:{def:"species",arg:"select_cb",options:()=>[{val:"species",label:"Current Race",hint:"Current race"},{val:"gods",label:"Fanaticism Race",hint:"Gods race"},{val:"old_gods",label:"Deify Race",hint:"Old gods race"},{val:"srace",label:"Imitation Race",hint:"Imitation trait race"},{val:"protoplasm",label:"Protoplasm",hint:"Race is not chosen yet"},...Object.values(races).map((e=>({val:e.id,label:e.name,hint:e.desc})))]},challenge:{def:"junker",arg:"select_cb",options:()=>challenges.flat().map((e=>({val:e.trait,label:game.loc(`evo_challenge_${e.id}`),hint:game.loc(`evo_challenge_${e.id}_effect`)})))},universe:{def:"standard",arg:"select_cb",options:()=>[{val:"bigbang",label:"Big Bang",hint:"Universe is not chosen yet"},...universes.map((e=>({val:e,label:game.loc(`universe_${e}`),hint:game.loc(`universe_${e}_desc`)})))]},government:{def:"anarchy",arg:"select_cb",options:()=>Object.keys(GovernmentManager.Types).map((e=>({val:e,label:game.loc(`govern_${e}`),hint:game.loc(`govern_${e}_desc`)})))},governor:{def:"none",arg:"select_cb",options:()=>[{val:"none",label:"None",hint:"No governor selected"},...governors.map((e=>({val:e,label:game.loc(`governor_${e}`),hint:game.loc(`governor_${e}_desc`)})))]},queue:{def:"queue",arg:"select_cb",options:()=>[{val:"queue",label:"Building",hint:"Buildings and projects queue"},{val:"r_queue",label:"Research",hint:"Research queue"},{val:"evo",label:"Evolution",hint:"Evolution queue"}]},date:{def:"day",arg:"select_cb",options:()=>[{val:"day",label:"Day (Year)",hint:"Day of year"},{val:"moon",label:"Day (Month)",hint:"Day of month (0-27 range)"},{val:"total",label:"Day (Total)",hint:"Day of run"},{val:"year",label:"Year",hint:"Year of run"},{val:"orbit",label:"Orbit",hint:"Planet orbit in days"},{val:"season",label:"Season",hint:"Current season (0 - Spring, 1 - Summer, 2 - Fall, 3 - Winter)"},{val:"temp",label:"Temperature",hint:"Current temperature (0 - Cold, 1 - Normal, 2 - Hot)"},{val:"impact",label:"Impact",hint:"Days remaining before Moon Impact, for Orbit Decay scenario"}]},soldiers:{def:"workers",arg:"select_cb",options:()=>[{val:"workers",label:"Total Soldiers"},{val:"max",label:"Total Soldiers Max"},{val:"currentCityGarrison",label:"City Soldiers"},{val:"maxCityGarrison",label:"City Soldiers Max"},{val:"hellSoldiers",label:"Hell Soldiers"},{val:"hellGarrison",label:"Hell Garrison"},{val:"hellPatrols",label:"Hell Patrols"},{val:"hellPatrolSize",label:"Hell Patrol Size"},{val:"wounded",label:"Wounded Soldiers"},{val:"deadSoldiers",label:"Dead Soldiers"},{val:"crew",label:"Ship Crew"},{val:"mercenaryCost",label:"Mercenary Cost"}]},tab:{def:"civTabs1",arg:"select_cb",options:()=>[{val:"civTabs0",label:game.loc("tab_evolve")},{val:"civTabs1",label:game.loc("tab_civil")},{val:"civTabs2",label:game.loc("tab_civics")},{val:"civTabs3",label:game.loc("tab_research")},{val:"civTabs4",label:game.loc("tab_resources")},{val:"civTabs5",label:game.loc("tech_arpa")},{val:"civTabs6",label:game.loc("mTabStats")},{val:"civTabs7",label:game.loc("tab_settings")}]},biome:{def:"grassland",arg:"select_cb",options:()=>biomeList.map((e=>({val:e,label:game.loc(`biome_${e}_name`)})))},ptrait:{def:"",arg:"select_cb",options:()=>[{val:"",label:"None",hint:"Planet have no trait"},...traitList.slice(1).map((e=>({val:e,label:game.loc(`planet_${e}`)})))]},industry:{def:"smelters",arg:"select_cb",options:()=>[{val:"smelters",label:"Total Smelter Slot Count"},{val:"factories",label:"Total Factory Slot Count"}]},other:{def:"rname",arg:"select_cb",options:()=>[{val:"rname",label:"Race Name",hint:"Ingame name of current race as string."},{val:"tpfleet",label:"Fleet Size",hint:"Amount of ships in True Path fleet as number."},{val:"mrelay",label:"Mass Relay charge",hint:"Charge percentage of the Mass Relay (0 = 0%, 0.5 = 50%, 1 = 100%"},{val:"satcost",label:"Satellite Cost",hint:"Money cost of next Swarm Satellite"},{val:"bcar",label:"Broken Cars",hint:"Amount of broken Surveyour Carports"},{val:"alevel",label:"Active challenges",hint:"Amount of active challenges"},{val:"tknow",label:"Tech Knowledge",hint:"Knowledge needed for most expensive unlocked research"}]}},argMap={race:e=>"species"===e||"gods"===e||"old_gods"===e?game.global.race[e]:"srace"===e?game.global.race.srace??"protoplasm":e,date:e=>"total"===e?game.global.stats.days:"impact"===e?game.global.race.orbit_decay?game.global.race.orbit_decay-game.global.stats.days:-1:game.global.city.calendar[e],industry:e=>"smelters"===e?SmelterManager.maxOperating():"factories"===e?FactoryManager.maxOperating():e,other:e=>"rname"===e?game.races["protoplasm"===game.global.race.species&&game.global.race.evoFinalMenu?game.global.race.evoFinalMenu:game.global.race.species].name:"tpfleet"===e?game.global.space.shipyard?.ships?.length??0:"mrelay"===e?game.global.space.m_relay?.charged/1e4??0:"satcost"===e?buildings.SunSwarmSatellite.cost.Money??0:"bcar"===e?game.global.portal.carport?.damaged??0:"alevel"===e?game.alevel()-1:"tknow"===e?state.knowledgeRequiredByTechs:e},checkTypes={String:{fn:e=>e,arg:"string",def:"none",desc:"Returns string"},Number:{fn:e=>e,arg:"number",def:0,desc:"Returns number"},Boolean:{fn:e=>e,arg:"boolean",def:!1,desc:"Returns boolean"},SettingDefault:{fn:e=>settingsRaw[e],arg:"string",def:"masterScriptToggle",desc:"Returns default value of setting, types varies"},SettingCurrent:{fn:e=>settings[e],arg:"string",def:"masterScriptToggle",desc:"Returns current value of setting, types varies"},Eval:{fn:e=>fastEval(e),arg:"string",def:"Math.PI",desc:"Returns result of evaluating code"},BuildingUnlocked:{fn:e=>buildingIds[e].isUnlocked(),...argType.building,desc:"Return true when building is unlocked"},BuildingClickable:{fn:e=>buildingIds[e].isClickable(),...argType.building,desc:"Return true when building have all required resources, and can be purchased"},BuildingAffordable:{fn:e=>buildingIds[e].isAffordable(!0),...argType.building,desc:"Return true when building is affordable, i.e. costs of all resources below storage caps"},BuildingCount:{fn:e=>buildingIds[e].count,...argType.building,desc:"Returns amount of buildings as number"},BuildingEnabled:{fn:e=>buildingIds[e].stateOnCount,...argType.building,desc:"Returns amount of powered buildings as number"},BuildingDisabled:{fn:e=>buildingIds[e].stateOffCount,...argType.building,desc:"Returns amount of unpowered buildings as number"},BuildingQueued:{fn:e=>state.queuedTargetsAll.includes(buildingIds[e]),...argType.building,desc:"Returns true when building in queue"},ProjectUnlocked:{fn:e=>arpaIds[e].isUnlocked(),...argType.project,desc:"Return true when project is unlocked"},ProjectCount:{fn:e=>arpaIds[e].count,...argType.project,desc:"Returns amount of projects as number"},ProjectProgress:{fn:e=>arpaIds[e].progress,...argType.project,desc:"Returns progress of projects as number"},JobUnlocked:{fn:e=>jobIds[e].isUnlocked(),...argType.job,desc:"Returns true when job is unlocked"},JobCount:{fn:e=>jobIds[e].count,...argType.job,desc:"Returns current amount of employees(both workers, and servants) as number"},JobMax:{fn:e=>jobIds[e].max,...argType.job,desc:"Returns maximum amount of assigned workers as number"},JobWorkers:{fn:e=>jobIds[e].workers,...argType.job,desc:"Returns current amount of workers as number"},JobServants:{fn:e=>jobIds[e].servants,...argType.job_servant,desc:"Returns current amount of servants as number"},ResearchUnlocked:{fn:e=>techIds[e].isUnlocked(),...argType.research,desc:"Returns true when research is unlocked"},ResearchComplete:{fn:e=>techIds[e].isResearched(),...argType.research,desc:"Returns true when research is complete"},ResourceUnlocked:{fn:e=>resources[e].isUnlocked(),...argType.resource,desc:"Returns true when resource or support is unlocked"},ResourceQuantity:{fn:e=>resources[e].currentQuantity,...argType.resource,desc:"Returns current amount of resource or support as number"},ResourceStorage:{fn:e=>resources[e].maxQuantity,...argType.resource,desc:"Returns maximum amount of resource or support as number. Power returns 'Disabled' amount."},ResourceMaxCost:{fn:e=>resources[e].maxCost,...argType.resource,desc:"Returns maximum cost of resource as number."},ResourceIncome:{fn:e=>resources[e].rateOfChange,...argType.resource,desc:"Returns current income of resource or unused support as number"},ResourceRatio:{fn:e=>resources[e].storageRatio,...argType.resource,desc:"Returns storage ratio of resource as number. Number 0.5 means that storage is 50% full, and such."},ResourceSatisfied:{fn:e=>resources[e].usefulRatio>=1,...argType.resource,desc:"Returns true when current amount of resource above maximum costs"},ResourceSatisfyRatio:{fn:e=>resources[e].usefulRatio,...argType.resource,desc:"Returns satisfy ratio of resource. Number 0.5 means that storead amount equal half of maximum costs"},ResourceDemanded:{fn:e=>resources[e].isDemanded(),...argType.resource,desc:"Returns true when resource is demanded, i.e. missed by some prioritized task, such as queue or trigger"},RaceId:{fn:e=>argMap.race(e),...argType.race,desc:"Returns ID of selected race as string"},RacePillared:{fn:e=>game.global.pillars[argMap.race(e)]>=game.alevel(),...argType.race,desc:"Returns true when selected race pillared at current star level"},RaceGenus:{fn:e=>races[game.global.race.species]?.genus===e,...argType.genus,desc:"Returns true when playing selected genus"},MimicGenus:{fn:e=>(game.global.race.ss_genus??"none")===e,...argType.genus_ss,desc:"Returns true when mimicking selected genus"},TraitLevel:{fn:e=>game.global.race[e]??0,...argType.trait,desc:"Returns trait level as number"},ResetType:{fn:e=>settings.prestigeType===e,arg:"select",options:prestigeOptions,def:"mad",desc:"Returns true when selected reset is active"},Challenge:{fn:e=>!!game.global.race[e],...argType.challenge,desc:"Returns true when selected challenge is active"},Universe:{fn:e=>game.global.race.universe===e,...argType.universe,desc:"Returns true when playing in selected universe"},Government:{fn:e=>game.global.civic.govern.type===e,...argType.government,desc:"Returns true when selected government is active"},Governor:{fn:e=>getGovernor()===e,...argType.governor,desc:"Returns true when selected governor is active"},Queue:{fn:e=>"evo"===e?settingsRaw.evolutionQueue.length:game.global[e].queue.length,...argType.queue,desc:"Returns amount of items in queue as number"},Date:{fn:e=>argMap.date(e),...argType.date,desc:"Returns ingame date as number"},Soldiers:{fn:e=>WarManager[e],...argType.soldiers,desc:"Returns amount of soldiers as number"},PlanetBiome:{fn:e=>game.global.city.biome===e,...argType.biome,desc:"Returns true when playing in selected biome"},PlanetTrait:{fn:e=>game.global.city.ptrait.includes(e),...argType.ptrait,desc:"Returns true when planet have selected trait"},Industry:{fn:e=>argMap.industry(e),...argType.industry,desc:"Returns information about Industry buildings"},Other:{fn:e=>argMap.other(e),...argType.other,desc:"Other uncategorized variables"}},retBools=["Boolean","BuildingUnlocked","BuildingClickable","BuildingAffordable","BuildingQueued","ProjectUnlocked","JobUnlocked","ResearchUnlocked","ResearchComplete","ResourceUnlocked","ResourceSatisfied","ResourceDemanded","RacePillared","RaceGenus","MimicGenus","ResetType","Challenge","Universe","Government","Governor","PlanetBiome","PlanetTrait"],overrideOnlyChecks=["Boolean","String","Number","RaceId"];var evalCache={},poly={astrologySign:()=>{let e=new Date;return 0===e.getMonth()&&e.getDate()>=20||1===e.getMonth()&&18>=e.getDate()?"aquarius":1===e.getMonth()&&e.getDate()>=19||2===e.getMonth()&&20>=e.getDate()?"pisces":2===e.getMonth()&&e.getDate()>=21||3===e.getMonth()&&19>=e.getDate()?"aries":3===e.getMonth()&&e.getDate()>=20||4===e.getMonth()&&20>=e.getDate()?"taurus":4===e.getMonth()&&e.getDate()>=21||5===e.getMonth()&&21>=e.getDate()?"gemini":5===e.getMonth()&&e.getDate()>=22||6===e.getMonth()&&22>=e.getDate()?"cancer":6===e.getMonth()&&e.getDate()>=23||7===e.getMonth()&&22>=e.getDate()?"leo":7===e.getMonth()&&e.getDate()>=23||8===e.getMonth()&&22>=e.getDate()?"virgo":8===e.getMonth()&&e.getDate()>=23||9===e.getMonth()&&22>=e.getDate()?"libra":9===e.getMonth()&&e.getDate()>=23||10===e.getMonth()&&22>=e.getDate()?"scorpio":10===e.getMonth()&&e.getDate()>=23||11===e.getMonth()&&21>=e.getDate()?"sagittarius":11===e.getMonth()&&e.getDate()>=22||0===e.getMonth()&&19>=e.getDate()?"capricorn":"time itself is broken"},arpaAdjustCosts:e=>(e=(e=>{var t=traitVal("creative",1,"-");if(t<1){var i={};return Object.keys(e).forEach((a=>{i[a]=()=>e[a]()*t})),i}return e})(e),poly.adjustCosts({cost:e})),govPrice:e=>{let t=game.global.civic.foreign[`gov${e}`],i=15384*t.eco;return i*=1+1.6*t.hstl/100,+(i*=1-.25*t.unrest/100).toFixed(0)},galaxyOffers:normalizeProperties([{buy:{res:"Deuterium",vol:5},sell:{res:"Helium_3",vol:25}},{buy:{res:"Neutronium",vol:2.5},sell:{res:"Copper",vol:200}},{buy:{res:"Adamantite",vol:3},sell:{res:"Iron",vol:300}},{buy:{res:"Elerium",vol:1},sell:{res:"Oil",vol:125}},{buy:{res:"Nano_Tube",vol:10},sell:{res:"Titanium",vol:20}},{buy:{res:"Graphene",vol:25},sell:{res:()=>game.global.race.kindling_kindred||game.global.race.smoldering?game.global.race.smoldering?"Chrysotile":"Stone":"Lumber",vol:1e3}},{buy:{res:"Stanene",vol:40},sell:{res:"Aluminium",vol:800}},{buy:{res:"Bolognium",vol:.75},sell:{res:"Uranium",vol:4}},{buy:{res:"Vitreloy",vol:1},sell:{res:"Infernite",vol:1}}]),supplyValue:{Lumber:{"in":.5,out:25e3},Chrysotile:{"in":.5,out:25e3},Stone:{"in":.5,out:25e3},Crystal:{"in":3,out:25e3},Furs:{"in":3,out:25e3},Copper:{"in":1.5,out:25e3},Iron:{"in":1.5,out:25e3},Aluminium:{"in":2.5,out:25e3},Cement:{"in":3,out:25e3},Coal:{"in":1.5,out:25e3},Oil:{"in":2.5,out:12e3},Uranium:{"in":5,out:300},Steel:{"in":3,out:25e3},Titanium:{"in":3,out:25e3},Alloy:{"in":6,out:25e3},Polymer:{"in":6,out:25e3},Iridium:{"in":8,out:25e3},Helium_3:{"in":4.5,out:12e3},Deuterium:{"in":4,out:1e3},Neutronium:{"in":15,out:1e3},Adamantite:{"in":12.5,out:1e3},Infernite:{"in":25,out:250},Elerium:{"in":30,out:250},Nano_Tube:{"in":6.5,out:1e3},Graphene:{"in":5,out:1e3},Stanene:{"in":4.5,out:1e3},Bolognium:{"in":18,out:1e3},Vitreloy:{"in":14,out:1e3},Orichalcum:{"in":10,out:1e3},Plywood:{"in":10,out:250},Brick:{"in":10,out:250},Wrought_Iron:{"in":10,out:250},Sheet_Metal:{"in":10,out:250},Mythril:{"in":12.5,out:250},Aerogel:{"in":16.5,out:250},Nanoweave:{"in":18,out:250},Scarletite:{"in":35,out:250}},monsters:{fire_elm:{weapon:{laser:1.05,flame:0,plasma:.25,kinetic:.5,missile:.5,sonic:1,shotgun:.75,tesla:.65},nozone:{freeze:!0,flooded:!0},amp:{hot:1.75,humid:.8,steam:.9}},water_elm:{weapon:{laser:.65,flame:.5,plasma:1,kinetic:.2,missile:.5,sonic:.5,shotgun:.25,tesla:.75},nozone:{hot:!0,freeze:!0},amp:{steam:1.5,river:1.1,flooded:2,rain:1.75,humid:1.25}},rock_golem:{weapon:{laser:1,flame:.5,plasma:1,kinetic:.65,missile:.95,sonic:.75,shotgun:.35,tesla:0},nozone:{},amp:{}},bone_golem:{weapon:{laser:.45,flame:.35,plasma:.55,kinetic:1,missile:1,sonic:.75,shotgun:.75,tesla:.15},nozone:{},amp:{}},mech_dino:{weapon:{laser:.85,flame:.05,plasma:.55,kinetic:.45,missile:.5,sonic:.35,shotgun:.5,tesla:1},nozone:{},amp:{}},plant:{weapon:{laser:.42,flame:1,plasma:.65,kinetic:.2,missile:.25,sonic:.75,shotgun:.35,tesla:.38},nozone:{},amp:{}},crazed:{weapon:{laser:.5,flame:.85,plasma:.65,kinetic:1,missile:.35,sonic:.15,shotgun:.95,tesla:.6},nozone:{},amp:{}},minotaur:{weapon:{laser:.32,flame:.5,plasma:.82,kinetic:.44,missile:1,sonic:.15,shotgun:.2,tesla:.35},nozone:{},amp:{}},ooze:{weapon:{laser:.2,flame:.65,plasma:1,kinetic:0,missile:0,sonic:.85,shotgun:0,tesla:.15},nozone:{},amp:{}},zombie:{weapon:{laser:.35,flame:1,plasma:.45,kinetic:.08,missile:.8,sonic:.18,shotgun:.95,tesla:.05},nozone:{},amp:{}},raptor:{weapon:{laser:.68,flame:.55,plasma:.85,kinetic:1,missile:.44,sonic:.22,shotgun:.33,tesla:.66},nozone:{},amp:{}},frost_giant:{weapon:{laser:.9,flame:.82,plasma:1,kinetic:.25,missile:.08,sonic:.45,shotgun:.28,tesla:.5},nozone:{hot:!0},amp:{freeze:2.5,hail:1.65}},swarm:{weapon:{laser:.02,flame:1,plasma:.04,kinetic:.01,missile:.08,sonic:.66,shotgun:.38,tesla:.45},nozone:{},amp:{}},dragon:{weapon:{laser:.18,flame:0,plasma:.12,kinetic:.35,missile:1,sonic:.22,shotgun:.65,tesla:.15},nozone:{},amp:{}},mech_dragon:{weapon:{laser:.84,flame:.1,plasma:.68,kinetic:.18,missile:.75,sonic:.22,shotgun:.28,tesla:1},nozone:{},amp:{}},construct:{weapon:{laser:.5,flame:.2,plasma:.6,kinetic:.34,missile:.9,sonic:.08,shotgun:.28,tesla:1},nozone:{},amp:{}},beholder:{weapon:{laser:.75,flame:.15,plasma:1,kinetic:.45,missile:.05,sonic:.01,shotgun:.12,tesla:.3},nozone:{},amp:{}},worm:{weapon:{laser:.55,flame:.38,plasma:.45,kinetic:.2,missile:.05,sonic:1,shotgun:.02,tesla:.01},nozone:{},amp:{}},hydra:{weapon:{laser:.85,flame:.75,plasma:.85,kinetic:.25,missile:.45,sonic:.5,shotgun:.6,tesla:.65},nozone:{},amp:{}},colossus:{weapon:{laser:1,flame:.05,plasma:.75,kinetic:.45,missile:1,sonic:.35,shotgun:.35,tesla:.5},nozone:{},amp:{}},lich:{weapon:{laser:.1,flame:.1,plasma:.1,kinetic:.45,missile:.75,sonic:.35,shotgun:.75,tesla:.5},nozone:{},amp:{}},ape:{weapon:{laser:1,flame:.95,plasma:.85,kinetic:.5,missile:.5,sonic:.05,shotgun:.35,tesla:.68},nozone:{},amp:{}},bandit:{weapon:{laser:.65,flame:.5,plasma:.85,kinetic:1,missile:.5,sonic:.25,shotgun:.75,tesla:.25},nozone:{},amp:{}},croc:{weapon:{laser:.65,flame:.05,plasma:.6,kinetic:.5,missile:.5,sonic:1,shotgun:.2,tesla:.75},nozone:{},amp:{}},djinni:{weapon:{laser:0,flame:.35,plasma:1,kinetic:.15,missile:0,sonic:.65,shotgun:.22,tesla:.4},nozone:{},amp:{}},snake:{weapon:{laser:.5,flame:.5,plasma:.5,kinetic:.5,missile:.5,sonic:.5,shotgun:.5,tesla:.5},nozone:{},amp:{}},centipede:{weapon:{laser:.5,flame:.85,plasma:.95,kinetic:.65,missile:.6,sonic:0,shotgun:.5,tesla:.01},nozone:{},amp:{}},spider:{weapon:{laser:.65,flame:1,plasma:.22,kinetic:.75,missile:.15,sonic:.38,shotgun:.9,tesla:.18},nozone:{},amp:{}},manticore:{weapon:{laser:.05,flame:.25,plasma:.95,kinetic:.5,missile:.15,sonic:.48,shotgun:.4,tesla:.6},nozone:{},amp:{}},fiend:{weapon:{laser:.75,flame:.25,plasma:.5,kinetic:.25,missile:.75,sonic:.25,shotgun:.5,tesla:.5},nozone:{},amp:{}},bat:{weapon:{laser:.16,flame:.18,plasma:.12,kinetic:.25,missile:.02,sonic:1,shotgun:.9,tesla:.58},nozone:{},amp:{}},medusa:{weapon:{laser:.35,flame:.1,plasma:.3,kinetic:.95,missile:1,sonic:.15,shotgun:.88,tesla:.26},nozone:{},amp:{}},ettin:{weapon:{laser:.5,flame:.35,plasma:.8,kinetic:.5,missile:.25,sonic:.3,shotgun:.6,tesla:.09},nozone:{},amp:{}},faceless:{weapon:{laser:.6,flame:.28,plasma:.6,kinetic:0,missile:.05,sonic:.8,shotgun:.15,tesla:1},nozone:{},amp:{}},enchanted:{weapon:{laser:1,flame:.02,plasma:.95,kinetic:.2,missile:.7,sonic:.05,shotgun:.65,tesla:.01},nozone:{},amp:{}},gargoyle:{weapon:{laser:.15,flame:.4,plasma:.3,kinetic:.5,missile:.5,sonic:.85,shotgun:1,tesla:.2},nozone:{},amp:{}},chimera:{weapon:{laser:.38,flame:.6,plasma:.42,kinetic:.85,missile:.35,sonic:.5,shotgun:.65,tesla:.8},nozone:{},amp:{}},gorgon:{weapon:{laser:.65,flame:.65,plasma:.65,kinetic:.65,missile:.65,sonic:.65,shotgun:.65,tesla:.65},nozone:{},amp:{}},kraken:{weapon:{laser:.75,flame:.35,plasma:.75,kinetic:.35,missile:.5,sonic:.18,shotgun:.05,tesla:.85},nozone:{},amp:{}},homunculus:{weapon:{laser:.05,flame:1,plasma:.1,kinetic:.85,missile:.65,sonic:.5,shotgun:.75,tesla:.2},nozone:{},amp:{}}},hellSupression:(e,t)=>{switch(e){case"ruins":{let e=t||buildings.RuinsGuardPost.stateOnCount,i=75*buildings.RuinsArcology.stateOnCount,a=game.armyRating(e*traitVal("high_pop",0,1),"hellArmy",0);a*=traitVal("holy",1,"+");let r=(a+i)/5e3;return{supress:r>1?1:r,rating:a+i}}case"gate":{let e=poly.hellSupression("ruins",t),i=100*buildings.GateTurret.stateOnCount;i*=traitVal("holy",1,"+");let a=(e.rating+i)/7500;return{supress:a>1?1:a,rating:e.rating+i}}default:return 0}},taxCap:e=>{let t=(haveTech("currency",5)||game.global.race.terrifying)&&!game.global.race.noble;if(e)return t?0:traitVal("noble",0,10);{let e=traitVal("noble",1,30);return t&&(e+=20),"oligarchy"===game.global.civic.govern.type&&(e+="bureaucrat"===getGovernor()?25:20),"noble"===getGovernor()&&(e+=20),e}},mechCost:(e,t,i)=>{let a=9999,r=1e7;switch(e){case"small":{let e=(i??game.global.blood.prepared)>=2?5e4:75e3;r=t?2.5*e:e,a=t?20:1}break;case"medium":r=t?45e4:18e4,a=t?100:4;break;case"large":r=t?925e3:375e3,a=t?500:20;break;case"titan":r=t?15e5:75e4,a=t?1500:75;break;case"collector":{let e=(i??game.global.blood.prepared)>=2?8e3:1e4;r=t?2.5*e:e,a=1}}return{s:a,c:r}},terrainRating:(e,t,i,a)=>(!e.equip.includes("special")||"small"!==e.size&&"medium"!==e.size&&"collector"!==e.size||t<1&&(t+=(1-t)*(i.includes("gravity")?.1:.2)),"small"!==e.size&&t<1&&(t+=(i.includes("fog")||i.includes("dark")?.005:.01)*(a??game.global.portal.mechbay.scouts))>1&&(t=1),t),weaponPower:(e,t)=>(t<1&&0!==t&&e.equip.includes("special")&&"titan"===e.size&&(t+=.25*(1-t)),e.equip.includes("special")&&"large"===e.size&&(t*=1.02),t),timeFormat:e=>{let t;if(e<0)t=game.loc("time_never");else if((e=+e.toFixed(0))>60){let i=e%60,a=(e-i)/60;if(a>=60){let e=a%60,i=(a-e)/60;t=i>24?`${(i-(e=i%24))/24}d ${e}h`:`${i}h ${e=("0"+e).slice(-2)}m`}else t=`${a=("0"+a).slice(-2)}m ${i=("0"+i).slice(-2)}s`}else t=`${e=("0"+e).slice(-2)}s`;return t},universeAffix:e=>{switch(e=e||game.global.race.universe){case"evil":return"e";case"antimatter":return"a";case"heavy":return"h";case"micro":return"m";case"magic":return"mg";default:return"l"}},genus_traits:{humanoid:{adaptable:1,wasteful:1},carnivore:{carnivore:1,beast:1,cautious:1},herbivore:{herbivore:1,instinct:1},small:{small:1,weak:1},giant:{large:1,strong:1},reptilian:{cold_blooded:1,scales:1},avian:{flier:1,hollow_bones:1,sky_lover:1},insectoid:{high_pop:1,fast_growth:1,high_metabolism:1},plant:{sappy:1,asymmetrical:1},fungi:{detritivore:1,spongy:1,spores:1},aquatic:{submerged:1,low_light:1},fey:{elusive:1,iron_allergy:1},heat:{smoldering:1,cold_intolerance:1},polar:{chilled:1,heat_intolerance:1},sand:{scavenger:1,nomadic:1},demonic:{immoral:1,evil:1,soul_eater:1},angelic:{blissful:1,pompous:1,holy:1},synthetic:{artifical:1,powered:1},eldritch:{psychic:1,tormented:1,darkness:1,unfathomable:1}},neg_roll_traits:["diverse","arrogant","angry","lazy","paranoid","greedy","puny","dumb","nearsighted","gluttony","slow","hard_of_hearing","pessimistic","solitary","pyrophobia","skittish","nyctophilia","frail","atrophy","invertebrate","pathetic","invertebrate","unorganized","slow_regen","snowy","mistrustful","fragrant","freespirit","hooved","heavy","gnawer"],crateValue:()=>Number(getVueById("createHead")?.buildCrateDesc().match(/(\d+)/g)[1]??0),containerValue:()=>Number(getVueById("createHead")?.buildContainerDesc().match(/(\d+)/g)[1]??0),piracy:e=>Number(getVueById(e)?.$options.filters.defense(e)??0),adjustCosts:(e,t)=>game.adjustCosts(cloneInto(e,unsafeWindow,{cloneFunctions:!0}),t),loc:(e,t)=>game.loc(e,cloneInto(t,unsafeWindow)),messageQueue:(e,t,i,a)=>game.messageQueue(e,t,i,cloneInto(a,unsafeWindow)),shipCosts:e=>game.shipCosts(cloneInto(e,unsafeWindow))};$().ready(mainAutoEvolveScript)})($)})();